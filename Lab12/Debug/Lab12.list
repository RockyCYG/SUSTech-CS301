
Lab12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018c4  08008b40  08008b40  00018b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a404  0800a404  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800a404  0800a404  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a404  0800a404  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a404  0800a404  0001a404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a408  0800a408  0001a408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a40c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000010  0800a41c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  0800a41c  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b96  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e66  00000000  00000000  00028c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002aa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000066f  00000000  00000000  0002b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a089  00000000  00000000  0002b95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d004  00000000  00000000  000459e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090d50  00000000  00000000  000529ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002154  00000000  00000000  000e373c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000e5890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	08008b28 	.word	0x08008b28

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	08008b28 	.word	0x08008b28

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_dmul>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000246:	bf1d      	ittte	ne
 8000248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800024c:	ea94 0f0c 	teqne	r4, ip
 8000250:	ea95 0f0c 	teqne	r5, ip
 8000254:	f000 f8de 	bleq	8000414 <__aeabi_dmul+0x1dc>
 8000258:	442c      	add	r4, r5
 800025a:	ea81 0603 	eor.w	r6, r1, r3
 800025e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026a:	bf18      	it	ne
 800026c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000278:	d038      	beq.n	80002ec <__aeabi_dmul+0xb4>
 800027a:	fba0 ce02 	umull	ip, lr, r0, r2
 800027e:	f04f 0500 	mov.w	r5, #0
 8000282:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000286:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800028a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028e:	f04f 0600 	mov.w	r6, #0
 8000292:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000296:	f09c 0f00 	teq	ip, #0
 800029a:	bf18      	it	ne
 800029c:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002ac:	d204      	bcs.n	80002b8 <__aeabi_dmul+0x80>
 80002ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b2:	416d      	adcs	r5, r5
 80002b4:	eb46 0606 	adc.w	r6, r6, r6
 80002b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002d0:	bf88      	it	hi
 80002d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002d6:	d81e      	bhi.n	8000316 <__aeabi_dmul+0xde>
 80002d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002f0:	ea46 0101 	orr.w	r1, r6, r1
 80002f4:	ea40 0002 	orr.w	r0, r0, r2
 80002f8:	ea81 0103 	eor.w	r1, r1, r3
 80002fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000300:	bfc2      	ittt	gt
 8000302:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030a:	bd70      	popgt	{r4, r5, r6, pc}
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000310:	f04f 0e00 	mov.w	lr, #0
 8000314:	3c01      	subs	r4, #1
 8000316:	f300 80ab 	bgt.w	8000470 <__aeabi_dmul+0x238>
 800031a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800031e:	bfde      	ittt	le
 8000320:	2000      	movle	r0, #0
 8000322:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000326:	bd70      	pople	{r4, r5, r6, pc}
 8000328:	f1c4 0400 	rsb	r4, r4, #0
 800032c:	3c20      	subs	r4, #32
 800032e:	da35      	bge.n	800039c <__aeabi_dmul+0x164>
 8000330:	340c      	adds	r4, #12
 8000332:	dc1b      	bgt.n	800036c <__aeabi_dmul+0x134>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f305 	lsl.w	r3, r0, r5
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	fa21 f604 	lsr.w	r6, r1, r4
 800035c:	eb42 0106 	adc.w	r1, r2, r6
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 040c 	rsb	r4, r4, #12
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f304 	lsl.w	r3, r0, r4
 8000378:	fa20 f005 	lsr.w	r0, r0, r5
 800037c:	fa01 f204 	lsl.w	r2, r1, r4
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 0520 	rsb	r5, r4, #32
 80003a0:	fa00 f205 	lsl.w	r2, r0, r5
 80003a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea43 0302 	orr.w	r3, r3, r2
 80003b4:	fa21 f004 	lsr.w	r0, r1, r4
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	fa21 f204 	lsr.w	r2, r1, r4
 80003c0:	ea20 0002 	bic.w	r0, r0, r2
 80003c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f094 0f00 	teq	r4, #0
 80003d8:	d10f      	bne.n	80003fa <__aeabi_dmul+0x1c2>
 80003da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003de:	0040      	lsls	r0, r0, #1
 80003e0:	eb41 0101 	adc.w	r1, r1, r1
 80003e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3c01      	subeq	r4, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1a6>
 80003ee:	ea41 0106 	orr.w	r1, r1, r6
 80003f2:	f095 0f00 	teq	r5, #0
 80003f6:	bf18      	it	ne
 80003f8:	4770      	bxne	lr
 80003fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	eb43 0303 	adc.w	r3, r3, r3
 8000404:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000408:	bf08      	it	eq
 800040a:	3d01      	subeq	r5, #1
 800040c:	d0f7      	beq.n	80003fe <__aeabi_dmul+0x1c6>
 800040e:	ea43 0306 	orr.w	r3, r3, r6
 8000412:	4770      	bx	lr
 8000414:	ea94 0f0c 	teq	r4, ip
 8000418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800041c:	bf18      	it	ne
 800041e:	ea95 0f0c 	teqne	r5, ip
 8000422:	d00c      	beq.n	800043e <__aeabi_dmul+0x206>
 8000424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000428:	bf18      	it	ne
 800042a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042e:	d1d1      	bne.n	80003d4 <__aeabi_dmul+0x19c>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000442:	bf06      	itte	eq
 8000444:	4610      	moveq	r0, r2
 8000446:	4619      	moveq	r1, r3
 8000448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800044c:	d019      	beq.n	8000482 <__aeabi_dmul+0x24a>
 800044e:	ea94 0f0c 	teq	r4, ip
 8000452:	d102      	bne.n	800045a <__aeabi_dmul+0x222>
 8000454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000458:	d113      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800045a:	ea95 0f0c 	teq	r5, ip
 800045e:	d105      	bne.n	800046c <__aeabi_dmul+0x234>
 8000460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000464:	bf1c      	itt	ne
 8000466:	4610      	movne	r0, r2
 8000468:	4619      	movne	r1, r3
 800046a:	d10a      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000474:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000486:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <__aeabi_drsub>:
 800048c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e002      	b.n	8000498 <__adddf3>
 8000492:	bf00      	nop

08000494 <__aeabi_dsub>:
 8000494:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000498 <__adddf3>:
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800049e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	bf1f      	itttt	ne
 80004ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004be:	f000 80e2 	beq.w	8000686 <__adddf3+0x1ee>
 80004c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ca:	bfb8      	it	lt
 80004cc:	426d      	neglt	r5, r5
 80004ce:	dd0c      	ble.n	80004ea <__adddf3+0x52>
 80004d0:	442c      	add	r4, r5
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	ea82 0000 	eor.w	r0, r2, r0
 80004de:	ea83 0101 	eor.w	r1, r3, r1
 80004e2:	ea80 0202 	eor.w	r2, r0, r2
 80004e6:	ea81 0303 	eor.w	r3, r1, r3
 80004ea:	2d36      	cmp	r5, #54	; 0x36
 80004ec:	bf88      	it	hi
 80004ee:	bd30      	pophi	{r4, r5, pc}
 80004f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000500:	d002      	beq.n	8000508 <__adddf3+0x70>
 8000502:	4240      	negs	r0, r0
 8000504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000508:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800050c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000510:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000514:	d002      	beq.n	800051c <__adddf3+0x84>
 8000516:	4252      	negs	r2, r2
 8000518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800051c:	ea94 0f05 	teq	r4, r5
 8000520:	f000 80a7 	beq.w	8000672 <__adddf3+0x1da>
 8000524:	f1a4 0401 	sub.w	r4, r4, #1
 8000528:	f1d5 0e20 	rsbs	lr, r5, #32
 800052c:	db0d      	blt.n	800054a <__adddf3+0xb2>
 800052e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000532:	fa22 f205 	lsr.w	r2, r2, r5
 8000536:	1880      	adds	r0, r0, r2
 8000538:	f141 0100 	adc.w	r1, r1, #0
 800053c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000540:	1880      	adds	r0, r0, r2
 8000542:	fa43 f305 	asr.w	r3, r3, r5
 8000546:	4159      	adcs	r1, r3
 8000548:	e00e      	b.n	8000568 <__adddf3+0xd0>
 800054a:	f1a5 0520 	sub.w	r5, r5, #32
 800054e:	f10e 0e20 	add.w	lr, lr, #32
 8000552:	2a01      	cmp	r2, #1
 8000554:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000558:	bf28      	it	cs
 800055a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800055e:	fa43 f305 	asr.w	r3, r3, r5
 8000562:	18c0      	adds	r0, r0, r3
 8000564:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	d507      	bpl.n	800057e <__adddf3+0xe6>
 800056e:	f04f 0e00 	mov.w	lr, #0
 8000572:	f1dc 0c00 	rsbs	ip, ip, #0
 8000576:	eb7e 0000 	sbcs.w	r0, lr, r0
 800057a:	eb6e 0101 	sbc.w	r1, lr, r1
 800057e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000582:	d31b      	bcc.n	80005bc <__adddf3+0x124>
 8000584:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000588:	d30c      	bcc.n	80005a4 <__adddf3+0x10c>
 800058a:	0849      	lsrs	r1, r1, #1
 800058c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000590:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000594:	f104 0401 	add.w	r4, r4, #1
 8000598:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800059c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005a0:	f080 809a 	bcs.w	80006d8 <__adddf3+0x240>
 80005a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a8:	bf08      	it	eq
 80005aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ae:	f150 0000 	adcs.w	r0, r0, #0
 80005b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b6:	ea41 0105 	orr.w	r1, r1, r5
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005c0:	4140      	adcs	r0, r0
 80005c2:	eb41 0101 	adc.w	r1, r1, r1
 80005c6:	3c01      	subs	r4, #1
 80005c8:	bf28      	it	cs
 80005ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ce:	d2e9      	bcs.n	80005a4 <__adddf3+0x10c>
 80005d0:	f091 0f00 	teq	r1, #0
 80005d4:	bf04      	itt	eq
 80005d6:	4601      	moveq	r1, r0
 80005d8:	2000      	moveq	r0, #0
 80005da:	fab1 f381 	clz	r3, r1
 80005de:	bf08      	it	eq
 80005e0:	3320      	addeq	r3, #32
 80005e2:	f1a3 030b 	sub.w	r3, r3, #11
 80005e6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ea:	da0c      	bge.n	8000606 <__adddf3+0x16e>
 80005ec:	320c      	adds	r2, #12
 80005ee:	dd08      	ble.n	8000602 <__adddf3+0x16a>
 80005f0:	f102 0c14 	add.w	ip, r2, #20
 80005f4:	f1c2 020c 	rsb	r2, r2, #12
 80005f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005fc:	fa21 f102 	lsr.w	r1, r1, r2
 8000600:	e00c      	b.n	800061c <__adddf3+0x184>
 8000602:	f102 0214 	add.w	r2, r2, #20
 8000606:	bfd8      	it	le
 8000608:	f1c2 0c20 	rsble	ip, r2, #32
 800060c:	fa01 f102 	lsl.w	r1, r1, r2
 8000610:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000614:	bfdc      	itt	le
 8000616:	ea41 010c 	orrle.w	r1, r1, ip
 800061a:	4090      	lslle	r0, r2
 800061c:	1ae4      	subs	r4, r4, r3
 800061e:	bfa2      	ittt	ge
 8000620:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000624:	4329      	orrge	r1, r5
 8000626:	bd30      	popge	{r4, r5, pc}
 8000628:	ea6f 0404 	mvn.w	r4, r4
 800062c:	3c1f      	subs	r4, #31
 800062e:	da1c      	bge.n	800066a <__adddf3+0x1d2>
 8000630:	340c      	adds	r4, #12
 8000632:	dc0e      	bgt.n	8000652 <__adddf3+0x1ba>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0220 	rsb	r2, r4, #32
 800063c:	fa20 f004 	lsr.w	r0, r0, r4
 8000640:	fa01 f302 	lsl.w	r3, r1, r2
 8000644:	ea40 0003 	orr.w	r0, r0, r3
 8000648:	fa21 f304 	lsr.w	r3, r1, r4
 800064c:	ea45 0103 	orr.w	r1, r5, r3
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f1c4 040c 	rsb	r4, r4, #12
 8000656:	f1c4 0220 	rsb	r2, r4, #32
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 f304 	lsl.w	r3, r1, r4
 8000662:	ea40 0003 	orr.w	r0, r0, r3
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	fa21 f004 	lsr.w	r0, r1, r4
 800066e:	4629      	mov	r1, r5
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	f094 0f00 	teq	r4, #0
 8000676:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800067a:	bf06      	itte	eq
 800067c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000680:	3401      	addeq	r4, #1
 8000682:	3d01      	subne	r5, #1
 8000684:	e74e      	b.n	8000524 <__adddf3+0x8c>
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf18      	it	ne
 800068c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000690:	d029      	beq.n	80006e6 <__adddf3+0x24e>
 8000692:	ea94 0f05 	teq	r4, r5
 8000696:	bf08      	it	eq
 8000698:	ea90 0f02 	teqeq	r0, r2
 800069c:	d005      	beq.n	80006aa <__adddf3+0x212>
 800069e:	ea54 0c00 	orrs.w	ip, r4, r0
 80006a2:	bf04      	itt	eq
 80006a4:	4619      	moveq	r1, r3
 80006a6:	4610      	moveq	r0, r2
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea91 0f03 	teq	r1, r3
 80006ae:	bf1e      	ittt	ne
 80006b0:	2100      	movne	r1, #0
 80006b2:	2000      	movne	r0, #0
 80006b4:	bd30      	popne	{r4, r5, pc}
 80006b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ba:	d105      	bne.n	80006c8 <__adddf3+0x230>
 80006bc:	0040      	lsls	r0, r0, #1
 80006be:	4149      	adcs	r1, r1
 80006c0:	bf28      	it	cs
 80006c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006c6:	bd30      	pop	{r4, r5, pc}
 80006c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006cc:	bf3c      	itt	cc
 80006ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006d2:	bd30      	popcc	{r4, r5, pc}
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006e0:	f04f 0000 	mov.w	r0, #0
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf1a      	itte	ne
 80006ec:	4619      	movne	r1, r3
 80006ee:	4610      	movne	r0, r2
 80006f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006f4:	bf1c      	itt	ne
 80006f6:	460b      	movne	r3, r1
 80006f8:	4602      	movne	r2, r0
 80006fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006fe:	bf06      	itte	eq
 8000700:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000704:	ea91 0f03 	teqeq	r1, r3
 8000708:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	bf00      	nop

08000710 <__aeabi_ui2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f04f 0500 	mov.w	r5, #0
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	e750      	b.n	80005d0 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_i2d>:
 8000730:	f090 0f00 	teq	r0, #0
 8000734:	bf04      	itt	eq
 8000736:	2100      	moveq	r1, #0
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000740:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000744:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000748:	bf48      	it	mi
 800074a:	4240      	negmi	r0, r0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e73e      	b.n	80005d0 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_f2d>:
 8000754:	0042      	lsls	r2, r0, #1
 8000756:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800075a:	ea4f 0131 	mov.w	r1, r1, rrx
 800075e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000762:	bf1f      	itttt	ne
 8000764:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000768:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800076c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000770:	4770      	bxne	lr
 8000772:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000776:	bf08      	it	eq
 8000778:	4770      	bxeq	lr
 800077a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800077e:	bf04      	itt	eq
 8000780:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000784:	4770      	bxeq	lr
 8000786:	b530      	push	{r4, r5, lr}
 8000788:	f44f 7460 	mov.w	r4, #896	; 0x380
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000794:	e71c      	b.n	80005d0 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_ul2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f04f 0500 	mov.w	r5, #0
 80007a6:	e00a      	b.n	80007be <__aeabi_l2d+0x16>

080007a8 <__aeabi_l2d>:
 80007a8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ac:	bf08      	it	eq
 80007ae:	4770      	bxeq	lr
 80007b0:	b530      	push	{r4, r5, lr}
 80007b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007b6:	d502      	bpl.n	80007be <__aeabi_l2d+0x16>
 80007b8:	4240      	negs	r0, r0
 80007ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007be:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ca:	f43f aed8 	beq.w	800057e <__adddf3+0xe6>
 80007ce:	f04f 0203 	mov.w	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007de:	bf18      	it	ne
 80007e0:	3203      	addne	r2, #3
 80007e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007e6:	f1c2 0320 	rsb	r3, r2, #32
 80007ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ee:	fa20 f002 	lsr.w	r0, r0, r2
 80007f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007f6:	ea40 000e 	orr.w	r0, r0, lr
 80007fa:	fa21 f102 	lsr.w	r1, r1, r2
 80007fe:	4414      	add	r4, r2
 8000800:	e6bd      	b.n	800057e <__adddf3+0xe6>
 8000802:	bf00      	nop

08000804 <__aeabi_d2uiz>:
 8000804:	004a      	lsls	r2, r1, #1
 8000806:	d211      	bcs.n	800082c <__aeabi_d2uiz+0x28>
 8000808:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800080c:	d211      	bcs.n	8000832 <__aeabi_d2uiz+0x2e>
 800080e:	d50d      	bpl.n	800082c <__aeabi_d2uiz+0x28>
 8000810:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000814:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000818:	d40e      	bmi.n	8000838 <__aeabi_d2uiz+0x34>
 800081a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000822:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000826:	fa23 f002 	lsr.w	r0, r3, r2
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000836:	d102      	bne.n	800083e <__aeabi_d2uiz+0x3a>
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	4770      	bx	lr
 800083e:	f04f 0000 	mov.w	r0, #0
 8000842:	4770      	bx	lr

08000844 <AT24CXX_Init>:
//2010/6/10
//V1.2

//初始化IIC接口
void AT24CXX_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	IIC_Init();
 8000848:	f005 ff1e 	bl	8006688 <IIC_Init>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <AT24CXX_ReadOneByte>:
//在AT24CXX指定地址读出一个数据
//ReadAddr:开始读数的地址
//返回值  :读到的数据
uint8_t AT24CXX_ReadOneByte(uint16_t ReadAddr)
{				  
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
    IIC_Start();  
 800085e:	f005 ff25 	bl	80066ac <IIC_Start>
	{
		IIC_Send_Byte(0XA0);	   //发送写命令
		IIC_Wait_Ack();
		IIC_Send_Byte(ReadAddr>>8);//发送高地址
		IIC_Wait_Ack();		 
	}else IIC_Send_Byte(0XA0+((ReadAddr/256)<<1));   //发送器件地址0XA0,写数据
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	b29b      	uxth	r3, r3
 8000868:	b2db      	uxtb	r3, r3
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	b2db      	uxtb	r3, r3
 800086e:	3b60      	subs	r3, #96	; 0x60
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f006 f81e 	bl	80068b4 <IIC_Send_Byte>

	IIC_Wait_Ack(); 
 8000878:	f005 ff78 	bl	800676c <IIC_Wait_Ack>
    IIC_Send_Byte(ReadAddr%256);   //发送低地址
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f006 f817 	bl	80068b4 <IIC_Send_Byte>
	IIC_Wait_Ack();	    
 8000886:	f005 ff71 	bl	800676c <IIC_Wait_Ack>
	IIC_Start();  	 	   
 800088a:	f005 ff0f 	bl	80066ac <IIC_Start>
	IIC_Send_Byte(0XA1);           //进入接收模式
 800088e:	20a1      	movs	r0, #161	; 0xa1
 8000890:	f006 f810 	bl	80068b4 <IIC_Send_Byte>
	IIC_Wait_Ack();	 
 8000894:	f005 ff6a 	bl	800676c <IIC_Wait_Ack>
    temp=IIC_Read_Byte(0);		   
 8000898:	2000      	movs	r0, #0
 800089a:	f006 f853 	bl	8006944 <IIC_Read_Byte>
 800089e:	4603      	mov	r3, r0
 80008a0:	73fb      	strb	r3, [r7, #15]
    IIC_Stop();//产生一个停止条件
 80008a2:	f005 ff33 	bl	800670c <IIC_Stop>
	return temp;
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <AT24CXX_WriteOneByte>:
//在AT24CXX指定地址写入一个数据
//WriteAddr  :写入数据的目的地址
//DataToWrite:要写入的数据
void AT24CXX_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{				   	  	    																 
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	80fb      	strh	r3, [r7, #6]
 80008bc:	4613      	mov	r3, r2
 80008be:	717b      	strb	r3, [r7, #5]
    IIC_Start();  
 80008c0:	f005 fef4 	bl	80066ac <IIC_Start>
		IIC_Send_Byte(0XA0);	    //发送写命令
		IIC_Wait_Ack();
		IIC_Send_Byte(WriteAddr>>8);//发送高地址
 	}else
	{
		IIC_Send_Byte(0XA0+((WriteAddr/256)<<1));   //发送器件地址0XA0,写数据
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	3b60      	subs	r3, #96	; 0x60
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f005 ffed 	bl	80068b4 <IIC_Send_Byte>
	}	 
	IIC_Wait_Ack();	   
 80008da:	f005 ff47 	bl	800676c <IIC_Wait_Ack>
    IIC_Send_Byte(WriteAddr%256);   //发送低地址
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f005 ffe6 	bl	80068b4 <IIC_Send_Byte>
	IIC_Wait_Ack(); 	 										  		   
 80008e8:	f005 ff40 	bl	800676c <IIC_Wait_Ack>
	IIC_Send_Byte(DataToWrite);     //发送字节
 80008ec:	797b      	ldrb	r3, [r7, #5]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 ffe0 	bl	80068b4 <IIC_Send_Byte>
	IIC_Wait_Ack();  		    	   
 80008f4:	f005 ff3a 	bl	800676c <IIC_Wait_Ack>
    IIC_Stop();//产生一个停止条件
 80008f8:	f005 ff08 	bl	800670c <IIC_Stop>
	HAL_Delay(10);
 80008fc:	200a      	movs	r0, #10
 80008fe:	f006 fa0f 	bl	8006d20 <HAL_Delay>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <AT24CXX_Check>:
//这里用了24XX的最后一个地址(255)来存储标志字.
//如果用其他24C系列,这个地址要修改
//返回1:检测失败
//返回0:检测成功
uint8_t AT24CXX_Check(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=AT24CXX_ReadOneByte(255);//避免每次开机都写AT24CXX
 8000910:	20ff      	movs	r0, #255	; 0xff
 8000912:	f7ff ff9d 	bl	8000850 <AT24CXX_ReadOneByte>
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;		   
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b55      	cmp	r3, #85	; 0x55
 800091e:	d101      	bne.n	8000924 <AT24CXX_Check+0x1a>
 8000920:	2300      	movs	r3, #0
 8000922:	e00e      	b.n	8000942 <AT24CXX_Check+0x38>
	else//排除第一次初始化的情况
	{
		AT24CXX_WriteOneByte(255,0X55);
 8000924:	2155      	movs	r1, #85	; 0x55
 8000926:	20ff      	movs	r0, #255	; 0xff
 8000928:	f7ff ffc2 	bl	80008b0 <AT24CXX_WriteOneByte>
	    temp=AT24CXX_ReadOneByte(255);	  
 800092c:	20ff      	movs	r0, #255	; 0xff
 800092e:	f7ff ff8f 	bl	8000850 <AT24CXX_ReadOneByte>
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b55      	cmp	r3, #85	; 0x55
 800093a:	d101      	bne.n	8000940 <AT24CXX_Check+0x36>
 800093c:	2300      	movs	r3, #0
 800093e:	e000      	b.n	8000942 <AT24CXX_Check+0x38>
	}
	return 1;											  
 8000940:	2301      	movs	r3, #1
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <AT24CXX_Read>:
//在AT24CXX里面的指定地址开始读出指定个数的数据
//ReadAddr :开始读出的地址 对24c02为0~255
//pBuffer  :数据数组首地址
//NumToRead:要读出数据的个数
void AT24CXX_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800094a:	b590      	push	{r4, r7, lr}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	6039      	str	r1, [r7, #0]
 8000954:	80fb      	strh	r3, [r7, #6]
 8000956:	4613      	mov	r3, r2
 8000958:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800095a:	e00d      	b.n	8000978 <AT24CXX_Read+0x2e>
	{
		*pBuffer++=AT24CXX_ReadOneByte(ReadAddr++);	
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	80fa      	strh	r2, [r7, #6]
 8000962:	683c      	ldr	r4, [r7, #0]
 8000964:	1c62      	adds	r2, r4, #1
 8000966:	603a      	str	r2, [r7, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff71 	bl	8000850 <AT24CXX_ReadOneByte>
 800096e:	4603      	mov	r3, r0
 8000970:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8000972:	88bb      	ldrh	r3, [r7, #4]
 8000974:	3b01      	subs	r3, #1
 8000976:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8000978:	88bb      	ldrh	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ee      	bne.n	800095c <AT24CXX_Read+0x12>
	}
}  
 800097e:	bf00      	nop
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bd90      	pop	{r4, r7, pc}

08000988 <AT24CXX_Write>:
//在AT24CXX里面的指定地址开始写入指定个数的数据
//WriteAddr :开始写入的地址 对24c02为0~255
//pBuffer   :数据数组首地址
//NumToWrite:要写入数据的个数
void AT24CXX_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	80fb      	strh	r3, [r7, #6]
 8000994:	4613      	mov	r3, r2
 8000996:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8000998:	e00c      	b.n	80009b4 <AT24CXX_Write+0x2c>
	{
		AT24CXX_WriteOneByte(WriteAddr,*pBuffer);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff84 	bl	80008b0 <AT24CXX_WriteOneByte>
		WriteAddr++;
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	3301      	adds	r3, #1
 80009ac:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80009b4:	88bb      	ldrh	r3, [r7, #4]
 80009b6:	1e5a      	subs	r2, r3, #1
 80009b8:	80ba      	strh	r2, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1ed      	bne.n	800099a <AT24CXX_Write+0x12>
	}
}
 80009be:	bf00      	nop
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009dc:	4b46      	ldr	r3, [pc, #280]	; (8000af8 <MX_GPIO_Init+0x130>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a45      	ldr	r2, [pc, #276]	; (8000af8 <MX_GPIO_Init+0x130>)
 80009e2:	f043 0320 	orr.w	r3, r3, #32
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b43      	ldr	r3, [pc, #268]	; (8000af8 <MX_GPIO_Init+0x130>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0320 	and.w	r3, r3, #32
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f4:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <MX_GPIO_Init+0x130>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a3f      	ldr	r2, [pc, #252]	; (8000af8 <MX_GPIO_Init+0x130>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <MX_GPIO_Init+0x130>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <MX_GPIO_Init+0x130>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a39      	ldr	r2, [pc, #228]	; (8000af8 <MX_GPIO_Init+0x130>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b37      	ldr	r3, [pc, #220]	; (8000af8 <MX_GPIO_Init+0x130>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2a:	4834      	ldr	r0, [pc, #208]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a2c:	f006 fd97 	bl	800755e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IIC_SDA_Pin|IIC_SCL_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000a36:	4832      	ldr	r0, [pc, #200]	; (8000b00 <MX_GPIO_Init+0x138>)
 8000a38:	f006 fd91 	bl	800755e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2104      	movs	r1, #4
 8000a40:	4830      	ldr	r0, [pc, #192]	; (8000b04 <MX_GPIO_Init+0x13c>)
 8000a42:	f006 fd8c 	bl	800755e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8000a46:	2320      	movs	r3, #32
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4a:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <MX_GPIO_Init+0x140>)
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	4619      	mov	r1, r3
 8000a58:	4829      	ldr	r0, [pc, #164]	; (8000b00 <MX_GPIO_Init+0x138>)
 8000a5a:	f006 fbd5 	bl	8007208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4619      	mov	r1, r3
 8000a76:	4821      	ldr	r0, [pc, #132]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a78:	f006 fbc6 	bl	8007208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_GPIO_Init+0x140>)
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481a      	ldr	r0, [pc, #104]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a92:	f006 fbb9 	bl	8007208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IIC_SDA_Pin;
 8000a96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a9c:	2311      	movs	r3, #17
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IIC_SDA_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4619      	mov	r1, r3
 8000aae:	4814      	ldr	r0, [pc, #80]	; (8000b00 <MX_GPIO_Init+0x138>)
 8000ab0:	f006 fbaa 	bl	8007208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IIC_SCL_Pin;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IIC_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4619      	mov	r1, r3
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <MX_GPIO_Init+0x138>)
 8000ace:	f006 fb9b 	bl	8007208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <MX_GPIO_Init+0x13c>)
 8000aea:	f006 fb8d 	bl	8007208 <HAL_GPIO_Init>

}
 8000aee:	bf00      	nop
 8000af0:	3720      	adds	r7, #32
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40010800 	.word	0x40010800
 8000b00:	40011000 	.word	0x40011000
 8000b04:	40011400 	.word	0x40011400
 8000b08:	10210000 	.word	0x10210000

08000b0c <delay_us>:
//3,取消ILI93XX的Rxx寄存器定义
//V3.0 20150423
//修改SSD1963 LCD屏的驱动参数.
//////////////////////////////////////////////////////////////////////////////////	 

void delay_us(uint32_t nus) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
	...

08000b20 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <LCD_WR_REG+0x40>)
 8000b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b30:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <LCD_WR_REG+0x40>)
 8000b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b38:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <LCD_WR_REG+0x44>)
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <LCD_WR_REG+0x40>)
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <LCD_WR_REG+0x40>)
 8000b48:	2280      	movs	r2, #128	; 0x80
 8000b4a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <LCD_WR_REG+0x40>)
 8000b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b52:	611a      	str	r2, [r3, #16]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40011000 	.word	0x40011000
 8000b64:	40010c00 	.word	0x40010c00

08000b68 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <LCD_WR_DATAX+0x40>)
 8000b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b78:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <LCD_WR_DATAX+0x40>)
 8000b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b80:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <LCD_WR_DATAX+0x44>)
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <LCD_WR_DATAX+0x40>)
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <LCD_WR_DATAX+0x40>)
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <LCD_WR_DATAX+0x40>)
 8000b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9a:	611a      	str	r2, [r3, #16]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40011000 	.word	0x40011000
 8000bac:	40010c00 	.word	0x40010c00

08000bb0 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <LCD_RD_DATA+0x7c>)
 8000bb8:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000bbc:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <LCD_RD_DATA+0x7c>)
 8000bc0:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000bc4:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <LCD_RD_DATA+0x7c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000bcc:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <LCD_RD_DATA+0x80>)
 8000bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd2:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <LCD_RD_DATA+0x80>)
 8000bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bda:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <LCD_RD_DATA+0x80>)
 8000bde:	2240      	movs	r2, #64	; 0x40
 8000be0:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <LCD_RD_DATA+0x84>)
 8000be4:	889b      	ldrh	r3, [r3, #4]
 8000be6:	f648 1289 	movw	r2, #35209	; 0x8989
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d102      	bne.n	8000bf4 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f006 f896 	bl	8006d20 <HAL_Delay>
	t = DATAIN
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <LCD_RD_DATA+0x7c>)
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <LCD_RD_DATA+0x80>)
 8000bfc:	2240      	movs	r2, #64	; 0x40
 8000bfe:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <LCD_RD_DATA+0x80>)
 8000c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c06:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <LCD_RD_DATA+0x7c>)
 8000c0a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c0e:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <LCD_RD_DATA+0x7c>)
 8000c12:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c16:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <LCD_RD_DATA+0x7c>)
 8000c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c1e:	60da      	str	r2, [r3, #12]
	return t;
 8000c20:	88fb      	ldrh	r3, [r7, #6]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40010c00 	.word	0x40010c00
 8000c30:	40011000 	.word	0x40011000
 8000c34:	20000030 	.word	0x20000030

08000c38 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460a      	mov	r2, r1
 8000c42:	80fb      	strh	r3, [r7, #6]
 8000c44:	4613      	mov	r3, r2
 8000c46:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff68 	bl	8000b20 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <LCD_WriteReg+0x4c>)
 8000c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <LCD_WriteReg+0x4c>)
 8000c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <LCD_WriteReg+0x50>)
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	60d3      	str	r3, [r2, #12]
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <LCD_WriteReg+0x4c>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	615a      	str	r2, [r3, #20]
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <LCD_WriteReg+0x4c>)
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <LCD_WriteReg+0x4c>)
 8000c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c78:	611a      	str	r2, [r3, #16]
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40011000 	.word	0x40011000
 8000c88:	40010c00 	.word	0x40010c00

08000c8c <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff41 	bl	8000b20 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000c9e:	f7ff ff87 	bl	8000bb0 <LCD_RD_DATA>
 8000ca2:	4603      	mov	r3, r0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <LCD_WriteRAM_Prepare+0x14>)
 8000cb2:	891b      	ldrh	r3, [r3, #8]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff33 	bl	8000b20 <LCD_WR_REG>
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000030 	.word	0x20000030

08000cc4 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460a      	mov	r2, r1
 8000cce:	80fb      	strh	r3, [r7, #6]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000cd4:	4b73      	ldr	r3, [pc, #460]	; (8000ea4 <LCD_SetCursor+0x1e0>)
 8000cd6:	889b      	ldrh	r3, [r3, #4]
 8000cd8:	f249 3241 	movw	r2, #37697	; 0x9341
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d005      	beq.n	8000cec <LCD_SetCursor+0x28>
 8000ce0:	4b70      	ldr	r3, [pc, #448]	; (8000ea4 <LCD_SetCursor+0x1e0>)
 8000ce2:	889b      	ldrh	r3, [r3, #4]
 8000ce4:	f245 3210 	movw	r2, #21264	; 0x5310
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d164      	bne.n	8000db6 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000cec:	4b6d      	ldr	r3, [pc, #436]	; (8000ea4 <LCD_SetCursor+0x1e0>)
 8000cee:	895b      	ldrh	r3, [r3, #10]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff15 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000cf6:	4b6c      	ldr	r3, [pc, #432]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000cf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	4b6a      	ldr	r3, [pc, #424]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d04:	615a      	str	r2, [r3, #20]
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b67      	ldr	r3, [pc, #412]	; (8000eac <LCD_SetCursor+0x1e8>)
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	4b65      	ldr	r3, [pc, #404]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	4b64      	ldr	r3, [pc, #400]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	611a      	str	r2, [r3, #16]
 8000d1c:	4b62      	ldr	r3, [pc, #392]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d22:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000d24:	4b60      	ldr	r3, [pc, #384]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2a:	611a      	str	r2, [r3, #16]
 8000d2c:	4b5e      	ldr	r3, [pc, #376]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d32:	615a      	str	r2, [r3, #20]
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	4a5d      	ldr	r2, [pc, #372]	; (8000eac <LCD_SetCursor+0x1e8>)
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	60d3      	str	r3, [r2, #12]
 8000d3c:	4b5a      	ldr	r3, [pc, #360]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	615a      	str	r2, [r3, #20]
 8000d42:	4b59      	ldr	r3, [pc, #356]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d44:	2280      	movs	r2, #128	; 0x80
 8000d46:	611a      	str	r2, [r3, #16]
 8000d48:	4b57      	ldr	r3, [pc, #348]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d4e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000d50:	4b54      	ldr	r3, [pc, #336]	; (8000ea4 <LCD_SetCursor+0x1e0>)
 8000d52:	899b      	ldrh	r3, [r3, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fee3 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000d5a:	4b53      	ldr	r3, [pc, #332]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	4b51      	ldr	r3, [pc, #324]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	88bb      	ldrh	r3, [r7, #4]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b4e      	ldr	r3, [pc, #312]	; (8000eac <LCD_SetCursor+0x1e8>)
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	4b4c      	ldr	r3, [pc, #304]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	615a      	str	r2, [r3, #20]
 8000d7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	4b49      	ldr	r3, [pc, #292]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d86:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000d88:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d8e:	611a      	str	r2, [r3, #16]
 8000d90:	4b45      	ldr	r3, [pc, #276]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d96:	615a      	str	r2, [r3, #20]
 8000d98:	88bb      	ldrh	r3, [r7, #4]
 8000d9a:	4a44      	ldr	r2, [pc, #272]	; (8000eac <LCD_SetCursor+0x1e8>)
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	60d3      	str	r3, [r2, #12]
 8000da0:	4b41      	ldr	r3, [pc, #260]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000da2:	2280      	movs	r2, #128	; 0x80
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	4b40      	ldr	r3, [pc, #256]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	4b3e      	ldr	r3, [pc, #248]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db2:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000db4:	e248      	b.n	8001248 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000db6:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <LCD_SetCursor+0x1e0>)
 8000db8:	889b      	ldrh	r3, [r3, #4]
 8000dba:	f646 0204 	movw	r2, #26628	; 0x6804
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d176      	bne.n	8000eb0 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <LCD_SetCursor+0x1e0>)
 8000dc4:	799b      	ldrb	r3, [r3, #6]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d106      	bne.n	8000dd8 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <LCD_SetCursor+0x1e0>)
 8000dcc:	881a      	ldrh	r2, [r3, #0]
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <LCD_SetCursor+0x1e0>)
 8000dda:	895b      	ldrh	r3, [r3, #10]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fe9f 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000de2:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de8:	611a      	str	r2, [r3, #16]
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <LCD_SetCursor+0x1e8>)
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000e10:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e1e:	615a      	str	r2, [r3, #20]
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	4a22      	ldr	r2, [pc, #136]	; (8000eac <LCD_SetCursor+0x1e8>)
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	60d3      	str	r3, [r2, #12]
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	615a      	str	r2, [r3, #20]
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	611a      	str	r2, [r3, #16]
 8000e34:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <LCD_SetCursor+0x1e0>)
 8000e3e:	899b      	ldrh	r3, [r3, #12]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fe6d 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4c:	611a      	str	r2, [r3, #16]
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e54:	615a      	str	r2, [r3, #20]
 8000e56:	88bb      	ldrh	r3, [r7, #4]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <LCD_SetCursor+0x1e8>)
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	615a      	str	r2, [r3, #20]
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	611a      	str	r2, [r3, #16]
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e72:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	88bb      	ldrh	r3, [r7, #4]
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <LCD_SetCursor+0x1e8>)
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	60d3      	str	r3, [r2, #12]
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	615a      	str	r2, [r3, #20]
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	611a      	str	r2, [r3, #16]
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <LCD_SetCursor+0x1e4>)
 8000e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9e:	611a      	str	r2, [r3, #16]
}
 8000ea0:	e1d2      	b.n	8001248 <LCD_SetCursor+0x584>
 8000ea2:	bf00      	nop
 8000ea4:	20000030 	.word	0x20000030
 8000ea8:	40011000 	.word	0x40011000
 8000eac:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000eb0:	4b99      	ldr	r3, [pc, #612]	; (8001118 <LCD_SetCursor+0x454>)
 8000eb2:	889b      	ldrh	r3, [r3, #4]
 8000eb4:	f641 1263 	movw	r2, #6499	; 0x1963
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	f040 8133 	bne.w	8001124 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000ebe:	4b96      	ldr	r3, [pc, #600]	; (8001118 <LCD_SetCursor+0x454>)
 8000ec0:	799b      	ldrb	r3, [r3, #6]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d163      	bne.n	8000f8e <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000ec6:	4b94      	ldr	r3, [pc, #592]	; (8001118 <LCD_SetCursor+0x454>)
 8000ec8:	881a      	ldrh	r2, [r3, #0]
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000ed4:	4b90      	ldr	r3, [pc, #576]	; (8001118 <LCD_SetCursor+0x454>)
 8000ed6:	895b      	ldrh	r3, [r3, #10]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fe21 	bl	8000b20 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000ede:	4b8f      	ldr	r3, [pc, #572]	; (800111c <LCD_SetCursor+0x458>)
 8000ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee4:	611a      	str	r2, [r3, #16]
 8000ee6:	4b8d      	ldr	r3, [pc, #564]	; (800111c <LCD_SetCursor+0x458>)
 8000ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eec:	615a      	str	r2, [r3, #20]
 8000eee:	4b8c      	ldr	r3, [pc, #560]	; (8001120 <LCD_SetCursor+0x45c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	4b89      	ldr	r3, [pc, #548]	; (800111c <LCD_SetCursor+0x458>)
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	615a      	str	r2, [r3, #20]
 8000efa:	4b88      	ldr	r3, [pc, #544]	; (800111c <LCD_SetCursor+0x458>)
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	4b86      	ldr	r3, [pc, #536]	; (800111c <LCD_SetCursor+0x458>)
 8000f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f06:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000f08:	4b84      	ldr	r3, [pc, #528]	; (800111c <LCD_SetCursor+0x458>)
 8000f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	4b82      	ldr	r3, [pc, #520]	; (800111c <LCD_SetCursor+0x458>)
 8000f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f16:	615a      	str	r2, [r3, #20]
 8000f18:	4b81      	ldr	r3, [pc, #516]	; (8001120 <LCD_SetCursor+0x45c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	4b7f      	ldr	r3, [pc, #508]	; (800111c <LCD_SetCursor+0x458>)
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	4b7d      	ldr	r3, [pc, #500]	; (800111c <LCD_SetCursor+0x458>)
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	611a      	str	r2, [r3, #16]
 8000f2a:	4b7c      	ldr	r3, [pc, #496]	; (800111c <LCD_SetCursor+0x458>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000f32:	4b7a      	ldr	r3, [pc, #488]	; (800111c <LCD_SetCursor+0x458>)
 8000f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	4b78      	ldr	r3, [pc, #480]	; (800111c <LCD_SetCursor+0x458>)
 8000f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f40:	615a      	str	r2, [r3, #20]
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b75      	ldr	r3, [pc, #468]	; (8001120 <LCD_SetCursor+0x45c>)
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	4b73      	ldr	r3, [pc, #460]	; (800111c <LCD_SetCursor+0x458>)
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	615a      	str	r2, [r3, #20]
 8000f52:	4b72      	ldr	r3, [pc, #456]	; (800111c <LCD_SetCursor+0x458>)
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	4b70      	ldr	r3, [pc, #448]	; (800111c <LCD_SetCursor+0x458>)
 8000f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000f60:	4b6e      	ldr	r3, [pc, #440]	; (800111c <LCD_SetCursor+0x458>)
 8000f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	4b6c      	ldr	r3, [pc, #432]	; (800111c <LCD_SetCursor+0x458>)
 8000f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	4a6b      	ldr	r2, [pc, #428]	; (8001120 <LCD_SetCursor+0x45c>)
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	60d3      	str	r3, [r2, #12]
 8000f78:	4b68      	ldr	r3, [pc, #416]	; (800111c <LCD_SetCursor+0x458>)
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	615a      	str	r2, [r3, #20]
 8000f7e:	4b67      	ldr	r3, [pc, #412]	; (800111c <LCD_SetCursor+0x458>)
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	611a      	str	r2, [r3, #16]
 8000f84:	4b65      	ldr	r3, [pc, #404]	; (800111c <LCD_SetCursor+0x458>)
 8000f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	e061      	b.n	8001052 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000f8e:	4b62      	ldr	r3, [pc, #392]	; (8001118 <LCD_SetCursor+0x454>)
 8000f90:	895b      	ldrh	r3, [r3, #10]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fdc4 	bl	8000b20 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000f98:	4b60      	ldr	r3, [pc, #384]	; (800111c <LCD_SetCursor+0x458>)
 8000f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f9e:	611a      	str	r2, [r3, #16]
 8000fa0:	4b5e      	ldr	r3, [pc, #376]	; (800111c <LCD_SetCursor+0x458>)
 8000fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	0a1b      	lsrs	r3, r3, #8
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b5c      	ldr	r3, [pc, #368]	; (8001120 <LCD_SetCursor+0x45c>)
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	4b5a      	ldr	r3, [pc, #360]	; (800111c <LCD_SetCursor+0x458>)
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	615a      	str	r2, [r3, #20]
 8000fb8:	4b58      	ldr	r3, [pc, #352]	; (800111c <LCD_SetCursor+0x458>)
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	611a      	str	r2, [r3, #16]
 8000fbe:	4b57      	ldr	r3, [pc, #348]	; (800111c <LCD_SetCursor+0x458>)
 8000fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000fc6:	4b55      	ldr	r3, [pc, #340]	; (800111c <LCD_SetCursor+0x458>)
 8000fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fcc:	611a      	str	r2, [r3, #16]
 8000fce:	4b53      	ldr	r3, [pc, #332]	; (800111c <LCD_SetCursor+0x458>)
 8000fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd4:	615a      	str	r2, [r3, #20]
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	4a51      	ldr	r2, [pc, #324]	; (8001120 <LCD_SetCursor+0x45c>)
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	60d3      	str	r3, [r2, #12]
 8000fde:	4b4f      	ldr	r3, [pc, #316]	; (800111c <LCD_SetCursor+0x458>)
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	615a      	str	r2, [r3, #20]
 8000fe4:	4b4d      	ldr	r3, [pc, #308]	; (800111c <LCD_SetCursor+0x458>)
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	611a      	str	r2, [r3, #16]
 8000fea:	4b4c      	ldr	r3, [pc, #304]	; (800111c <LCD_SetCursor+0x458>)
 8000fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000ff2:	4b4a      	ldr	r3, [pc, #296]	; (800111c <LCD_SetCursor+0x458>)
 8000ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff8:	611a      	str	r2, [r3, #16]
 8000ffa:	4b48      	ldr	r3, [pc, #288]	; (800111c <LCD_SetCursor+0x458>)
 8000ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001000:	615a      	str	r2, [r3, #20]
 8001002:	4b45      	ldr	r3, [pc, #276]	; (8001118 <LCD_SetCursor+0x454>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	3b01      	subs	r3, #1
 8001008:	121a      	asrs	r2, r3, #8
 800100a:	4b45      	ldr	r3, [pc, #276]	; (8001120 <LCD_SetCursor+0x45c>)
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	4b43      	ldr	r3, [pc, #268]	; (800111c <LCD_SetCursor+0x458>)
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	615a      	str	r2, [r3, #20]
 8001014:	4b41      	ldr	r3, [pc, #260]	; (800111c <LCD_SetCursor+0x458>)
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	611a      	str	r2, [r3, #16]
 800101a:	4b40      	ldr	r3, [pc, #256]	; (800111c <LCD_SetCursor+0x458>)
 800101c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001020:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001022:	4b3e      	ldr	r3, [pc, #248]	; (800111c <LCD_SetCursor+0x458>)
 8001024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001028:	611a      	str	r2, [r3, #16]
 800102a:	4b3c      	ldr	r3, [pc, #240]	; (800111c <LCD_SetCursor+0x458>)
 800102c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001030:	615a      	str	r2, [r3, #20]
 8001032:	4b39      	ldr	r3, [pc, #228]	; (8001118 <LCD_SetCursor+0x454>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	3b01      	subs	r3, #1
 8001038:	4a39      	ldr	r2, [pc, #228]	; (8001120 <LCD_SetCursor+0x45c>)
 800103a:	b2db      	uxtb	r3, r3
 800103c:	60d3      	str	r3, [r2, #12]
 800103e:	4b37      	ldr	r3, [pc, #220]	; (800111c <LCD_SetCursor+0x458>)
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	4b35      	ldr	r3, [pc, #212]	; (800111c <LCD_SetCursor+0x458>)
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	4b34      	ldr	r3, [pc, #208]	; (800111c <LCD_SetCursor+0x458>)
 800104c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001050:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <LCD_SetCursor+0x454>)
 8001054:	899b      	ldrh	r3, [r3, #12]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fd62 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <LCD_SetCursor+0x458>)
 800105e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <LCD_SetCursor+0x458>)
 8001066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800106a:	615a      	str	r2, [r3, #20]
 800106c:	88bb      	ldrh	r3, [r7, #4]
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <LCD_SetCursor+0x45c>)
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	4b29      	ldr	r3, [pc, #164]	; (800111c <LCD_SetCursor+0x458>)
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	615a      	str	r2, [r3, #20]
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <LCD_SetCursor+0x458>)
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	611a      	str	r2, [r3, #16]
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <LCD_SetCursor+0x458>)
 8001084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001088:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <LCD_SetCursor+0x458>)
 800108c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001090:	611a      	str	r2, [r3, #16]
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <LCD_SetCursor+0x458>)
 8001094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	88bb      	ldrh	r3, [r7, #4]
 800109c:	4a20      	ldr	r2, [pc, #128]	; (8001120 <LCD_SetCursor+0x45c>)
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	60d3      	str	r3, [r2, #12]
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <LCD_SetCursor+0x458>)
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <LCD_SetCursor+0x458>)
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <LCD_SetCursor+0x458>)
 80010b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <LCD_SetCursor+0x458>)
 80010b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010bc:	611a      	str	r2, [r3, #16]
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <LCD_SetCursor+0x458>)
 80010c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c4:	615a      	str	r2, [r3, #20]
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <LCD_SetCursor+0x454>)
 80010c8:	885b      	ldrh	r3, [r3, #2]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	121a      	asrs	r2, r3, #8
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <LCD_SetCursor+0x45c>)
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <LCD_SetCursor+0x458>)
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <LCD_SetCursor+0x458>)
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <LCD_SetCursor+0x458>)
 80010e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <LCD_SetCursor+0x458>)
 80010e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ec:	611a      	str	r2, [r3, #16]
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <LCD_SetCursor+0x458>)
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <LCD_SetCursor+0x454>)
 80010f8:	885b      	ldrh	r3, [r3, #2]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	4a08      	ldr	r2, [pc, #32]	; (8001120 <LCD_SetCursor+0x45c>)
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	60d3      	str	r3, [r2, #12]
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <LCD_SetCursor+0x458>)
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	615a      	str	r2, [r3, #20]
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <LCD_SetCursor+0x458>)
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	611a      	str	r2, [r3, #16]
 800110e:	4b03      	ldr	r3, [pc, #12]	; (800111c <LCD_SetCursor+0x458>)
 8001110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001114:	611a      	str	r2, [r3, #16]
}
 8001116:	e097      	b.n	8001248 <LCD_SetCursor+0x584>
 8001118:	20000030 	.word	0x20000030
 800111c:	40011000 	.word	0x40011000
 8001120:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8001124:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <LCD_SetCursor+0x58c>)
 8001126:	889b      	ldrh	r3, [r3, #4]
 8001128:	f245 5210 	movw	r2, #21776	; 0x5510
 800112c:	4293      	cmp	r3, r2
 800112e:	d172      	bne.n	8001216 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8001130:	4b47      	ldr	r3, [pc, #284]	; (8001250 <LCD_SetCursor+0x58c>)
 8001132:	895b      	ldrh	r3, [r3, #10]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fcf3 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800113a:	4b46      	ldr	r3, [pc, #280]	; (8001254 <LCD_SetCursor+0x590>)
 800113c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001140:	611a      	str	r2, [r3, #16]
 8001142:	4b44      	ldr	r3, [pc, #272]	; (8001254 <LCD_SetCursor+0x590>)
 8001144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001148:	615a      	str	r2, [r3, #20]
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b41      	ldr	r3, [pc, #260]	; (8001258 <LCD_SetCursor+0x594>)
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <LCD_SetCursor+0x590>)
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	4b3e      	ldr	r3, [pc, #248]	; (8001254 <LCD_SetCursor+0x590>)
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <LCD_SetCursor+0x590>)
 8001162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001166:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001168:	4b39      	ldr	r3, [pc, #228]	; (8001250 <LCD_SetCursor+0x58c>)
 800116a:	895b      	ldrh	r3, [r3, #10]
 800116c:	3301      	adds	r3, #1
 800116e:	b29b      	uxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fcd5 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8001176:	4b37      	ldr	r3, [pc, #220]	; (8001254 <LCD_SetCursor+0x590>)
 8001178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800117c:	611a      	str	r2, [r3, #16]
 800117e:	4b35      	ldr	r3, [pc, #212]	; (8001254 <LCD_SetCursor+0x590>)
 8001180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001184:	615a      	str	r2, [r3, #20]
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	4a33      	ldr	r2, [pc, #204]	; (8001258 <LCD_SetCursor+0x594>)
 800118a:	b2db      	uxtb	r3, r3
 800118c:	60d3      	str	r3, [r2, #12]
 800118e:	4b31      	ldr	r3, [pc, #196]	; (8001254 <LCD_SetCursor+0x590>)
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	615a      	str	r2, [r3, #20]
 8001194:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <LCD_SetCursor+0x590>)
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	611a      	str	r2, [r3, #16]
 800119a:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <LCD_SetCursor+0x590>)
 800119c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <LCD_SetCursor+0x58c>)
 80011a4:	899b      	ldrh	r3, [r3, #12]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fcba 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <LCD_SetCursor+0x590>)
 80011ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b2:	611a      	str	r2, [r3, #16]
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <LCD_SetCursor+0x590>)
 80011b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	88bb      	ldrh	r3, [r7, #4]
 80011be:	0a1b      	lsrs	r3, r3, #8
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <LCD_SetCursor+0x594>)
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <LCD_SetCursor+0x590>)
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <LCD_SetCursor+0x590>)
 80011ce:	2280      	movs	r2, #128	; 0x80
 80011d0:	611a      	str	r2, [r3, #16]
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <LCD_SetCursor+0x590>)
 80011d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <LCD_SetCursor+0x58c>)
 80011dc:	899b      	ldrh	r3, [r3, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fc9c 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <LCD_SetCursor+0x590>)
 80011ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ee:	611a      	str	r2, [r3, #16]
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <LCD_SetCursor+0x590>)
 80011f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	88bb      	ldrh	r3, [r7, #4]
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <LCD_SetCursor+0x594>)
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	60d3      	str	r3, [r2, #12]
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <LCD_SetCursor+0x590>)
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <LCD_SetCursor+0x590>)
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	611a      	str	r2, [r3, #16]
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <LCD_SetCursor+0x590>)
 800120e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001212:	611a      	str	r2, [r3, #16]
}
 8001214:	e018      	b.n	8001248 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <LCD_SetCursor+0x58c>)
 8001218:	799b      	ldrb	r3, [r3, #6]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d106      	bne.n	800122c <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <LCD_SetCursor+0x58c>)
 8001220:	881a      	ldrh	r2, [r3, #0]
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	b29b      	uxth	r3, r3
 8001228:	3b01      	subs	r3, #1
 800122a:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <LCD_SetCursor+0x58c>)
 800122e:	895b      	ldrh	r3, [r3, #10]
 8001230:	88fa      	ldrh	r2, [r7, #6]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fcff 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <LCD_SetCursor+0x58c>)
 800123c:	899b      	ldrh	r3, [r3, #12]
 800123e:	88ba      	ldrh	r2, [r7, #4]
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fcf8 	bl	8000c38 <LCD_WriteReg>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000030 	.word	0x20000030
 8001254:	40011000 	.word	0x40011000
 8001258:	40010c00 	.word	0x40010c00

0800125c <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 800126e:	4b78      	ldr	r3, [pc, #480]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 8001270:	799b      	ldrb	r3, [r3, #6]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d10b      	bne.n	800128e <LCD_Scan_Dir+0x32>
 8001276:	4b76      	ldr	r3, [pc, #472]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 8001278:	889b      	ldrh	r3, [r3, #4]
 800127a:	f646 0204 	movw	r2, #26628	; 0x6804
 800127e:	4293      	cmp	r3, r2
 8001280:	d005      	beq.n	800128e <LCD_Scan_Dir+0x32>
 8001282:	4b73      	ldr	r3, [pc, #460]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 8001284:	889b      	ldrh	r3, [r3, #4]
 8001286:	f641 1263 	movw	r2, #6499	; 0x1963
 800128a:	4293      	cmp	r3, r2
 800128c:	d109      	bne.n	80012a2 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 800128e:	4b70      	ldr	r3, [pc, #448]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 8001290:	799b      	ldrb	r3, [r3, #6]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d134      	bne.n	8001300 <LCD_Scan_Dir+0xa4>
 8001296:	4b6e      	ldr	r3, [pc, #440]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 8001298:	889b      	ldrh	r3, [r3, #4]
 800129a:	f641 1263 	movw	r2, #6499	; 0x1963
 800129e:	4293      	cmp	r3, r2
 80012a0:	d12e      	bne.n	8001300 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b07      	cmp	r3, #7
 80012a6:	d82b      	bhi.n	8001300 <LCD_Scan_Dir+0xa4>
 80012a8:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <LCD_Scan_Dir+0x54>)
 80012aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ae:	bf00      	nop
 80012b0:	080012d1 	.word	0x080012d1
 80012b4:	080012d7 	.word	0x080012d7
 80012b8:	080012dd 	.word	0x080012dd
 80012bc:	080012e3 	.word	0x080012e3
 80012c0:	080012e9 	.word	0x080012e9
 80012c4:	080012ef 	.word	0x080012ef
 80012c8:	080012f5 	.word	0x080012f5
 80012cc:	080012fb 	.word	0x080012fb
		{
		case 0:
			dir = 6;
 80012d0:	2306      	movs	r3, #6
 80012d2:	71fb      	strb	r3, [r7, #7]
			break;
 80012d4:	e014      	b.n	8001300 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 80012d6:	2307      	movs	r3, #7
 80012d8:	71fb      	strb	r3, [r7, #7]
			break;
 80012da:	e011      	b.n	8001300 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 80012dc:	2304      	movs	r3, #4
 80012de:	71fb      	strb	r3, [r7, #7]
			break;
 80012e0:	e00e      	b.n	8001300 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 80012e2:	2305      	movs	r3, #5
 80012e4:	71fb      	strb	r3, [r7, #7]
			break;
 80012e6:	e00b      	b.n	8001300 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	71fb      	strb	r3, [r7, #7]
			break;
 80012ec:	e008      	b.n	8001300 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	71fb      	strb	r3, [r7, #7]
			break;
 80012f2:	e005      	b.n	8001300 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 80012f4:	2303      	movs	r3, #3
 80012f6:	71fb      	strb	r3, [r7, #7]
			break;
 80012f8:	e002      	b.n	8001300 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	71fb      	strb	r3, [r7, #7]
			break;
 80012fe:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8001300:	4b53      	ldr	r3, [pc, #332]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 8001302:	889b      	ldrh	r3, [r3, #4]
 8001304:	f249 3241 	movw	r2, #37697	; 0x9341
 8001308:	4293      	cmp	r3, r2
 800130a:	d018      	beq.n	800133e <LCD_Scan_Dir+0xe2>
 800130c:	4b50      	ldr	r3, [pc, #320]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 800130e:	889b      	ldrh	r3, [r3, #4]
 8001310:	f646 0204 	movw	r2, #26628	; 0x6804
 8001314:	4293      	cmp	r3, r2
 8001316:	d012      	beq.n	800133e <LCD_Scan_Dir+0xe2>
 8001318:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 800131a:	889b      	ldrh	r3, [r3, #4]
 800131c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001320:	4293      	cmp	r3, r2
 8001322:	d00c      	beq.n	800133e <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001324:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 8001326:	889b      	ldrh	r3, [r3, #4]
 8001328:	f245 5210 	movw	r2, #21776	; 0x5510
 800132c:	4293      	cmp	r3, r2
 800132e:	d006      	beq.n	800133e <LCD_Scan_Dir+0xe2>
 8001330:	4b47      	ldr	r3, [pc, #284]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 8001332:	889b      	ldrh	r3, [r3, #4]
 8001334:	f641 1263 	movw	r2, #6499	; 0x1963
 8001338:	4293      	cmp	r3, r2
 800133a:	f040 8250 	bne.w	80017de <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b07      	cmp	r3, #7
 8001342:	d836      	bhi.n	80013b2 <LCD_Scan_Dir+0x156>
 8001344:	a201      	add	r2, pc, #4	; (adr r2, 800134c <LCD_Scan_Dir+0xf0>)
 8001346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134a:	bf00      	nop
 800134c:	080013b3 	.word	0x080013b3
 8001350:	0800136d 	.word	0x0800136d
 8001354:	08001377 	.word	0x08001377
 8001358:	08001381 	.word	0x08001381
 800135c:	0800138b 	.word	0x0800138b
 8001360:	08001395 	.word	0x08001395
 8001364:	0800139f 	.word	0x0800139f
 8001368:	080013a9 	.word	0x080013a9
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 800136c:	89fb      	ldrh	r3, [r7, #14]
 800136e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001372:	81fb      	strh	r3, [r7, #14]
			break;
 8001374:	e01d      	b.n	80013b2 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8001376:	89fb      	ldrh	r3, [r7, #14]
 8001378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137c:	81fb      	strh	r3, [r7, #14]
			break;
 800137e:	e018      	b.n	80013b2 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001380:	89fb      	ldrh	r3, [r7, #14]
 8001382:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001386:	81fb      	strh	r3, [r7, #14]
			break;
 8001388:	e013      	b.n	80013b2 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	f043 0320 	orr.w	r3, r3, #32
 8001390:	81fb      	strh	r3, [r7, #14]
			break;
 8001392:	e00e      	b.n	80013b2 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800139a:	81fb      	strh	r3, [r7, #14]
			break;
 800139c:	e009      	b.n	80013b2 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80013a4:	81fb      	strh	r3, [r7, #14]
			break;
 80013a6:	e004      	b.n	80013b2 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80013a8:	89fb      	ldrh	r3, [r7, #14]
 80013aa:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80013ae:	81fb      	strh	r3, [r7, #14]
			break;
 80013b0:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 80013b4:	889b      	ldrh	r3, [r3, #4]
 80013b6:	f245 5210 	movw	r2, #21776	; 0x5510
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d103      	bne.n	80013c6 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80013be:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80013c2:	81bb      	strh	r3, [r7, #12]
 80013c4:	e001      	b.n	80013ca <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80013c6:	2336      	movs	r3, #54	; 0x36
 80013c8:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	f245 3210 	movw	r2, #21264	; 0x5310
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00f      	beq.n	80013f6 <LCD_Scan_Dir+0x19a>
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 80013d8:	889b      	ldrh	r3, [r3, #4]
 80013da:	f245 5210 	movw	r2, #21776	; 0x5510
 80013de:	4293      	cmp	r3, r2
 80013e0:	d009      	beq.n	80013f6 <LCD_Scan_Dir+0x19a>
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 80013e4:	889b      	ldrh	r3, [r3, #4]
 80013e6:	f641 1263 	movw	r2, #6499	; 0x1963
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d003      	beq.n	80013f6 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 80013f8:	889b      	ldrh	r3, [r3, #4]
 80013fa:	f646 0204 	movw	r2, #26628	; 0x6804
 80013fe:	4293      	cmp	r3, r2
 8001400:	d103      	bne.n	800140a <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800140a:	89fa      	ldrh	r2, [r7, #14]
 800140c:	89bb      	ldrh	r3, [r7, #12]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fc11 	bl	8000c38 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 8001418:	889b      	ldrh	r3, [r3, #4]
 800141a:	f641 1263 	movw	r2, #6499	; 0x1963
 800141e:	4293      	cmp	r3, r2
 8001420:	d028      	beq.n	8001474 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	f003 0320 	and.w	r3, r3, #32
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 800142e:	881a      	ldrh	r2, [r3, #0]
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 8001432:	885b      	ldrh	r3, [r3, #2]
 8001434:	429a      	cmp	r2, r3
 8001436:	d21d      	bcs.n	8001474 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 8001440:	885a      	ldrh	r2, [r3, #2]
 8001442:	4b03      	ldr	r3, [pc, #12]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 8001444:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001446:	4a02      	ldr	r2, [pc, #8]	; (8001450 <LCD_Scan_Dir+0x1f4>)
 8001448:	897b      	ldrh	r3, [r7, #10]
 800144a:	8053      	strh	r3, [r2, #2]
 800144c:	e012      	b.n	8001474 <LCD_Scan_Dir+0x218>
 800144e:	bf00      	nop
 8001450:	20000030 	.word	0x20000030
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001454:	4b7f      	ldr	r3, [pc, #508]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 8001456:	881a      	ldrh	r2, [r3, #0]
 8001458:	4b7e      	ldr	r3, [pc, #504]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 800145a:	885b      	ldrh	r3, [r3, #2]
 800145c:	429a      	cmp	r2, r3
 800145e:	d909      	bls.n	8001474 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001460:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001466:	4b7b      	ldr	r3, [pc, #492]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 8001468:	885a      	ldrh	r2, [r3, #2]
 800146a:	4b7a      	ldr	r3, [pc, #488]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 800146c:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800146e:	4a79      	ldr	r2, [pc, #484]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 8001470:	897b      	ldrh	r3, [r7, #10]
 8001472:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001474:	4b77      	ldr	r3, [pc, #476]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 8001476:	889b      	ldrh	r3, [r3, #4]
 8001478:	f245 5210 	movw	r2, #21776	; 0x5510
 800147c:	4293      	cmp	r3, r2
 800147e:	f040 80ef 	bne.w	8001660 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001482:	4b74      	ldr	r3, [pc, #464]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 8001484:	895b      	ldrh	r3, [r3, #10]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fb4a 	bl	8000b20 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800148c:	4b72      	ldr	r3, [pc, #456]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 800148e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	4b70      	ldr	r3, [pc, #448]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	4b6f      	ldr	r3, [pc, #444]	; (800165c <LCD_Scan_Dir+0x400>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	4b6b      	ldr	r3, [pc, #428]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80014aa:	2280      	movs	r2, #128	; 0x80
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80014b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80014b6:	4b67      	ldr	r3, [pc, #412]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 80014b8:	895b      	ldrh	r3, [r3, #10]
 80014ba:	3301      	adds	r3, #1
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fb2e 	bl	8000b20 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014c4:	4b64      	ldr	r3, [pc, #400]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80014c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	4b62      	ldr	r3, [pc, #392]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80014ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d2:	615a      	str	r2, [r3, #20]
 80014d4:	4b61      	ldr	r3, [pc, #388]	; (800165c <LCD_Scan_Dir+0x400>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80014e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ec:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 80014ee:	4b59      	ldr	r3, [pc, #356]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 80014f0:	895b      	ldrh	r3, [r3, #10]
 80014f2:	3302      	adds	r3, #2
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fb12 	bl	8000b20 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80014fc:	4b56      	ldr	r3, [pc, #344]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80014fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	4b54      	ldr	r3, [pc, #336]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150a:	615a      	str	r2, [r3, #20]
 800150c:	4b51      	ldr	r3, [pc, #324]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	3b01      	subs	r3, #1
 8001512:	121a      	asrs	r2, r3, #8
 8001514:	4b51      	ldr	r3, [pc, #324]	; (800165c <LCD_Scan_Dir+0x400>)
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	4b4f      	ldr	r3, [pc, #316]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 800151a:	2280      	movs	r2, #128	; 0x80
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	4b4e      	ldr	r3, [pc, #312]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152a:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 800152c:	4b49      	ldr	r3, [pc, #292]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 800152e:	895b      	ldrh	r3, [r3, #10]
 8001530:	3303      	adds	r3, #3
 8001532:	b29b      	uxth	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff faf3 	bl	8000b20 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800153a:	4b47      	ldr	r3, [pc, #284]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 800153c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	4b45      	ldr	r3, [pc, #276]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	4b42      	ldr	r3, [pc, #264]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	3b01      	subs	r3, #1
 8001550:	4a42      	ldr	r2, [pc, #264]	; (800165c <LCD_Scan_Dir+0x400>)
 8001552:	b2db      	uxtb	r3, r3
 8001554:	60d3      	str	r3, [r2, #12]
 8001556:	4b40      	ldr	r3, [pc, #256]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	615a      	str	r2, [r3, #20]
 800155c:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001568:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800156a:	4b3a      	ldr	r3, [pc, #232]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 800156c:	899b      	ldrh	r3, [r3, #12]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fad6 	bl	8000b20 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001574:	4b38      	ldr	r3, [pc, #224]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800157a:	611a      	str	r2, [r3, #16]
 800157c:	4b36      	ldr	r3, [pc, #216]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 800157e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001582:	615a      	str	r2, [r3, #20]
 8001584:	4b35      	ldr	r3, [pc, #212]	; (800165c <LCD_Scan_Dir+0x400>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	4b33      	ldr	r3, [pc, #204]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	4b31      	ldr	r3, [pc, #196]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	611a      	str	r2, [r3, #16]
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 80015a0:	899b      	ldrh	r3, [r3, #12]
 80015a2:	3301      	adds	r3, #1
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff faba 	bl	8000b20 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80015ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80015b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <LCD_Scan_Dir+0x400>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	4b25      	ldr	r3, [pc, #148]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	615a      	str	r2, [r3, #20]
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	611a      	str	r2, [r3, #16]
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80015d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 80015d8:	899b      	ldrh	r3, [r3, #12]
 80015da:	3302      	adds	r3, #2
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fa9e 	bl	8000b20 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80015e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 80015ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 80015f6:	885b      	ldrh	r3, [r3, #2]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	121a      	asrs	r2, r3, #8
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <LCD_Scan_Dir+0x400>)
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	615a      	str	r2, [r3, #20]
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 800160e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001612:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 8001616:	899b      	ldrh	r3, [r3, #12]
 8001618:	3303      	adds	r3, #3
 800161a:	b29b      	uxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fa7f 	bl	8000b20 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001628:	611a      	str	r2, [r3, #16]
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 800162c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <LCD_Scan_Dir+0x3f8>)
 8001634:	885b      	ldrh	r3, [r3, #2]
 8001636:	3b01      	subs	r3, #1
 8001638:	4a08      	ldr	r2, [pc, #32]	; (800165c <LCD_Scan_Dir+0x400>)
 800163a:	b2db      	uxtb	r3, r3
 800163c:	60d3      	str	r3, [r2, #12]
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	615a      	str	r2, [r3, #20]
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	4b03      	ldr	r3, [pc, #12]	; (8001658 <LCD_Scan_Dir+0x3fc>)
 800164c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001650:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001652:	e10b      	b.n	800186c <LCD_Scan_Dir+0x610>
 8001654:	20000030 	.word	0x20000030
 8001658:	40011000 	.word	0x40011000
 800165c:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001660:	4b84      	ldr	r3, [pc, #528]	; (8001874 <LCD_Scan_Dir+0x618>)
 8001662:	895b      	ldrh	r3, [r3, #10]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fa5b 	bl	8000b20 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800166a:	4b83      	ldr	r3, [pc, #524]	; (8001878 <LCD_Scan_Dir+0x61c>)
 800166c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001670:	611a      	str	r2, [r3, #16]
 8001672:	4b81      	ldr	r3, [pc, #516]	; (8001878 <LCD_Scan_Dir+0x61c>)
 8001674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001678:	615a      	str	r2, [r3, #20]
 800167a:	4b80      	ldr	r3, [pc, #512]	; (800187c <LCD_Scan_Dir+0x620>)
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	4b7d      	ldr	r3, [pc, #500]	; (8001878 <LCD_Scan_Dir+0x61c>)
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	4b7c      	ldr	r3, [pc, #496]	; (8001878 <LCD_Scan_Dir+0x61c>)
 8001688:	2280      	movs	r2, #128	; 0x80
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	4b7a      	ldr	r3, [pc, #488]	; (8001878 <LCD_Scan_Dir+0x61c>)
 800168e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001692:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001694:	4b78      	ldr	r3, [pc, #480]	; (8001878 <LCD_Scan_Dir+0x61c>)
 8001696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	4b76      	ldr	r3, [pc, #472]	; (8001878 <LCD_Scan_Dir+0x61c>)
 800169e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a2:	615a      	str	r2, [r3, #20]
 80016a4:	4b75      	ldr	r3, [pc, #468]	; (800187c <LCD_Scan_Dir+0x620>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	4b73      	ldr	r3, [pc, #460]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	4b71      	ldr	r3, [pc, #452]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	4b70      	ldr	r3, [pc, #448]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80016b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016bc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80016be:	4b6e      	ldr	r3, [pc, #440]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80016c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c4:	611a      	str	r2, [r3, #16]
 80016c6:	4b6c      	ldr	r3, [pc, #432]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80016c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	4b69      	ldr	r3, [pc, #420]	; (8001874 <LCD_Scan_Dir+0x618>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	121a      	asrs	r2, r3, #8
 80016d6:	4b69      	ldr	r3, [pc, #420]	; (800187c <LCD_Scan_Dir+0x620>)
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	4b67      	ldr	r3, [pc, #412]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	4b65      	ldr	r3, [pc, #404]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80016e2:	2280      	movs	r2, #128	; 0x80
 80016e4:	611a      	str	r2, [r3, #16]
 80016e6:	4b64      	ldr	r3, [pc, #400]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80016e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ec:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80016ee:	4b62      	ldr	r3, [pc, #392]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80016f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f4:	611a      	str	r2, [r3, #16]
 80016f6:	4b60      	ldr	r3, [pc, #384]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80016f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fc:	615a      	str	r2, [r3, #20]
 80016fe:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <LCD_Scan_Dir+0x618>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	3b01      	subs	r3, #1
 8001704:	4a5d      	ldr	r2, [pc, #372]	; (800187c <LCD_Scan_Dir+0x620>)
 8001706:	b2db      	uxtb	r3, r3
 8001708:	60d3      	str	r3, [r2, #12]
 800170a:	4b5b      	ldr	r3, [pc, #364]	; (8001878 <LCD_Scan_Dir+0x61c>)
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	615a      	str	r2, [r3, #20]
 8001710:	4b59      	ldr	r3, [pc, #356]	; (8001878 <LCD_Scan_Dir+0x61c>)
 8001712:	2280      	movs	r2, #128	; 0x80
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	4b58      	ldr	r3, [pc, #352]	; (8001878 <LCD_Scan_Dir+0x61c>)
 8001718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800171c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800171e:	4b55      	ldr	r3, [pc, #340]	; (8001874 <LCD_Scan_Dir+0x618>)
 8001720:	899b      	ldrh	r3, [r3, #12]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff f9fc 	bl	8000b20 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001728:	4b53      	ldr	r3, [pc, #332]	; (8001878 <LCD_Scan_Dir+0x61c>)
 800172a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172e:	611a      	str	r2, [r3, #16]
 8001730:	4b51      	ldr	r3, [pc, #324]	; (8001878 <LCD_Scan_Dir+0x61c>)
 8001732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001736:	615a      	str	r2, [r3, #20]
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <LCD_Scan_Dir+0x620>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	4b4e      	ldr	r3, [pc, #312]	; (8001878 <LCD_Scan_Dir+0x61c>)
 8001740:	2280      	movs	r2, #128	; 0x80
 8001742:	615a      	str	r2, [r3, #20]
 8001744:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <LCD_Scan_Dir+0x61c>)
 8001746:	2280      	movs	r2, #128	; 0x80
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <LCD_Scan_Dir+0x61c>)
 800174c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001750:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001752:	4b49      	ldr	r3, [pc, #292]	; (8001878 <LCD_Scan_Dir+0x61c>)
 8001754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	4b47      	ldr	r3, [pc, #284]	; (8001878 <LCD_Scan_Dir+0x61c>)
 800175c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001760:	615a      	str	r2, [r3, #20]
 8001762:	4b46      	ldr	r3, [pc, #280]	; (800187c <LCD_Scan_Dir+0x620>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	4b43      	ldr	r3, [pc, #268]	; (8001878 <LCD_Scan_Dir+0x61c>)
 800176a:	2280      	movs	r2, #128	; 0x80
 800176c:	615a      	str	r2, [r3, #20]
 800176e:	4b42      	ldr	r3, [pc, #264]	; (8001878 <LCD_Scan_Dir+0x61c>)
 8001770:	2280      	movs	r2, #128	; 0x80
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	4b40      	ldr	r3, [pc, #256]	; (8001878 <LCD_Scan_Dir+0x61c>)
 8001776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 800177c:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <LCD_Scan_Dir+0x61c>)
 800177e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <LCD_Scan_Dir+0x61c>)
 8001786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178a:	615a      	str	r2, [r3, #20]
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <LCD_Scan_Dir+0x618>)
 800178e:	885b      	ldrh	r3, [r3, #2]
 8001790:	3b01      	subs	r3, #1
 8001792:	121a      	asrs	r2, r3, #8
 8001794:	4b39      	ldr	r3, [pc, #228]	; (800187c <LCD_Scan_Dir+0x620>)
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	4b37      	ldr	r3, [pc, #220]	; (8001878 <LCD_Scan_Dir+0x61c>)
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	615a      	str	r2, [r3, #20]
 800179e:	4b36      	ldr	r3, [pc, #216]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	4b34      	ldr	r3, [pc, #208]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80017a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017aa:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80017ac:	4b32      	ldr	r3, [pc, #200]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80017ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	4b30      	ldr	r3, [pc, #192]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80017b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ba:	615a      	str	r2, [r3, #20]
 80017bc:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <LCD_Scan_Dir+0x618>)
 80017be:	885b      	ldrh	r3, [r3, #2]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	4a2e      	ldr	r2, [pc, #184]	; (800187c <LCD_Scan_Dir+0x620>)
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	60d3      	str	r3, [r2, #12]
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	615a      	str	r2, [r3, #20]
 80017ce:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	611a      	str	r2, [r3, #16]
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <LCD_Scan_Dir+0x61c>)
 80017d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017da:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80017dc:	e046      	b.n	800186c <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2b07      	cmp	r3, #7
 80017e2:	d836      	bhi.n	8001852 <LCD_Scan_Dir+0x5f6>
 80017e4:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <LCD_Scan_Dir+0x590>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	0800180d 	.word	0x0800180d
 80017f0:	08001817 	.word	0x08001817
 80017f4:	08001821 	.word	0x08001821
 80017f8:	08001853 	.word	0x08001853
 80017fc:	0800182b 	.word	0x0800182b
 8001800:	08001835 	.word	0x08001835
 8001804:	0800183f 	.word	0x0800183f
 8001808:	08001849 	.word	0x08001849
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001812:	81fb      	strh	r3, [r7, #14]
			break;
 8001814:	e01d      	b.n	8001852 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001816:	89fb      	ldrh	r3, [r7, #14]
 8001818:	f043 0310 	orr.w	r3, r3, #16
 800181c:	81fb      	strh	r3, [r7, #14]
			break;
 800181e:	e018      	b.n	8001852 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001820:	89fb      	ldrh	r3, [r7, #14]
 8001822:	f043 0320 	orr.w	r3, r3, #32
 8001826:	81fb      	strh	r3, [r7, #14]
			break;
 8001828:	e013      	b.n	8001852 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 800182a:	89fb      	ldrh	r3, [r7, #14]
 800182c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001830:	81fb      	strh	r3, [r7, #14]
			break;
 8001832:	e00e      	b.n	8001852 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001834:	89fb      	ldrh	r3, [r7, #14]
 8001836:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800183a:	81fb      	strh	r3, [r7, #14]
			break;
 800183c:	e009      	b.n	8001852 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800183e:	89fb      	ldrh	r3, [r7, #14]
 8001840:	f043 0318 	orr.w	r3, r3, #24
 8001844:	81fb      	strh	r3, [r7, #14]
			break;
 8001846:	e004      	b.n	8001852 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8001848:	89fb      	ldrh	r3, [r7, #14]
 800184a:	f043 0308 	orr.w	r3, r3, #8
 800184e:	81fb      	strh	r3, [r7, #14]
			break;
 8001850:	bf00      	nop
		}
		dirreg = 0X03;
 8001852:	2303      	movs	r3, #3
 8001854:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8001856:	89fb      	ldrh	r3, [r7, #14]
 8001858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800185c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800185e:	89fa      	ldrh	r2, [r7, #14]
 8001860:	89bb      	ldrh	r3, [r7, #12]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff f9e7 	bl	8000c38 <LCD_WriteReg>
	}
}
 800186a:	bf00      	nop
 800186c:	bf00      	nop
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000030 	.word	0x20000030
 8001878:	40011000 	.word	0x40011000
 800187c:	40010c00 	.word	0x40010c00

08001880 <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
 800188a:	460b      	mov	r3, r1
 800188c:	80bb      	strh	r3, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001892:	4b75      	ldr	r3, [pc, #468]	; (8001a68 <LCD_Fast_DrawPoint+0x1e8>)
 8001894:	889b      	ldrh	r3, [r3, #4]
 8001896:	f249 3241 	movw	r2, #37697	; 0x9341
 800189a:	4293      	cmp	r3, r2
 800189c:	d005      	beq.n	80018aa <LCD_Fast_DrawPoint+0x2a>
 800189e:	4b72      	ldr	r3, [pc, #456]	; (8001a68 <LCD_Fast_DrawPoint+0x1e8>)
 80018a0:	889b      	ldrh	r3, [r3, #4]
 80018a2:	f245 3210 	movw	r2, #21264	; 0x5310
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d164      	bne.n	8001974 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 80018aa:	4b6f      	ldr	r3, [pc, #444]	; (8001a68 <LCD_Fast_DrawPoint+0x1e8>)
 80018ac:	895b      	ldrh	r3, [r3, #10]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f936 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80018b4:	4b6d      	ldr	r3, [pc, #436]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80018b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ba:	611a      	str	r2, [r3, #16]
 80018bc:	4b6b      	ldr	r3, [pc, #428]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80018be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c2:	615a      	str	r2, [r3, #20]
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	4b69      	ldr	r3, [pc, #420]	; (8001a70 <LCD_Fast_DrawPoint+0x1f0>)
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	4b67      	ldr	r3, [pc, #412]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	4b65      	ldr	r3, [pc, #404]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	611a      	str	r2, [r3, #16]
 80018da:	4b64      	ldr	r3, [pc, #400]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80018dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80018e2:	4b62      	ldr	r3, [pc, #392]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80018e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	4b60      	ldr	r3, [pc, #384]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80018ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f0:	615a      	str	r2, [r3, #20]
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	4a5e      	ldr	r2, [pc, #376]	; (8001a70 <LCD_Fast_DrawPoint+0x1f0>)
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	60d3      	str	r3, [r2, #12]
 80018fa:	4b5c      	ldr	r3, [pc, #368]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	615a      	str	r2, [r3, #20]
 8001900:	4b5a      	ldr	r3, [pc, #360]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	611a      	str	r2, [r3, #16]
 8001906:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800190c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800190e:	4b56      	ldr	r3, [pc, #344]	; (8001a68 <LCD_Fast_DrawPoint+0x1e8>)
 8001910:	899b      	ldrh	r3, [r3, #12]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f904 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001918:	4b54      	ldr	r3, [pc, #336]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 800191a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	4b52      	ldr	r3, [pc, #328]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001926:	615a      	str	r2, [r3, #20]
 8001928:	88bb      	ldrh	r3, [r7, #4]
 800192a:	0a1b      	lsrs	r3, r3, #8
 800192c:	b29a      	uxth	r2, r3
 800192e:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <LCD_Fast_DrawPoint+0x1f0>)
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	4b4e      	ldr	r3, [pc, #312]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001944:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001946:	4b49      	ldr	r3, [pc, #292]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800194c:	611a      	str	r2, [r3, #16]
 800194e:	4b47      	ldr	r3, [pc, #284]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001954:	615a      	str	r2, [r3, #20]
 8001956:	88bb      	ldrh	r3, [r7, #4]
 8001958:	4a45      	ldr	r2, [pc, #276]	; (8001a70 <LCD_Fast_DrawPoint+0x1f0>)
 800195a:	b2db      	uxtb	r3, r3
 800195c:	60d3      	str	r3, [r2, #12]
 800195e:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001966:	2280      	movs	r2, #128	; 0x80
 8001968:	611a      	str	r2, [r3, #16]
 800196a:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 800196c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	e1e6      	b.n	8001d42 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8001974:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <LCD_Fast_DrawPoint+0x1e8>)
 8001976:	889b      	ldrh	r3, [r3, #4]
 8001978:	f245 5210 	movw	r2, #21776	; 0x5510
 800197c:	4293      	cmp	r3, r2
 800197e:	d179      	bne.n	8001a74 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8001980:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <LCD_Fast_DrawPoint+0x1e8>)
 8001982:	895b      	ldrh	r3, [r3, #10]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f8cb 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800198a:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 800198c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001990:	611a      	str	r2, [r3, #16]
 8001992:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001998:	615a      	str	r2, [r3, #20]
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	b29a      	uxth	r2, r3
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <LCD_Fast_DrawPoint+0x1f0>)
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80019a6:	2280      	movs	r2, #128	; 0x80
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	611a      	str	r2, [r3, #16]
 80019b0:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80019b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <LCD_Fast_DrawPoint+0x1e8>)
 80019ba:	895b      	ldrh	r3, [r3, #10]
 80019bc:	3301      	adds	r3, #1
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f8ad 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80019c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80019d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d4:	615a      	str	r2, [r3, #20]
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4a25      	ldr	r2, [pc, #148]	; (8001a70 <LCD_Fast_DrawPoint+0x1f0>)
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	60d3      	str	r3, [r2, #12]
 80019de:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	615a      	str	r2, [r3, #20]
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	611a      	str	r2, [r3, #16]
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80019ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <LCD_Fast_DrawPoint+0x1e8>)
 80019f4:	899b      	ldrh	r3, [r3, #12]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f892 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 80019fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a02:	611a      	str	r2, [r3, #16]
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0a:	615a      	str	r2, [r3, #20]
 8001a0c:	88bb      	ldrh	r3, [r7, #4]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <LCD_Fast_DrawPoint+0x1f0>)
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	615a      	str	r2, [r3, #20]
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	611a      	str	r2, [r3, #16]
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a28:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <LCD_Fast_DrawPoint+0x1e8>)
 8001a2c:	899b      	ldrh	r3, [r3, #12]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f874 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a46:	615a      	str	r2, [r3, #20]
 8001a48:	88bb      	ldrh	r3, [r7, #4]
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <LCD_Fast_DrawPoint+0x1f0>)
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	60d3      	str	r3, [r2, #12]
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	615a      	str	r2, [r3, #20]
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <LCD_Fast_DrawPoint+0x1ec>)
 8001a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a62:	611a      	str	r2, [r3, #16]
 8001a64:	e16d      	b.n	8001d42 <LCD_Fast_DrawPoint+0x4c2>
 8001a66:	bf00      	nop
 8001a68:	20000030 	.word	0x20000030
 8001a6c:	40011000 	.word	0x40011000
 8001a70:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <LCD_Fast_DrawPoint+0x398>)
 8001a76:	889b      	ldrh	r3, [r3, #4]
 8001a78:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	f040 80d1 	bne.w	8001c24 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8001a82:	4b65      	ldr	r3, [pc, #404]	; (8001c18 <LCD_Fast_DrawPoint+0x398>)
 8001a84:	799b      	ldrb	r3, [r3, #6]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <LCD_Fast_DrawPoint+0x398>)
 8001a8c:	881a      	ldrh	r2, [r3, #0]
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3b01      	subs	r3, #1
 8001a96:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001a98:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <LCD_Fast_DrawPoint+0x398>)
 8001a9a:	895b      	ldrh	r3, [r3, #10]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff f83f 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001aa2:	4b5e      	ldr	r3, [pc, #376]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa8:	611a      	str	r2, [r3, #16]
 8001aaa:	4b5c      	ldr	r3, [pc, #368]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab0:	615a      	str	r2, [r3, #20]
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <LCD_Fast_DrawPoint+0x3a0>)
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	4b57      	ldr	r3, [pc, #348]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	615a      	str	r2, [r3, #20]
 8001ac2:	4b56      	ldr	r3, [pc, #344]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	611a      	str	r2, [r3, #16]
 8001ac8:	4b54      	ldr	r3, [pc, #336]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ace:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001ad0:	4b52      	ldr	r3, [pc, #328]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ade:	615a      	str	r2, [r3, #20]
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	4a4f      	ldr	r2, [pc, #316]	; (8001c20 <LCD_Fast_DrawPoint+0x3a0>)
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	60d3      	str	r3, [r2, #12]
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	615a      	str	r2, [r3, #20]
 8001aee:	4b4b      	ldr	r3, [pc, #300]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	611a      	str	r2, [r3, #16]
 8001af4:	4b49      	ldr	r3, [pc, #292]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001afc:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b02:	611a      	str	r2, [r3, #16]
 8001b04:	4b45      	ldr	r3, [pc, #276]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0a:	615a      	str	r2, [r3, #20]
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <LCD_Fast_DrawPoint+0x3a0>)
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	615a      	str	r2, [r3, #20]
 8001b1c:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	611a      	str	r2, [r3, #16]
 8001b22:	4b3e      	ldr	r3, [pc, #248]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b28:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001b2a:	4b3c      	ldr	r3, [pc, #240]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b38:	615a      	str	r2, [r3, #20]
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	4a38      	ldr	r2, [pc, #224]	; (8001c20 <LCD_Fast_DrawPoint+0x3a0>)
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	60d3      	str	r3, [r2, #12]
 8001b42:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	615a      	str	r2, [r3, #20]
 8001b48:	4b34      	ldr	r3, [pc, #208]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	611a      	str	r2, [r3, #16]
 8001b4e:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b54:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001b56:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <LCD_Fast_DrawPoint+0x398>)
 8001b58:	899b      	ldrh	r3, [r3, #12]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe ffe0 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001b60:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b66:	611a      	str	r2, [r3, #16]
 8001b68:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6e:	615a      	str	r2, [r3, #20]
 8001b70:	88bb      	ldrh	r3, [r7, #4]
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <LCD_Fast_DrawPoint+0x3a0>)
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	611a      	str	r2, [r3, #16]
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001b8e:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b94:	611a      	str	r2, [r3, #16]
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9c:	615a      	str	r2, [r3, #20]
 8001b9e:	88bb      	ldrh	r3, [r7, #4]
 8001ba0:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <LCD_Fast_DrawPoint+0x3a0>)
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	60d3      	str	r3, [r2, #12]
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	615a      	str	r2, [r3, #20]
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc8:	615a      	str	r2, [r3, #20]
 8001bca:	88bb      	ldrh	r3, [r7, #4]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <LCD_Fast_DrawPoint+0x3a0>)
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	615a      	str	r2, [r3, #20]
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	611a      	str	r2, [r3, #16]
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001bea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bee:	611a      	str	r2, [r3, #16]
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf6:	615a      	str	r2, [r3, #20]
 8001bf8:	88bb      	ldrh	r3, [r7, #4]
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <LCD_Fast_DrawPoint+0x3a0>)
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	60d3      	str	r3, [r2, #12]
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	615a      	str	r2, [r3, #20]
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001c08:	2280      	movs	r2, #128	; 0x80
 8001c0a:	611a      	str	r2, [r3, #16]
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <LCD_Fast_DrawPoint+0x39c>)
 8001c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c12:	611a      	str	r2, [r3, #16]
 8001c14:	e095      	b.n	8001d42 <LCD_Fast_DrawPoint+0x4c2>
 8001c16:	bf00      	nop
 8001c18:	20000030 	.word	0x20000030
 8001c1c:	40011000 	.word	0x40011000
 8001c20:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001c24:	4b5e      	ldr	r3, [pc, #376]	; (8001da0 <LCD_Fast_DrawPoint+0x520>)
 8001c26:	889b      	ldrh	r3, [r3, #4]
 8001c28:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d16f      	bne.n	8001d10 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001c30:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <LCD_Fast_DrawPoint+0x520>)
 8001c32:	799b      	ldrb	r3, [r3, #6]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d106      	bne.n	8001c46 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001c38:	4b59      	ldr	r3, [pc, #356]	; (8001da0 <LCD_Fast_DrawPoint+0x520>)
 8001c3a:	881a      	ldrh	r2, [r3, #0]
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001c46:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <LCD_Fast_DrawPoint+0x520>)
 8001c48:	895b      	ldrh	r3, [r3, #10]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe ff68 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001c50:	4b54      	ldr	r3, [pc, #336]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c56:	611a      	str	r2, [r3, #16]
 8001c58:	4b52      	ldr	r3, [pc, #328]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5e:	615a      	str	r2, [r3, #20]
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <LCD_Fast_DrawPoint+0x528>)
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	4b4e      	ldr	r3, [pc, #312]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	615a      	str	r2, [r3, #20]
 8001c70:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001c7e:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c84:	611a      	str	r2, [r3, #16]
 8001c86:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8c:	615a      	str	r2, [r3, #20]
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	4a45      	ldr	r2, [pc, #276]	; (8001da8 <LCD_Fast_DrawPoint+0x528>)
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	60d3      	str	r3, [r2, #12]
 8001c96:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	615a      	str	r2, [r3, #20]
 8001c9c:	4b41      	ldr	r3, [pc, #260]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	4b40      	ldr	r3, [pc, #256]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <LCD_Fast_DrawPoint+0x520>)
 8001cac:	899b      	ldrh	r3, [r3, #12]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe ff36 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001cb4:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cba:	611a      	str	r2, [r3, #16]
 8001cbc:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc2:	615a      	str	r2, [r3, #20]
 8001cc4:	88bb      	ldrh	r3, [r7, #4]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <LCD_Fast_DrawPoint+0x528>)
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001cd0:	2280      	movs	r2, #128	; 0x80
 8001cd2:	615a      	str	r2, [r3, #20]
 8001cd4:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001cd6:	2280      	movs	r2, #128	; 0x80
 8001cd8:	611a      	str	r2, [r3, #16]
 8001cda:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001ce2:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce8:	611a      	str	r2, [r3, #16]
 8001cea:	4b2e      	ldr	r3, [pc, #184]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf0:	615a      	str	r2, [r3, #20]
 8001cf2:	88bb      	ldrh	r3, [r7, #4]
 8001cf4:	4a2c      	ldr	r2, [pc, #176]	; (8001da8 <LCD_Fast_DrawPoint+0x528>)
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	60d3      	str	r3, [r2, #12]
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	615a      	str	r2, [r3, #20]
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	611a      	str	r2, [r3, #16]
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0c:	611a      	str	r2, [r3, #16]
 8001d0e:	e018      	b.n	8001d42 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <LCD_Fast_DrawPoint+0x520>)
 8001d12:	799b      	ldrb	r3, [r3, #6]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001d18:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <LCD_Fast_DrawPoint+0x520>)
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <LCD_Fast_DrawPoint+0x520>)
 8001d28:	895b      	ldrh	r3, [r3, #10]
 8001d2a:	88fa      	ldrh	r2, [r7, #6]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe ff82 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <LCD_Fast_DrawPoint+0x520>)
 8001d36:	899b      	ldrh	r3, [r3, #12]
 8001d38:	88ba      	ldrh	r2, [r7, #4]
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe ff7b 	bl	8000c38 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d48:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d50:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <LCD_Fast_DrawPoint+0x520>)
 8001d54:	891a      	ldrh	r2, [r3, #8]
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <LCD_Fast_DrawPoint+0x528>)
 8001d58:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d74:	611a      	str	r2, [r3, #16]
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d7c:	615a      	str	r2, [r3, #20]
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <LCD_Fast_DrawPoint+0x528>)
 8001d80:	887b      	ldrh	r3, [r7, #2]
 8001d82:	60d3      	str	r3, [r2, #12]
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001d86:	2280      	movs	r2, #128	; 0x80
 8001d88:	615a      	str	r2, [r3, #20]
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	611a      	str	r2, [r3, #16]
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <LCD_Fast_DrawPoint+0x524>)
 8001d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d96:	611a      	str	r2, [r3, #16]
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000030 	.word	0x20000030
 8001da4:	40011000 	.word	0x40011000
 8001da8:	40010c00 	.word	0x40010c00
 8001dac:	00000000 	.word	0x00000000

08001db0 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001dba:	20be      	movs	r0, #190	; 0xbe
 8001dbc:	f7fe feb0 	bl	8000b20 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc6:	611a      	str	r2, [r3, #16]
 8001dc8:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dce:	615a      	str	r2, [r3, #20]
 8001dd0:	4b48      	ldr	r3, [pc, #288]	; (8001ef4 <LCD_SSD_BackLightSet+0x144>)
 8001dd2:	2205      	movs	r2, #5
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	4b46      	ldr	r3, [pc, #280]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	615a      	str	r2, [r3, #20]
 8001ddc:	4b44      	ldr	r3, [pc, #272]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001dde:	2280      	movs	r2, #128	; 0x80
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001dea:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001df0:	611a      	str	r2, [r3, #16]
 8001df2:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fc97 	bl	8000730 <__aeabi_i2d>
 8001e02:	a339      	add	r3, pc, #228	; (adr r3, 8001ee8 <LCD_SSD_BackLightSet+0x138>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	f7fe fa16 	bl	8000238 <__aeabi_dmul>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4c38      	ldr	r4, [pc, #224]	; (8001ef4 <LCD_SSD_BackLightSet+0x144>)
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe fcf5 	bl	8000804 <__aeabi_d2uiz>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	60e3      	str	r3, [r4, #12]
 8001e1e:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e20:	2280      	movs	r2, #128	; 0x80
 8001e22:	615a      	str	r2, [r3, #20]
 8001e24:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	611a      	str	r2, [r3, #16]
 8001e2a:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e30:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e38:	611a      	str	r2, [r3, #16]
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e40:	615a      	str	r2, [r3, #20]
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <LCD_SSD_BackLightSet+0x144>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	615a      	str	r2, [r3, #20]
 8001e4e:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e50:	2280      	movs	r2, #128	; 0x80
 8001e52:	611a      	str	r2, [r3, #16]
 8001e54:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e62:	611a      	str	r2, [r3, #16]
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e6a:	615a      	str	r2, [r3, #20]
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <LCD_SSD_BackLightSet+0x144>)
 8001e6e:	22ff      	movs	r2, #255	; 0xff
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e74:	2280      	movs	r2, #128	; 0x80
 8001e76:	615a      	str	r2, [r3, #20]
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	611a      	str	r2, [r3, #16]
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e84:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e94:	615a      	str	r2, [r3, #20]
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <LCD_SSD_BackLightSet+0x144>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	615a      	str	r2, [r3, #20]
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	611a      	str	r2, [r3, #16]
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eae:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb6:	611a      	str	r2, [r3, #16]
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ebe:	615a      	str	r2, [r3, #20]
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <LCD_SSD_BackLightSet+0x144>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001ec8:	2280      	movs	r2, #128	; 0x80
 8001eca:	615a      	str	r2, [r3, #20]
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	611a      	str	r2, [r3, #16]
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <LCD_SSD_BackLightSet+0x140>)
 8001ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed8:	611a      	str	r2, [r3, #16]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	66666666 	.word	0x66666666
 8001eec:	40046666 	.word	0x40046666
 8001ef0:	40011000 	.word	0x40011000
 8001ef4:	40010c00 	.word	0x40010c00

08001ef8 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d177      	bne.n	8001ff8 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001f08:	4b80      	ldr	r3, [pc, #512]	; (800210c <LCD_Display_Dir+0x214>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001f0e:	4b7f      	ldr	r3, [pc, #508]	; (800210c <LCD_Display_Dir+0x214>)
 8001f10:	22f0      	movs	r2, #240	; 0xf0
 8001f12:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001f14:	4b7d      	ldr	r3, [pc, #500]	; (800210c <LCD_Display_Dir+0x214>)
 8001f16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f1a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f1c:	4b7b      	ldr	r3, [pc, #492]	; (800210c <LCD_Display_Dir+0x214>)
 8001f1e:	889b      	ldrh	r3, [r3, #4]
 8001f20:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00b      	beq.n	8001f40 <LCD_Display_Dir+0x48>
 8001f28:	4b78      	ldr	r3, [pc, #480]	; (800210c <LCD_Display_Dir+0x214>)
 8001f2a:	889b      	ldrh	r3, [r3, #4]
 8001f2c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d005      	beq.n	8001f40 <LCD_Display_Dir+0x48>
 8001f34:	4b75      	ldr	r3, [pc, #468]	; (800210c <LCD_Display_Dir+0x214>)
 8001f36:	889b      	ldrh	r3, [r3, #4]
 8001f38:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d11e      	bne.n	8001f7e <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001f40:	4b72      	ldr	r3, [pc, #456]	; (800210c <LCD_Display_Dir+0x214>)
 8001f42:	222c      	movs	r2, #44	; 0x2c
 8001f44:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001f46:	4b71      	ldr	r3, [pc, #452]	; (800210c <LCD_Display_Dir+0x214>)
 8001f48:	222a      	movs	r2, #42	; 0x2a
 8001f4a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001f4c:	4b6f      	ldr	r3, [pc, #444]	; (800210c <LCD_Display_Dir+0x214>)
 8001f4e:	222b      	movs	r2, #43	; 0x2b
 8001f50:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f52:	4b6e      	ldr	r3, [pc, #440]	; (800210c <LCD_Display_Dir+0x214>)
 8001f54:	889b      	ldrh	r3, [r3, #4]
 8001f56:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d006      	beq.n	8001f6c <LCD_Display_Dir+0x74>
 8001f5e:	4b6b      	ldr	r3, [pc, #428]	; (800210c <LCD_Display_Dir+0x214>)
 8001f60:	889b      	ldrh	r3, [r3, #4]
 8001f62:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f66:	4293      	cmp	r3, r2
 8001f68:	f040 80c7 	bne.w	80020fa <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001f6c:	4b67      	ldr	r3, [pc, #412]	; (800210c <LCD_Display_Dir+0x214>)
 8001f6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f72:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001f74:	4b65      	ldr	r3, [pc, #404]	; (800210c <LCD_Display_Dir+0x214>)
 8001f76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f7a:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f7c:	e0bd      	b.n	80020fa <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001f7e:	4b63      	ldr	r3, [pc, #396]	; (800210c <LCD_Display_Dir+0x214>)
 8001f80:	889b      	ldrh	r3, [r3, #4]
 8001f82:	f245 5210 	movw	r2, #21776	; 0x5510
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d114      	bne.n	8001fb4 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001f8a:	4b60      	ldr	r3, [pc, #384]	; (800210c <LCD_Display_Dir+0x214>)
 8001f8c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001f90:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001f92:	4b5e      	ldr	r3, [pc, #376]	; (800210c <LCD_Display_Dir+0x214>)
 8001f94:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001f98:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001f9a:	4b5c      	ldr	r3, [pc, #368]	; (800210c <LCD_Display_Dir+0x214>)
 8001f9c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001fa0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001fa2:	4b5a      	ldr	r3, [pc, #360]	; (800210c <LCD_Display_Dir+0x214>)
 8001fa4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001fa8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001faa:	4b58      	ldr	r3, [pc, #352]	; (800210c <LCD_Display_Dir+0x214>)
 8001fac:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001fb0:	805a      	strh	r2, [r3, #2]
 8001fb2:	e0a3      	b.n	80020fc <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001fb4:	4b55      	ldr	r3, [pc, #340]	; (800210c <LCD_Display_Dir+0x214>)
 8001fb6:	889b      	ldrh	r3, [r3, #4]
 8001fb8:	f641 1263 	movw	r2, #6499	; 0x1963
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d111      	bne.n	8001fe4 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001fc0:	4b52      	ldr	r3, [pc, #328]	; (800210c <LCD_Display_Dir+0x214>)
 8001fc2:	222c      	movs	r2, #44	; 0x2c
 8001fc4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001fc6:	4b51      	ldr	r3, [pc, #324]	; (800210c <LCD_Display_Dir+0x214>)
 8001fc8:	222b      	movs	r2, #43	; 0x2b
 8001fca:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001fcc:	4b4f      	ldr	r3, [pc, #316]	; (800210c <LCD_Display_Dir+0x214>)
 8001fce:	222a      	movs	r2, #42	; 0x2a
 8001fd0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001fd2:	4b4e      	ldr	r3, [pc, #312]	; (800210c <LCD_Display_Dir+0x214>)
 8001fd4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001fd8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001fda:	4b4c      	ldr	r3, [pc, #304]	; (800210c <LCD_Display_Dir+0x214>)
 8001fdc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001fe0:	805a      	strh	r2, [r3, #2]
 8001fe2:	e08b      	b.n	80020fc <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001fe4:	4b49      	ldr	r3, [pc, #292]	; (800210c <LCD_Display_Dir+0x214>)
 8001fe6:	2222      	movs	r2, #34	; 0x22
 8001fe8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001fea:	4b48      	ldr	r3, [pc, #288]	; (800210c <LCD_Display_Dir+0x214>)
 8001fec:	2220      	movs	r2, #32
 8001fee:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001ff0:	4b46      	ldr	r3, [pc, #280]	; (800210c <LCD_Display_Dir+0x214>)
 8001ff2:	2221      	movs	r2, #33	; 0x21
 8001ff4:	819a      	strh	r2, [r3, #12]
 8001ff6:	e081      	b.n	80020fc <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001ff8:	4b44      	ldr	r3, [pc, #272]	; (800210c <LCD_Display_Dir+0x214>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <LCD_Display_Dir+0x214>)
 8002000:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002004:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8002006:	4b41      	ldr	r3, [pc, #260]	; (800210c <LCD_Display_Dir+0x214>)
 8002008:	22f0      	movs	r2, #240	; 0xf0
 800200a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800200c:	4b3f      	ldr	r3, [pc, #252]	; (800210c <LCD_Display_Dir+0x214>)
 800200e:	889b      	ldrh	r3, [r3, #4]
 8002010:	f249 3241 	movw	r2, #37697	; 0x9341
 8002014:	4293      	cmp	r3, r2
 8002016:	d005      	beq.n	8002024 <LCD_Display_Dir+0x12c>
 8002018:	4b3c      	ldr	r3, [pc, #240]	; (800210c <LCD_Display_Dir+0x214>)
 800201a:	889b      	ldrh	r3, [r3, #4]
 800201c:	f245 3210 	movw	r2, #21264	; 0x5310
 8002020:	4293      	cmp	r3, r2
 8002022:	d109      	bne.n	8002038 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8002024:	4b39      	ldr	r3, [pc, #228]	; (800210c <LCD_Display_Dir+0x214>)
 8002026:	222c      	movs	r2, #44	; 0x2c
 8002028:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 800202a:	4b38      	ldr	r3, [pc, #224]	; (800210c <LCD_Display_Dir+0x214>)
 800202c:	222a      	movs	r2, #42	; 0x2a
 800202e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8002030:	4b36      	ldr	r3, [pc, #216]	; (800210c <LCD_Display_Dir+0x214>)
 8002032:	222b      	movs	r2, #43	; 0x2b
 8002034:	819a      	strh	r2, [r3, #12]
 8002036:	e04b      	b.n	80020d0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8002038:	4b34      	ldr	r3, [pc, #208]	; (800210c <LCD_Display_Dir+0x214>)
 800203a:	889b      	ldrh	r3, [r3, #4]
 800203c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002040:	4293      	cmp	r3, r2
 8002042:	d109      	bne.n	8002058 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8002044:	4b31      	ldr	r3, [pc, #196]	; (800210c <LCD_Display_Dir+0x214>)
 8002046:	222c      	movs	r2, #44	; 0x2c
 8002048:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 800204a:	4b30      	ldr	r3, [pc, #192]	; (800210c <LCD_Display_Dir+0x214>)
 800204c:	222b      	movs	r2, #43	; 0x2b
 800204e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8002050:	4b2e      	ldr	r3, [pc, #184]	; (800210c <LCD_Display_Dir+0x214>)
 8002052:	222a      	movs	r2, #42	; 0x2a
 8002054:	819a      	strh	r2, [r3, #12]
 8002056:	e03b      	b.n	80020d0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8002058:	4b2c      	ldr	r3, [pc, #176]	; (800210c <LCD_Display_Dir+0x214>)
 800205a:	889b      	ldrh	r3, [r3, #4]
 800205c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002060:	4293      	cmp	r3, r2
 8002062:	d114      	bne.n	800208e <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8002064:	4b29      	ldr	r3, [pc, #164]	; (800210c <LCD_Display_Dir+0x214>)
 8002066:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800206a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 800206c:	4b27      	ldr	r3, [pc, #156]	; (800210c <LCD_Display_Dir+0x214>)
 800206e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002072:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <LCD_Display_Dir+0x214>)
 8002076:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 800207a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <LCD_Display_Dir+0x214>)
 800207e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002082:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <LCD_Display_Dir+0x214>)
 8002086:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800208a:	805a      	strh	r2, [r3, #2]
 800208c:	e020      	b.n	80020d0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <LCD_Display_Dir+0x214>)
 8002090:	889b      	ldrh	r3, [r3, #4]
 8002092:	f641 1263 	movw	r2, #6499	; 0x1963
 8002096:	4293      	cmp	r3, r2
 8002098:	d111      	bne.n	80020be <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <LCD_Display_Dir+0x214>)
 800209c:	222c      	movs	r2, #44	; 0x2c
 800209e:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 80020a0:	4b1a      	ldr	r3, [pc, #104]	; (800210c <LCD_Display_Dir+0x214>)
 80020a2:	222a      	movs	r2, #42	; 0x2a
 80020a4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <LCD_Display_Dir+0x214>)
 80020a8:	222b      	movs	r2, #43	; 0x2b
 80020aa:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <LCD_Display_Dir+0x214>)
 80020ae:	f44f 7248 	mov.w	r2, #800	; 0x320
 80020b2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <LCD_Display_Dir+0x214>)
 80020b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020ba:	805a      	strh	r2, [r3, #2]
 80020bc:	e008      	b.n	80020d0 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <LCD_Display_Dir+0x214>)
 80020c0:	2222      	movs	r2, #34	; 0x22
 80020c2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <LCD_Display_Dir+0x214>)
 80020c6:	2221      	movs	r2, #33	; 0x21
 80020c8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <LCD_Display_Dir+0x214>)
 80020cc:	2220      	movs	r2, #32
 80020ce:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <LCD_Display_Dir+0x214>)
 80020d2:	889b      	ldrh	r3, [r3, #4]
 80020d4:	f646 0204 	movw	r2, #26628	; 0x6804
 80020d8:	4293      	cmp	r3, r2
 80020da:	d005      	beq.n	80020e8 <LCD_Display_Dir+0x1f0>
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <LCD_Display_Dir+0x214>)
 80020de:	889b      	ldrh	r3, [r3, #4]
 80020e0:	f245 3210 	movw	r2, #21264	; 0x5310
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d109      	bne.n	80020fc <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <LCD_Display_Dir+0x214>)
 80020ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020ee:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <LCD_Display_Dir+0x214>)
 80020f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020f6:	805a      	strh	r2, [r3, #2]
 80020f8:	e000      	b.n	80020fc <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80020fa:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff f8ad 	bl	800125c <LCD_Scan_Dir>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000030 	.word	0x20000030

08002110 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8002116:	4b90      	ldr	r3, [pc, #576]	; (8002358 <LCD_Init+0x248>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	4a8f      	ldr	r2, [pc, #572]	; (8002358 <LCD_Init+0x248>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	6193      	str	r3, [r2, #24]
 8002122:	4b8d      	ldr	r3, [pc, #564]	; (8002358 <LCD_Init+0x248>)
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 800212e:	4b8a      	ldr	r3, [pc, #552]	; (8002358 <LCD_Init+0x248>)
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	4a89      	ldr	r2, [pc, #548]	; (8002358 <LCD_Init+0x248>)
 8002134:	f043 0310 	orr.w	r3, r3, #16
 8002138:	6193      	str	r3, [r2, #24]
 800213a:	4b87      	ldr	r3, [pc, #540]	; (8002358 <LCD_Init+0x248>)
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8002146:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800214a:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 800214c:	2301      	movs	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8002150:	2301      	movs	r3, #1
 8002152:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8002154:	2303      	movs	r3, #3
 8002156:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	4619      	mov	r1, r3
 800215e:	487f      	ldr	r0, [pc, #508]	; (800235c <LCD_Init+0x24c>)
 8002160:	f005 f852 	bl	8007208 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8002164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002168:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	4619      	mov	r1, r3
 8002170:	487b      	ldr	r0, [pc, #492]	; (8002360 <LCD_Init+0x250>)
 8002172:	f005 f849 	bl	8007208 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8002176:	2032      	movs	r0, #50	; 0x32
 8002178:	f004 fdd2 	bl	8006d20 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 800217c:	2101      	movs	r1, #1
 800217e:	2000      	movs	r0, #0
 8002180:	f7fe fd5a 	bl	8000c38 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8002184:	2032      	movs	r0, #50	; 0x32
 8002186:	f004 fdcb 	bl	8006d20 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 800218a:	2000      	movs	r0, #0
 800218c:	f7fe fd7e 	bl	8000c8c <LCD_ReadReg>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	4b73      	ldr	r3, [pc, #460]	; (8002364 <LCD_Init+0x254>)
 8002196:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002198:	4b72      	ldr	r3, [pc, #456]	; (8002364 <LCD_Init+0x254>)
 800219a:	889b      	ldrh	r3, [r3, #4]
 800219c:	2bfe      	cmp	r3, #254	; 0xfe
 800219e:	d90b      	bls.n	80021b8 <LCD_Init+0xa8>
 80021a0:	4b70      	ldr	r3, [pc, #448]	; (8002364 <LCD_Init+0x254>)
 80021a2:	889b      	ldrh	r3, [r3, #4]
 80021a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d005      	beq.n	80021b8 <LCD_Init+0xa8>
 80021ac:	4b6d      	ldr	r3, [pc, #436]	; (8002364 <LCD_Init+0x254>)
 80021ae:	889b      	ldrh	r3, [r3, #4]
 80021b0:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 80021b4:	f040 80c8 	bne.w	8002348 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 80021b8:	20d3      	movs	r0, #211	; 0xd3
 80021ba:	f7fe fcb1 	bl	8000b20 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 80021be:	f7fe fcf7 	bl	8000bb0 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 80021c2:	f7fe fcf5 	bl	8000bb0 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 80021c6:	f7fe fcf3 	bl	8000bb0 <LCD_RD_DATA>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b65      	ldr	r3, [pc, #404]	; (8002364 <LCD_Init+0x254>)
 80021d0:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 80021d2:	4b64      	ldr	r3, [pc, #400]	; (8002364 <LCD_Init+0x254>)
 80021d4:	889b      	ldrh	r3, [r3, #4]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	b29a      	uxth	r2, r3
 80021da:	4b62      	ldr	r3, [pc, #392]	; (8002364 <LCD_Init+0x254>)
 80021dc:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 80021de:	f7fe fce7 	bl	8000bb0 <LCD_RD_DATA>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b5f      	ldr	r3, [pc, #380]	; (8002364 <LCD_Init+0x254>)
 80021e8:	889b      	ldrh	r3, [r3, #4]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	4b5d      	ldr	r3, [pc, #372]	; (8002364 <LCD_Init+0x254>)
 80021f0:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 80021f2:	4b5c      	ldr	r3, [pc, #368]	; (8002364 <LCD_Init+0x254>)
 80021f4:	889b      	ldrh	r3, [r3, #4]
 80021f6:	f249 3241 	movw	r2, #37697	; 0x9341
 80021fa:	4293      	cmp	r3, r2
 80021fc:	f000 80a4 	beq.w	8002348 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002200:	20bf      	movs	r0, #191	; 0xbf
 8002202:	f7fe fc8d 	bl	8000b20 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8002206:	f7fe fcd3 	bl	8000bb0 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 800220a:	f7fe fcd1 	bl	8000bb0 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 800220e:	f7fe fccf 	bl	8000bb0 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8002212:	f7fe fccd 	bl	8000bb0 <LCD_RD_DATA>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	4b52      	ldr	r3, [pc, #328]	; (8002364 <LCD_Init+0x254>)
 800221c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 800221e:	4b51      	ldr	r3, [pc, #324]	; (8002364 <LCD_Init+0x254>)
 8002220:	889b      	ldrh	r3, [r3, #4]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	b29a      	uxth	r2, r3
 8002226:	4b4f      	ldr	r3, [pc, #316]	; (8002364 <LCD_Init+0x254>)
 8002228:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 800222a:	f7fe fcc1 	bl	8000bb0 <LCD_RD_DATA>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <LCD_Init+0x254>)
 8002234:	889b      	ldrh	r3, [r3, #4]
 8002236:	4313      	orrs	r3, r2
 8002238:	b29a      	uxth	r2, r3
 800223a:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <LCD_Init+0x254>)
 800223c:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 800223e:	4b49      	ldr	r3, [pc, #292]	; (8002364 <LCD_Init+0x254>)
 8002240:	889b      	ldrh	r3, [r3, #4]
 8002242:	f646 0204 	movw	r2, #26628	; 0x6804
 8002246:	4293      	cmp	r3, r2
 8002248:	d07e      	beq.n	8002348 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 800224a:	20d4      	movs	r0, #212	; 0xd4
 800224c:	f7fe fc68 	bl	8000b20 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8002250:	f7fe fcae 	bl	8000bb0 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8002254:	f7fe fcac 	bl	8000bb0 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8002258:	f7fe fcaa 	bl	8000bb0 <LCD_RD_DATA>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	4b40      	ldr	r3, [pc, #256]	; (8002364 <LCD_Init+0x254>)
 8002262:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8002264:	4b3f      	ldr	r3, [pc, #252]	; (8002364 <LCD_Init+0x254>)
 8002266:	889b      	ldrh	r3, [r3, #4]
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	b29a      	uxth	r2, r3
 800226c:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <LCD_Init+0x254>)
 800226e:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8002270:	f7fe fc9e 	bl	8000bb0 <LCD_RD_DATA>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	4b3a      	ldr	r3, [pc, #232]	; (8002364 <LCD_Init+0x254>)
 800227a:	889b      	ldrh	r3, [r3, #4]
 800227c:	4313      	orrs	r3, r2
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b38      	ldr	r3, [pc, #224]	; (8002364 <LCD_Init+0x254>)
 8002282:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8002284:	4b37      	ldr	r3, [pc, #220]	; (8002364 <LCD_Init+0x254>)
 8002286:	889b      	ldrh	r3, [r3, #4]
 8002288:	f245 3210 	movw	r2, #21264	; 0x5310
 800228c:	4293      	cmp	r3, r2
 800228e:	d05b      	beq.n	8002348 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8002290:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8002294:	f7fe fc44 	bl	8000b20 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002298:	f7fe fc8a 	bl	8000bb0 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 800229c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 80022a0:	f7fe fc3e 	bl	8000b20 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 80022a4:	f7fe fc84 	bl	8000bb0 <LCD_RD_DATA>
 80022a8:	4603      	mov	r3, r0
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <LCD_Init+0x254>)
 80022ae:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 80022b0:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <LCD_Init+0x254>)
 80022b2:	889b      	ldrh	r3, [r3, #4]
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <LCD_Init+0x254>)
 80022ba:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 80022bc:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 80022c0:	f7fe fc2e 	bl	8000b20 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 80022c4:	f7fe fc74 	bl	8000bb0 <LCD_RD_DATA>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <LCD_Init+0x254>)
 80022ce:	889b      	ldrh	r3, [r3, #4]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	4b23      	ldr	r3, [pc, #140]	; (8002364 <LCD_Init+0x254>)
 80022d6:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <LCD_Init+0x254>)
 80022da:	889b      	ldrh	r3, [r3, #4]
 80022dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e0:	d103      	bne.n	80022ea <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <LCD_Init+0x254>)
 80022e4:	f245 5210 	movw	r2, #21776	; 0x5510
 80022e8:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 80022ea:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <LCD_Init+0x254>)
 80022ec:	889b      	ldrh	r3, [r3, #4]
 80022ee:	f245 5210 	movw	r2, #21776	; 0x5510
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d028      	beq.n	8002348 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 80022f6:	20a1      	movs	r0, #161	; 0xa1
 80022f8:	f7fe fc12 	bl	8000b20 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 80022fc:	f7fe fc58 	bl	8000bb0 <LCD_RD_DATA>
 8002300:	4603      	mov	r3, r0
 8002302:	461a      	mov	r2, r3
 8002304:	4b17      	ldr	r3, [pc, #92]	; (8002364 <LCD_Init+0x254>)
 8002306:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002308:	f7fe fc52 	bl	8000bb0 <LCD_RD_DATA>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <LCD_Init+0x254>)
 8002312:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <LCD_Init+0x254>)
 8002316:	889b      	ldrh	r3, [r3, #4]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	b29a      	uxth	r2, r3
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <LCD_Init+0x254>)
 800231e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002320:	f7fe fc46 	bl	8000bb0 <LCD_RD_DATA>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <LCD_Init+0x254>)
 800232a:	889b      	ldrh	r3, [r3, #4]
 800232c:	4313      	orrs	r3, r2
 800232e:	b29a      	uxth	r2, r3
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <LCD_Init+0x254>)
 8002332:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <LCD_Init+0x254>)
 8002336:	889b      	ldrh	r3, [r3, #4]
 8002338:	f245 7261 	movw	r2, #22369	; 0x5761
 800233c:	4293      	cmp	r3, r2
 800233e:	d103      	bne.n	8002348 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <LCD_Init+0x254>)
 8002342:	f641 1263 	movw	r2, #6499	; 0x1963
 8002346:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <LCD_Init+0x254>)
 800234a:	889b      	ldrh	r3, [r3, #4]
 800234c:	f249 3241 	movw	r2, #37697	; 0x9341
 8002350:	4293      	cmp	r3, r2
 8002352:	f040 811f 	bne.w	8002594 <LCD_Init+0x484>
 8002356:	e007      	b.n	8002368 <LCD_Init+0x258>
 8002358:	40021000 	.word	0x40021000
 800235c:	40011000 	.word	0x40011000
 8002360:	40010c00 	.word	0x40010c00
 8002364:	20000030 	.word	0x20000030
			{
		LCD_WR_REG(0xCF);
 8002368:	20cf      	movs	r0, #207	; 0xcf
 800236a:	f7fe fbd9 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800236e:	2000      	movs	r0, #0
 8002370:	f7fe fbfa 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8002374:	20c1      	movs	r0, #193	; 0xc1
 8002376:	f7fe fbf7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 800237a:	2030      	movs	r0, #48	; 0x30
 800237c:	f7fe fbf4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8002380:	20ed      	movs	r0, #237	; 0xed
 8002382:	f7fe fbcd 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8002386:	2064      	movs	r0, #100	; 0x64
 8002388:	f7fe fbee 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800238c:	2003      	movs	r0, #3
 800238e:	f7fe fbeb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8002392:	2012      	movs	r0, #18
 8002394:	f7fe fbe8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002398:	2081      	movs	r0, #129	; 0x81
 800239a:	f7fe fbe5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 800239e:	20e8      	movs	r0, #232	; 0xe8
 80023a0:	f7fe fbbe 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80023a4:	2085      	movs	r0, #133	; 0x85
 80023a6:	f7fe fbdf 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80023aa:	2010      	movs	r0, #16
 80023ac:	f7fe fbdc 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80023b0:	207a      	movs	r0, #122	; 0x7a
 80023b2:	f7fe fbd9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 80023b6:	20cb      	movs	r0, #203	; 0xcb
 80023b8:	f7fe fbb2 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 80023bc:	2039      	movs	r0, #57	; 0x39
 80023be:	f7fe fbd3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80023c2:	202c      	movs	r0, #44	; 0x2c
 80023c4:	f7fe fbd0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7fe fbcd 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80023ce:	2034      	movs	r0, #52	; 0x34
 80023d0:	f7fe fbca 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80023d4:	2002      	movs	r0, #2
 80023d6:	f7fe fbc7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 80023da:	20f7      	movs	r0, #247	; 0xf7
 80023dc:	f7fe fba0 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80023e0:	2020      	movs	r0, #32
 80023e2:	f7fe fbc1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 80023e6:	20ea      	movs	r0, #234	; 0xea
 80023e8:	f7fe fb9a 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7fe fbbb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7fe fbb8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 80023f8:	20c0      	movs	r0, #192	; 0xc0
 80023fa:	f7fe fb91 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 80023fe:	201b      	movs	r0, #27
 8002400:	f7fe fbb2 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8002404:	20c1      	movs	r0, #193	; 0xc1
 8002406:	f7fe fb8b 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 800240a:	2001      	movs	r0, #1
 800240c:	f7fe fbac 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002410:	20c5      	movs	r0, #197	; 0xc5
 8002412:	f7fe fb85 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8002416:	2030      	movs	r0, #48	; 0x30
 8002418:	f7fe fba6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 800241c:	2030      	movs	r0, #48	; 0x30
 800241e:	f7fe fba3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8002422:	20c7      	movs	r0, #199	; 0xc7
 8002424:	f7fe fb7c 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002428:	20b7      	movs	r0, #183	; 0xb7
 800242a:	f7fe fb9d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 800242e:	2036      	movs	r0, #54	; 0x36
 8002430:	f7fe fb76 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8002434:	2048      	movs	r0, #72	; 0x48
 8002436:	f7fe fb97 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 800243a:	203a      	movs	r0, #58	; 0x3a
 800243c:	f7fe fb70 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002440:	2055      	movs	r0, #85	; 0x55
 8002442:	f7fe fb91 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8002446:	20b1      	movs	r0, #177	; 0xb1
 8002448:	f7fe fb6a 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800244c:	2000      	movs	r0, #0
 800244e:	f7fe fb8b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8002452:	201a      	movs	r0, #26
 8002454:	f7fe fb88 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8002458:	20b6      	movs	r0, #182	; 0xb6
 800245a:	f7fe fb61 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800245e:	200a      	movs	r0, #10
 8002460:	f7fe fb82 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002464:	20a2      	movs	r0, #162	; 0xa2
 8002466:	f7fe fb7f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 800246a:	20f2      	movs	r0, #242	; 0xf2
 800246c:	f7fe fb58 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002470:	2000      	movs	r0, #0
 8002472:	f7fe fb79 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8002476:	2026      	movs	r0, #38	; 0x26
 8002478:	f7fe fb52 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800247c:	2001      	movs	r0, #1
 800247e:	f7fe fb73 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8002482:	20e0      	movs	r0, #224	; 0xe0
 8002484:	f7fe fb4c 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002488:	200f      	movs	r0, #15
 800248a:	f7fe fb6d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800248e:	202a      	movs	r0, #42	; 0x2a
 8002490:	f7fe fb6a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8002494:	2028      	movs	r0, #40	; 0x28
 8002496:	f7fe fb67 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800249a:	2008      	movs	r0, #8
 800249c:	f7fe fb64 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80024a0:	200e      	movs	r0, #14
 80024a2:	f7fe fb61 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80024a6:	2008      	movs	r0, #8
 80024a8:	f7fe fb5e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80024ac:	2054      	movs	r0, #84	; 0x54
 80024ae:	f7fe fb5b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 80024b2:	20a9      	movs	r0, #169	; 0xa9
 80024b4:	f7fe fb58 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80024b8:	2043      	movs	r0, #67	; 0x43
 80024ba:	f7fe fb55 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 80024be:	200a      	movs	r0, #10
 80024c0:	f7fe fb52 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80024c4:	200f      	movs	r0, #15
 80024c6:	f7fe fb4f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f7fe fb4c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe fb49 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f7fe fb46 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7fe fb43 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 80024e2:	20e1      	movs	r0, #225	; 0xe1
 80024e4:	f7fe fb1c 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024e8:	2000      	movs	r0, #0
 80024ea:	f7fe fb3d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 80024ee:	2015      	movs	r0, #21
 80024f0:	f7fe fb3a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80024f4:	2017      	movs	r0, #23
 80024f6:	f7fe fb37 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 80024fa:	2007      	movs	r0, #7
 80024fc:	f7fe fb34 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002500:	2011      	movs	r0, #17
 8002502:	f7fe fb31 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8002506:	2006      	movs	r0, #6
 8002508:	f7fe fb2e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 800250c:	202b      	movs	r0, #43	; 0x2b
 800250e:	f7fe fb2b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002512:	2056      	movs	r0, #86	; 0x56
 8002514:	f7fe fb28 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002518:	203c      	movs	r0, #60	; 0x3c
 800251a:	f7fe fb25 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800251e:	2005      	movs	r0, #5
 8002520:	f7fe fb22 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002524:	2010      	movs	r0, #16
 8002526:	f7fe fb1f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800252a:	200f      	movs	r0, #15
 800252c:	f7fe fb1c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002530:	203f      	movs	r0, #63	; 0x3f
 8002532:	f7fe fb19 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002536:	203f      	movs	r0, #63	; 0x3f
 8002538:	f7fe fb16 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800253c:	200f      	movs	r0, #15
 800253e:	f7fe fb13 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8002542:	202b      	movs	r0, #43	; 0x2b
 8002544:	f7fe faec 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002548:	2000      	movs	r0, #0
 800254a:	f7fe fb0d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800254e:	2000      	movs	r0, #0
 8002550:	f7fe fb0a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002554:	2001      	movs	r0, #1
 8002556:	f7fe fb07 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 800255a:	203f      	movs	r0, #63	; 0x3f
 800255c:	f7fe fb04 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002560:	202a      	movs	r0, #42	; 0x2a
 8002562:	f7fe fadd 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002566:	2000      	movs	r0, #0
 8002568:	f7fe fafe 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800256c:	2000      	movs	r0, #0
 800256e:	f7fe fafb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002572:	2000      	movs	r0, #0
 8002574:	f7fe faf8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8002578:	20ef      	movs	r0, #239	; 0xef
 800257a:	f7fe faf5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 800257e:	2011      	movs	r0, #17
 8002580:	f7fe face 	bl	8000b20 <LCD_WR_REG>
		HAL_Delay(120);
 8002584:	2078      	movs	r0, #120	; 0x78
 8002586:	f004 fbcb 	bl	8006d20 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 800258a:	2029      	movs	r0, #41	; 0x29
 800258c:	f7fe fac8 	bl	8000b20 <LCD_WR_REG>
 8002590:	f003 bcd8 	b.w	8005f44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8002594:	4b58      	ldr	r3, [pc, #352]	; (80026f8 <LCD_Init+0x5e8>)
 8002596:	889b      	ldrh	r3, [r3, #4]
 8002598:	f646 0204 	movw	r2, #26628	; 0x6804
 800259c:	4293      	cmp	r3, r2
 800259e:	f040 80ad 	bne.w	80026fc <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80025a2:	2011      	movs	r0, #17
 80025a4:	f7fe fabc 	bl	8000b20 <LCD_WR_REG>
		HAL_Delay(20);
 80025a8:	2014      	movs	r0, #20
 80025aa:	f004 fbb9 	bl	8006d20 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 80025ae:	20d0      	movs	r0, #208	; 0xd0
 80025b0:	f7fe fab6 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 80025b4:	2007      	movs	r0, #7
 80025b6:	f7fe fad7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 80025ba:	2042      	movs	r0, #66	; 0x42
 80025bc:	f7fe fad4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 80025c0:	201d      	movs	r0, #29
 80025c2:	f7fe fad1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 80025c6:	20d1      	movs	r0, #209	; 0xd1
 80025c8:	f7fe faaa 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7fe facb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 80025d2:	201a      	movs	r0, #26
 80025d4:	f7fe fac8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 80025d8:	2009      	movs	r0, #9
 80025da:	f7fe fac5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 80025de:	20d2      	movs	r0, #210	; 0xd2
 80025e0:	f7fe fa9e 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f7fe fabf 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 80025ea:	2022      	movs	r0, #34	; 0x22
 80025ec:	f7fe fabc 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 80025f0:	20c0      	movs	r0, #192	; 0xc0
 80025f2:	f7fe fa95 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 80025f6:	2010      	movs	r0, #16
 80025f8:	f7fe fab6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 80025fc:	203b      	movs	r0, #59	; 0x3b
 80025fe:	f7fe fab3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002602:	2000      	movs	r0, #0
 8002604:	f7fe fab0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002608:	2002      	movs	r0, #2
 800260a:	f7fe faad 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 800260e:	2011      	movs	r0, #17
 8002610:	f7fe faaa 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8002614:	20c5      	movs	r0, #197	; 0xc5
 8002616:	f7fe fa83 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 800261a:	2003      	movs	r0, #3
 800261c:	f7fe faa4 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002620:	20c8      	movs	r0, #200	; 0xc8
 8002622:	f7fe fa7d 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002626:	2000      	movs	r0, #0
 8002628:	f7fe fa9e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 800262c:	2025      	movs	r0, #37	; 0x25
 800262e:	f7fe fa9b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8002632:	2021      	movs	r0, #33	; 0x21
 8002634:	f7fe fa98 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002638:	2005      	movs	r0, #5
 800263a:	f7fe fa95 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800263e:	2000      	movs	r0, #0
 8002640:	f7fe fa92 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8002644:	200a      	movs	r0, #10
 8002646:	f7fe fa8f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 800264a:	2065      	movs	r0, #101	; 0x65
 800264c:	f7fe fa8c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002650:	2025      	movs	r0, #37	; 0x25
 8002652:	f7fe fa89 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8002656:	2077      	movs	r0, #119	; 0x77
 8002658:	f7fe fa86 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 800265c:	2050      	movs	r0, #80	; 0x50
 800265e:	f7fe fa83 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8002662:	200f      	movs	r0, #15
 8002664:	f7fe fa80 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe fa7d 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 800266e:	20f8      	movs	r0, #248	; 0xf8
 8002670:	f7fe fa56 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002674:	2001      	movs	r0, #1
 8002676:	f7fe fa77 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 800267a:	20fe      	movs	r0, #254	; 0xfe
 800267c:	f7fe fa50 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002680:	2000      	movs	r0, #0
 8002682:	f7fe fa71 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002686:	2002      	movs	r0, #2
 8002688:	f7fe fa6e 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 800268c:	2020      	movs	r0, #32
 800268e:	f7fe fa47 	bl	8000b20 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002692:	2036      	movs	r0, #54	; 0x36
 8002694:	f7fe fa44 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002698:	2008      	movs	r0, #8
 800269a:	f7fe fa65 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 800269e:	203a      	movs	r0, #58	; 0x3a
 80026a0:	f7fe fa3e 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80026a4:	2055      	movs	r0, #85	; 0x55
 80026a6:	f7fe fa5f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 80026aa:	202b      	movs	r0, #43	; 0x2b
 80026ac:	f7fe fa38 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80026b0:	2000      	movs	r0, #0
 80026b2:	f7fe fa59 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7fe fa56 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80026bc:	2001      	movs	r0, #1
 80026be:	f7fe fa53 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 80026c2:	203f      	movs	r0, #63	; 0x3f
 80026c4:	f7fe fa50 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 80026c8:	202a      	movs	r0, #42	; 0x2a
 80026ca:	f7fe fa29 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe fa4a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7fe fa47 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80026da:	2001      	movs	r0, #1
 80026dc:	f7fe fa44 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 80026e0:	20df      	movs	r0, #223	; 0xdf
 80026e2:	f7fe fa41 	bl	8000b68 <LCD_WR_DATAX>
		HAL_Delay(120);
 80026e6:	2078      	movs	r0, #120	; 0x78
 80026e8:	f004 fb1a 	bl	8006d20 <HAL_Delay>
		LCD_WR_REG(0X29);
 80026ec:	2029      	movs	r0, #41	; 0x29
 80026ee:	f7fe fa17 	bl	8000b20 <LCD_WR_REG>
 80026f2:	f003 bc27 	b.w	8005f44 <LCD_Init+0x3e34>
 80026f6:	bf00      	nop
 80026f8:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x5310) {
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <LCD_Init+0x5fc>)
 80026fe:	889b      	ldrh	r3, [r3, #4]
 8002700:	f245 3210 	movw	r2, #21264	; 0x5310
 8002704:	4293      	cmp	r3, r2
 8002706:	f040 877c 	bne.w	8003602 <LCD_Init+0x14f2>
 800270a:	e001      	b.n	8002710 <LCD_Init+0x600>
 800270c:	20000030 	.word	0x20000030
		LCD_WR_REG(0xED);
 8002710:	20ed      	movs	r0, #237	; 0xed
 8002712:	f7fe fa05 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002716:	2001      	movs	r0, #1
 8002718:	f7fe fa26 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 800271c:	20fe      	movs	r0, #254	; 0xfe
 800271e:	f7fe fa23 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8002722:	20ee      	movs	r0, #238	; 0xee
 8002724:	f7fe f9fc 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002728:	20de      	movs	r0, #222	; 0xde
 800272a:	f7fe fa1d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800272e:	2021      	movs	r0, #33	; 0x21
 8002730:	f7fe fa1a 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8002734:	20f1      	movs	r0, #241	; 0xf1
 8002736:	f7fe f9f3 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800273a:	2001      	movs	r0, #1
 800273c:	f7fe fa14 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002740:	20df      	movs	r0, #223	; 0xdf
 8002742:	f7fe f9ed 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8002746:	2010      	movs	r0, #16
 8002748:	f7fe fa0e 	bl	8000b68 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 800274c:	20c4      	movs	r0, #196	; 0xc4
 800274e:	f7fe f9e7 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8002752:	208f      	movs	r0, #143	; 0x8f
 8002754:	f7fe fa08 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002758:	20c6      	movs	r0, #198	; 0xc6
 800275a:	f7fe f9e1 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800275e:	2000      	movs	r0, #0
 8002760:	f7fe fa02 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002764:	20e2      	movs	r0, #226	; 0xe2
 8002766:	f7fe f9ff 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800276a:	20e2      	movs	r0, #226	; 0xe2
 800276c:	f7fe f9fc 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002770:	20e2      	movs	r0, #226	; 0xe2
 8002772:	f7fe f9f9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8002776:	20bf      	movs	r0, #191	; 0xbf
 8002778:	f7fe f9d2 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800277c:	20aa      	movs	r0, #170	; 0xaa
 800277e:	f7fe f9f3 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8002782:	20b0      	movs	r0, #176	; 0xb0
 8002784:	f7fe f9cc 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002788:	200d      	movs	r0, #13
 800278a:	f7fe f9ed 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800278e:	2000      	movs	r0, #0
 8002790:	f7fe f9ea 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8002794:	200d      	movs	r0, #13
 8002796:	f7fe f9e7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800279a:	2000      	movs	r0, #0
 800279c:	f7fe f9e4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80027a0:	2011      	movs	r0, #17
 80027a2:	f7fe f9e1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fe f9de 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 80027ac:	2019      	movs	r0, #25
 80027ae:	f7fe f9db 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe f9d8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80027b8:	2021      	movs	r0, #33	; 0x21
 80027ba:	f7fe f9d5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fe f9d2 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 80027c4:	202d      	movs	r0, #45	; 0x2d
 80027c6:	f7fe f9cf 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7fe f9cc 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 80027d0:	203d      	movs	r0, #61	; 0x3d
 80027d2:	f7fe f9c9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7fe f9c6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80027dc:	205d      	movs	r0, #93	; 0x5d
 80027de:	f7fe f9c3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7fe f9c0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80027e8:	205d      	movs	r0, #93	; 0x5d
 80027ea:	f7fe f9bd 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7fe f9ba 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 80027f4:	20b1      	movs	r0, #177	; 0xb1
 80027f6:	f7fe f993 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 80027fa:	2080      	movs	r0, #128	; 0x80
 80027fc:	f7fe f9b4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe f9b1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002806:	208b      	movs	r0, #139	; 0x8b
 8002808:	f7fe f9ae 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe f9ab 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002812:	2096      	movs	r0, #150	; 0x96
 8002814:	f7fe f9a8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002818:	2000      	movs	r0, #0
 800281a:	f7fe f9a5 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 800281e:	20b2      	movs	r0, #178	; 0xb2
 8002820:	f7fe f97e 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002824:	2000      	movs	r0, #0
 8002826:	f7fe f99f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800282a:	2000      	movs	r0, #0
 800282c:	f7fe f99c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002830:	2002      	movs	r0, #2
 8002832:	f7fe f999 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002836:	2000      	movs	r0, #0
 8002838:	f7fe f996 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800283c:	2003      	movs	r0, #3
 800283e:	f7fe f993 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002842:	2000      	movs	r0, #0
 8002844:	f7fe f990 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002848:	20b3      	movs	r0, #179	; 0xb3
 800284a:	f7fe f969 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe f98a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002854:	2000      	movs	r0, #0
 8002856:	f7fe f987 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285a:	2000      	movs	r0, #0
 800285c:	f7fe f984 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002860:	2000      	movs	r0, #0
 8002862:	f7fe f981 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002866:	2000      	movs	r0, #0
 8002868:	f7fe f97e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286c:	2000      	movs	r0, #0
 800286e:	f7fe f97b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002872:	2000      	movs	r0, #0
 8002874:	f7fe f978 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002878:	2000      	movs	r0, #0
 800287a:	f7fe f975 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe f972 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002884:	2000      	movs	r0, #0
 8002886:	f7fe f96f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288a:	2000      	movs	r0, #0
 800288c:	f7fe f96c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002890:	2000      	movs	r0, #0
 8002892:	f7fe f969 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002896:	2000      	movs	r0, #0
 8002898:	f7fe f966 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289c:	2000      	movs	r0, #0
 800289e:	f7fe f963 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7fe f960 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7fe f95d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7fe f95a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7fe f957 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe f954 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7fe f951 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7fe f94e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7fe f94b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7fe f948 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d8:	2000      	movs	r0, #0
 80028da:	f7fe f945 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 80028de:	20b4      	movs	r0, #180	; 0xb4
 80028e0:	f7fe f91e 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 80028e4:	208b      	movs	r0, #139	; 0x8b
 80028e6:	f7fe f93f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fe f93c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80028f0:	2096      	movs	r0, #150	; 0x96
 80028f2:	f7fe f939 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe f936 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 80028fc:	20a1      	movs	r0, #161	; 0xa1
 80028fe:	f7fe f933 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe f930 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002908:	20b5      	movs	r0, #181	; 0xb5
 800290a:	f7fe f909 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 800290e:	2002      	movs	r0, #2
 8002910:	f7fe f92a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002914:	2000      	movs	r0, #0
 8002916:	f7fe f927 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800291a:	2003      	movs	r0, #3
 800291c:	f7fe f924 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002920:	2000      	movs	r0, #0
 8002922:	f7fe f921 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002926:	2004      	movs	r0, #4
 8002928:	f7fe f91e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292c:	2000      	movs	r0, #0
 800292e:	f7fe f91b 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8002932:	20b6      	movs	r0, #182	; 0xb6
 8002934:	f7fe f8f4 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002938:	2000      	movs	r0, #0
 800293a:	f7fe f915 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293e:	2000      	movs	r0, #0
 8002940:	f7fe f912 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8002944:	20b7      	movs	r0, #183	; 0xb7
 8002946:	f7fe f8eb 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800294a:	2000      	movs	r0, #0
 800294c:	f7fe f90c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002950:	2000      	movs	r0, #0
 8002952:	f7fe f909 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002956:	203f      	movs	r0, #63	; 0x3f
 8002958:	f7fe f906 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800295c:	2000      	movs	r0, #0
 800295e:	f7fe f903 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8002962:	205e      	movs	r0, #94	; 0x5e
 8002964:	f7fe f900 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002968:	2000      	movs	r0, #0
 800296a:	f7fe f8fd 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800296e:	2064      	movs	r0, #100	; 0x64
 8002970:	f7fe f8fa 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002974:	2000      	movs	r0, #0
 8002976:	f7fe f8f7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 800297a:	208c      	movs	r0, #140	; 0x8c
 800297c:	f7fe f8f4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002980:	2000      	movs	r0, #0
 8002982:	f7fe f8f1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8002986:	20ac      	movs	r0, #172	; 0xac
 8002988:	f7fe f8ee 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800298c:	2000      	movs	r0, #0
 800298e:	f7fe f8eb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002992:	20dc      	movs	r0, #220	; 0xdc
 8002994:	f7fe f8e8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002998:	2000      	movs	r0, #0
 800299a:	f7fe f8e5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 800299e:	2070      	movs	r0, #112	; 0x70
 80029a0:	f7fe f8e2 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7fe f8df 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 80029aa:	2090      	movs	r0, #144	; 0x90
 80029ac:	f7fe f8dc 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7fe f8d9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 80029b6:	20eb      	movs	r0, #235	; 0xeb
 80029b8:	f7fe f8d6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fe f8d3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80029c2:	20dc      	movs	r0, #220	; 0xdc
 80029c4:	f7fe f8d0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fe f8cd 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 80029ce:	20b8      	movs	r0, #184	; 0xb8
 80029d0:	f7fe f8a6 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fe f8c7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029da:	2000      	movs	r0, #0
 80029dc:	f7fe f8c4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7fe f8c1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7fe f8be 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7fe f8bb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fe f8b8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fe f8b5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f7fe f8b2 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002a04:	20ba      	movs	r0, #186	; 0xba
 8002a06:	f7fe f88b 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002a0a:	2024      	movs	r0, #36	; 0x24
 8002a0c:	f7fe f8ac 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe f8a9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7fe f8a6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7fe f8a3 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002a22:	20c1      	movs	r0, #193	; 0xc1
 8002a24:	f7fe f87c 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002a28:	2020      	movs	r0, #32
 8002a2a:	f7fe f89d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7fe f89a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002a34:	2054      	movs	r0, #84	; 0x54
 8002a36:	f7fe f897 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7fe f894 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002a40:	20ff      	movs	r0, #255	; 0xff
 8002a42:	f7fe f891 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7fe f88e 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002a4c:	20c2      	movs	r0, #194	; 0xc2
 8002a4e:	f7fe f867 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002a52:	200a      	movs	r0, #10
 8002a54:	f7fe f888 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fe f885 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002a5e:	2004      	movs	r0, #4
 8002a60:	f7fe f882 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe f87f 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002a6a:	20c3      	movs	r0, #195	; 0xc3
 8002a6c:	f7fe f858 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002a70:	203c      	movs	r0, #60	; 0x3c
 8002a72:	f7fe f879 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7fe f876 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002a7c:	203a      	movs	r0, #58	; 0x3a
 8002a7e:	f7fe f873 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7fe f870 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002a88:	2039      	movs	r0, #57	; 0x39
 8002a8a:	f7fe f86d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fe f86a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8002a94:	2037      	movs	r0, #55	; 0x37
 8002a96:	f7fe f867 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fe f864 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002aa0:	203c      	movs	r0, #60	; 0x3c
 8002aa2:	f7fe f861 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fe f85e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002aac:	2036      	movs	r0, #54	; 0x36
 8002aae:	f7fe f85b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7fe f858 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002ab8:	2032      	movs	r0, #50	; 0x32
 8002aba:	f7fe f855 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fe f852 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002ac4:	202f      	movs	r0, #47	; 0x2f
 8002ac6:	f7fe f84f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fe f84c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002ad0:	202c      	movs	r0, #44	; 0x2c
 8002ad2:	f7fe f849 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fe f846 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002adc:	2029      	movs	r0, #41	; 0x29
 8002ade:	f7fe f843 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7fe f840 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002ae8:	2026      	movs	r0, #38	; 0x26
 8002aea:	f7fe f83d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7fe f83a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002af4:	2024      	movs	r0, #36	; 0x24
 8002af6:	f7fe f837 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fe f834 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002b00:	2024      	movs	r0, #36	; 0x24
 8002b02:	f7fe f831 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7fe f82e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002b0c:	2023      	movs	r0, #35	; 0x23
 8002b0e:	f7fe f82b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fe f828 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002b18:	203c      	movs	r0, #60	; 0x3c
 8002b1a:	f7fe f825 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7fe f822 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b24:	2036      	movs	r0, #54	; 0x36
 8002b26:	f7fe f81f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fe f81c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002b30:	2032      	movs	r0, #50	; 0x32
 8002b32:	f7fe f819 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7fe f816 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002b3c:	202f      	movs	r0, #47	; 0x2f
 8002b3e:	f7fe f813 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7fe f810 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002b48:	202c      	movs	r0, #44	; 0x2c
 8002b4a:	f7fe f80d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fe f80a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002b54:	2029      	movs	r0, #41	; 0x29
 8002b56:	f7fe f807 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7fe f804 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002b60:	2026      	movs	r0, #38	; 0x26
 8002b62:	f7fe f801 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f7fd fffe 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002b6c:	2024      	movs	r0, #36	; 0x24
 8002b6e:	f7fd fffb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7fd fff8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002b78:	2024      	movs	r0, #36	; 0x24
 8002b7a:	f7fd fff5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7fd fff2 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002b84:	2023      	movs	r0, #35	; 0x23
 8002b86:	f7fd ffef 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f7fd ffec 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002b90:	20c4      	movs	r0, #196	; 0xc4
 8002b92:	f7fd ffc5 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002b96:	2062      	movs	r0, #98	; 0x62
 8002b98:	f7fd ffe6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fd ffe3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002ba2:	2005      	movs	r0, #5
 8002ba4:	f7fd ffe0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fd ffdd 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002bae:	2084      	movs	r0, #132	; 0x84
 8002bb0:	f7fd ffda 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fd ffd7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002bba:	20f0      	movs	r0, #240	; 0xf0
 8002bbc:	f7fd ffd4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7fd ffd1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002bc6:	2018      	movs	r0, #24
 8002bc8:	f7fd ffce 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fd ffcb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002bd2:	20a4      	movs	r0, #164	; 0xa4
 8002bd4:	f7fd ffc8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fd ffc5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002bde:	2018      	movs	r0, #24
 8002be0:	f7fd ffc2 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fd ffbf 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002bea:	2050      	movs	r0, #80	; 0x50
 8002bec:	f7fd ffbc 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7fd ffb9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002bf6:	200c      	movs	r0, #12
 8002bf8:	f7fd ffb6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f7fd ffb3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002c02:	2017      	movs	r0, #23
 8002c04:	f7fd ffb0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7fd ffad 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002c0e:	2095      	movs	r0, #149	; 0x95
 8002c10:	f7fd ffaa 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fd ffa7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c1a:	20f3      	movs	r0, #243	; 0xf3
 8002c1c:	f7fd ffa4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7fd ffa1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002c26:	20e6      	movs	r0, #230	; 0xe6
 8002c28:	f7fd ff9e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7fd ff9b 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002c32:	20c5      	movs	r0, #197	; 0xc5
 8002c34:	f7fd ff74 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002c38:	2032      	movs	r0, #50	; 0x32
 8002c3a:	f7fd ff95 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f7fd ff92 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002c44:	2044      	movs	r0, #68	; 0x44
 8002c46:	f7fd ff8f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7fd ff8c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002c50:	2065      	movs	r0, #101	; 0x65
 8002c52:	f7fd ff89 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f7fd ff86 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002c5c:	2076      	movs	r0, #118	; 0x76
 8002c5e:	f7fd ff83 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c62:	2000      	movs	r0, #0
 8002c64:	f7fd ff80 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002c68:	2088      	movs	r0, #136	; 0x88
 8002c6a:	f7fd ff7d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f7fd ff7a 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002c74:	20c6      	movs	r0, #198	; 0xc6
 8002c76:	f7fd ff53 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002c7a:	2020      	movs	r0, #32
 8002c7c:	f7fd ff74 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fd ff71 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002c86:	2017      	movs	r0, #23
 8002c88:	f7fd ff6e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7fd ff6b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002c92:	2001      	movs	r0, #1
 8002c94:	f7fd ff68 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f7fd ff65 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002c9e:	20c7      	movs	r0, #199	; 0xc7
 8002ca0:	f7fd ff3e 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7fd ff5f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fd ff5c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7fd ff59 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fd ff56 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002cbc:	20c8      	movs	r0, #200	; 0xc8
 8002cbe:	f7fd ff2f 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7fd ff50 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f7fd ff4d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fd ff4a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f7fd ff47 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002cda:	20c9      	movs	r0, #201	; 0xc9
 8002cdc:	f7fd ff20 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7fd ff41 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fd ff3e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cec:	2000      	movs	r0, #0
 8002cee:	f7fd ff3b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7fd ff38 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7fd ff35 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7fd ff32 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7fd ff2f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7fd ff2c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7fd ff29 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fd ff26 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f7fd ff23 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7fd ff20 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7fd ff1d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f7fd ff1a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7fd ff17 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f7fd ff14 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002d40:	20e0      	movs	r0, #224	; 0xe0
 8002d42:	f7fd feed 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002d46:	2016      	movs	r0, #22
 8002d48:	f7fd ff0e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7fd ff0b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002d52:	201c      	movs	r0, #28
 8002d54:	f7fd ff08 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fd ff05 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002d5e:	2021      	movs	r0, #33	; 0x21
 8002d60:	f7fd ff02 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7fd feff 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002d6a:	2036      	movs	r0, #54	; 0x36
 8002d6c:	f7fd fefc 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fd fef9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002d76:	2046      	movs	r0, #70	; 0x46
 8002d78:	f7fd fef6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fd fef3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002d82:	2052      	movs	r0, #82	; 0x52
 8002d84:	f7fd fef0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fd feed 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002d8e:	2064      	movs	r0, #100	; 0x64
 8002d90:	f7fd feea 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fd fee7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002d9a:	207a      	movs	r0, #122	; 0x7a
 8002d9c:	f7fd fee4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f7fd fee1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002da6:	208b      	movs	r0, #139	; 0x8b
 8002da8:	f7fd fede 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fd fedb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002db2:	2099      	movs	r0, #153	; 0x99
 8002db4:	f7fd fed8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7fd fed5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002dbe:	20a8      	movs	r0, #168	; 0xa8
 8002dc0:	f7fd fed2 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7fd fecf 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002dca:	20b9      	movs	r0, #185	; 0xb9
 8002dcc:	f7fd fecc 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7fd fec9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002dd6:	20c4      	movs	r0, #196	; 0xc4
 8002dd8:	f7fd fec6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7fd fec3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002de2:	20ca      	movs	r0, #202	; 0xca
 8002de4:	f7fd fec0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de8:	2000      	movs	r0, #0
 8002dea:	f7fd febd 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002dee:	20d2      	movs	r0, #210	; 0xd2
 8002df0:	f7fd feba 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fd feb7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002dfa:	20d9      	movs	r0, #217	; 0xd9
 8002dfc:	f7fd feb4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fd feb1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002e06:	20e0      	movs	r0, #224	; 0xe0
 8002e08:	f7fd feae 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7fd feab 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e12:	20f3      	movs	r0, #243	; 0xf3
 8002e14:	f7fd fea8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7fd fea5 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002e1e:	20e1      	movs	r0, #225	; 0xe1
 8002e20:	f7fd fe7e 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002e24:	2016      	movs	r0, #22
 8002e26:	f7fd fe9f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fd fe9c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002e30:	201c      	movs	r0, #28
 8002e32:	f7fd fe99 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7fd fe96 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002e3c:	2022      	movs	r0, #34	; 0x22
 8002e3e:	f7fd fe93 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7fd fe90 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002e48:	2036      	movs	r0, #54	; 0x36
 8002e4a:	f7fd fe8d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fd fe8a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002e54:	2045      	movs	r0, #69	; 0x45
 8002e56:	f7fd fe87 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fd fe84 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002e60:	2052      	movs	r0, #82	; 0x52
 8002e62:	f7fd fe81 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7fd fe7e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002e6c:	2064      	movs	r0, #100	; 0x64
 8002e6e:	f7fd fe7b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fd fe78 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002e78:	207a      	movs	r0, #122	; 0x7a
 8002e7a:	f7fd fe75 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fd fe72 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002e84:	208b      	movs	r0, #139	; 0x8b
 8002e86:	f7fd fe6f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fd fe6c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e90:	2099      	movs	r0, #153	; 0x99
 8002e92:	f7fd fe69 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7fd fe66 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002e9c:	20a8      	movs	r0, #168	; 0xa8
 8002e9e:	f7fd fe63 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fd fe60 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002ea8:	20b9      	movs	r0, #185	; 0xb9
 8002eaa:	f7fd fe5d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7fd fe5a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002eb4:	20c4      	movs	r0, #196	; 0xc4
 8002eb6:	f7fd fe57 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fd fe54 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002ec0:	20ca      	movs	r0, #202	; 0xca
 8002ec2:	f7fd fe51 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f7fd fe4e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002ecc:	20d2      	movs	r0, #210	; 0xd2
 8002ece:	f7fd fe4b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7fd fe48 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002ed8:	20d8      	movs	r0, #216	; 0xd8
 8002eda:	f7fd fe45 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7fd fe42 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002ee4:	20e0      	movs	r0, #224	; 0xe0
 8002ee6:	f7fd fe3f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eea:	2000      	movs	r0, #0
 8002eec:	f7fd fe3c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002ef0:	20f3      	movs	r0, #243	; 0xf3
 8002ef2:	f7fd fe39 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7fd fe36 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002efc:	20e2      	movs	r0, #226	; 0xe2
 8002efe:	f7fd fe0f 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002f02:	2005      	movs	r0, #5
 8002f04:	f7fd fe30 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7fd fe2d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002f0e:	200b      	movs	r0, #11
 8002f10:	f7fd fe2a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7fd fe27 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002f1a:	201b      	movs	r0, #27
 8002f1c:	f7fd fe24 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fd fe21 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002f26:	2034      	movs	r0, #52	; 0x34
 8002f28:	f7fd fe1e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7fd fe1b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002f32:	2044      	movs	r0, #68	; 0x44
 8002f34:	f7fd fe18 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7fd fe15 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002f3e:	204f      	movs	r0, #79	; 0x4f
 8002f40:	f7fd fe12 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7fd fe0f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002f4a:	2061      	movs	r0, #97	; 0x61
 8002f4c:	f7fd fe0c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fd fe09 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002f56:	2079      	movs	r0, #121	; 0x79
 8002f58:	f7fd fe06 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fd fe03 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002f62:	2088      	movs	r0, #136	; 0x88
 8002f64:	f7fd fe00 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fd fdfd 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002f6e:	2097      	movs	r0, #151	; 0x97
 8002f70:	f7fd fdfa 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fd fdf7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002f7a:	20a6      	movs	r0, #166	; 0xa6
 8002f7c:	f7fd fdf4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fd fdf1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002f86:	20b7      	movs	r0, #183	; 0xb7
 8002f88:	f7fd fdee 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7fd fdeb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002f92:	20c2      	movs	r0, #194	; 0xc2
 8002f94:	f7fd fde8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7fd fde5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002f9e:	20c7      	movs	r0, #199	; 0xc7
 8002fa0:	f7fd fde2 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7fd fddf 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002faa:	20d1      	movs	r0, #209	; 0xd1
 8002fac:	f7fd fddc 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7fd fdd9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002fb6:	20d6      	movs	r0, #214	; 0xd6
 8002fb8:	f7fd fdd6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7fd fdd3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002fc2:	20dd      	movs	r0, #221	; 0xdd
 8002fc4:	f7fd fdd0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f7fd fdcd 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002fce:	20f3      	movs	r0, #243	; 0xf3
 8002fd0:	f7fd fdca 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7fd fdc7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002fda:	20e3      	movs	r0, #227	; 0xe3
 8002fdc:	f7fd fda0 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002fe0:	2005      	movs	r0, #5
 8002fe2:	f7fd fdc1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fd fdbe 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002fec:	200a      	movs	r0, #10
 8002fee:	f7fd fdbb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7fd fdb8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002ff8:	201c      	movs	r0, #28
 8002ffa:	f7fd fdb5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ffe:	2000      	movs	r0, #0
 8003000:	f7fd fdb2 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003004:	2033      	movs	r0, #51	; 0x33
 8003006:	f7fd fdaf 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300a:	2000      	movs	r0, #0
 800300c:	f7fd fdac 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003010:	2044      	movs	r0, #68	; 0x44
 8003012:	f7fd fda9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003016:	2000      	movs	r0, #0
 8003018:	f7fd fda6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 800301c:	2050      	movs	r0, #80	; 0x50
 800301e:	f7fd fda3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003022:	2000      	movs	r0, #0
 8003024:	f7fd fda0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8003028:	2062      	movs	r0, #98	; 0x62
 800302a:	f7fd fd9d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800302e:	2000      	movs	r0, #0
 8003030:	f7fd fd9a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8003034:	2078      	movs	r0, #120	; 0x78
 8003036:	f7fd fd97 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303a:	2000      	movs	r0, #0
 800303c:	f7fd fd94 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003040:	2088      	movs	r0, #136	; 0x88
 8003042:	f7fd fd91 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003046:	2000      	movs	r0, #0
 8003048:	f7fd fd8e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 800304c:	2097      	movs	r0, #151	; 0x97
 800304e:	f7fd fd8b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003052:	2000      	movs	r0, #0
 8003054:	f7fd fd88 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8003058:	20a6      	movs	r0, #166	; 0xa6
 800305a:	f7fd fd85 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305e:	2000      	movs	r0, #0
 8003060:	f7fd fd82 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8003064:	20b7      	movs	r0, #183	; 0xb7
 8003066:	f7fd fd7f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800306a:	2000      	movs	r0, #0
 800306c:	f7fd fd7c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8003070:	20c2      	movs	r0, #194	; 0xc2
 8003072:	f7fd fd79 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003076:	2000      	movs	r0, #0
 8003078:	f7fd fd76 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 800307c:	20c7      	movs	r0, #199	; 0xc7
 800307e:	f7fd fd73 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003082:	2000      	movs	r0, #0
 8003084:	f7fd fd70 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003088:	20d1      	movs	r0, #209	; 0xd1
 800308a:	f7fd fd6d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308e:	2000      	movs	r0, #0
 8003090:	f7fd fd6a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8003094:	20d5      	movs	r0, #213	; 0xd5
 8003096:	f7fd fd67 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800309a:	2000      	movs	r0, #0
 800309c:	f7fd fd64 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80030a0:	20dd      	movs	r0, #221	; 0xdd
 80030a2:	f7fd fd61 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f7fd fd5e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80030ac:	20f3      	movs	r0, #243	; 0xf3
 80030ae:	f7fd fd5b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7fd fd58 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 80030b8:	20e4      	movs	r0, #228	; 0xe4
 80030ba:	f7fd fd31 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80030be:	2001      	movs	r0, #1
 80030c0:	f7fd fd52 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fd fd4f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f7fd fd4c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d0:	2000      	movs	r0, #0
 80030d2:	f7fd fd49 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80030d6:	2002      	movs	r0, #2
 80030d8:	f7fd fd46 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030dc:	2000      	movs	r0, #0
 80030de:	f7fd fd43 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80030e2:	202a      	movs	r0, #42	; 0x2a
 80030e4:	f7fd fd40 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7fd fd3d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80030ee:	203c      	movs	r0, #60	; 0x3c
 80030f0:	f7fd fd3a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7fd fd37 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 80030fa:	204b      	movs	r0, #75	; 0x4b
 80030fc:	f7fd fd34 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003100:	2000      	movs	r0, #0
 8003102:	f7fd fd31 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003106:	205d      	movs	r0, #93	; 0x5d
 8003108:	f7fd fd2e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310c:	2000      	movs	r0, #0
 800310e:	f7fd fd2b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003112:	2074      	movs	r0, #116	; 0x74
 8003114:	f7fd fd28 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003118:	2000      	movs	r0, #0
 800311a:	f7fd fd25 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800311e:	2084      	movs	r0, #132	; 0x84
 8003120:	f7fd fd22 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003124:	2000      	movs	r0, #0
 8003126:	f7fd fd1f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 800312a:	2093      	movs	r0, #147	; 0x93
 800312c:	f7fd fd1c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003130:	2000      	movs	r0, #0
 8003132:	f7fd fd19 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003136:	20a2      	movs	r0, #162	; 0xa2
 8003138:	f7fd fd16 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800313c:	2000      	movs	r0, #0
 800313e:	f7fd fd13 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003142:	20b3      	movs	r0, #179	; 0xb3
 8003144:	f7fd fd10 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003148:	2000      	movs	r0, #0
 800314a:	f7fd fd0d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800314e:	20be      	movs	r0, #190	; 0xbe
 8003150:	f7fd fd0a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003154:	2000      	movs	r0, #0
 8003156:	f7fd fd07 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800315a:	20c4      	movs	r0, #196	; 0xc4
 800315c:	f7fd fd04 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003160:	2000      	movs	r0, #0
 8003162:	f7fd fd01 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8003166:	20cd      	movs	r0, #205	; 0xcd
 8003168:	f7fd fcfe 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800316c:	2000      	movs	r0, #0
 800316e:	f7fd fcfb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8003172:	20d3      	movs	r0, #211	; 0xd3
 8003174:	f7fd fcf8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003178:	2000      	movs	r0, #0
 800317a:	f7fd fcf5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 800317e:	20dd      	movs	r0, #221	; 0xdd
 8003180:	f7fd fcf2 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003184:	2000      	movs	r0, #0
 8003186:	f7fd fcef 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800318a:	20f3      	movs	r0, #243	; 0xf3
 800318c:	f7fd fcec 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003190:	2000      	movs	r0, #0
 8003192:	f7fd fce9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8003196:	20e5      	movs	r0, #229	; 0xe5
 8003198:	f7fd fcc2 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800319c:	2000      	movs	r0, #0
 800319e:	f7fd fce3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7fd fce0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7fd fcdd 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f7fd fcda 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80031b4:	2002      	movs	r0, #2
 80031b6:	f7fd fcd7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fd fcd4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80031c0:	2029      	movs	r0, #41	; 0x29
 80031c2:	f7fd fcd1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7fd fcce 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80031cc:	203c      	movs	r0, #60	; 0x3c
 80031ce:	f7fd fccb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7fd fcc8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 80031d8:	204b      	movs	r0, #75	; 0x4b
 80031da:	f7fd fcc5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031de:	2000      	movs	r0, #0
 80031e0:	f7fd fcc2 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80031e4:	205d      	movs	r0, #93	; 0x5d
 80031e6:	f7fd fcbf 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ea:	2000      	movs	r0, #0
 80031ec:	f7fd fcbc 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 80031f0:	2074      	movs	r0, #116	; 0x74
 80031f2:	f7fd fcb9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fd fcb6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80031fc:	2084      	movs	r0, #132	; 0x84
 80031fe:	f7fd fcb3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003202:	2000      	movs	r0, #0
 8003204:	f7fd fcb0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003208:	2093      	movs	r0, #147	; 0x93
 800320a:	f7fd fcad 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320e:	2000      	movs	r0, #0
 8003210:	f7fd fcaa 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003214:	20a2      	movs	r0, #162	; 0xa2
 8003216:	f7fd fca7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800321a:	2000      	movs	r0, #0
 800321c:	f7fd fca4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003220:	20b3      	movs	r0, #179	; 0xb3
 8003222:	f7fd fca1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003226:	2000      	movs	r0, #0
 8003228:	f7fd fc9e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800322c:	20be      	movs	r0, #190	; 0xbe
 800322e:	f7fd fc9b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003232:	2000      	movs	r0, #0
 8003234:	f7fd fc98 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003238:	20c4      	movs	r0, #196	; 0xc4
 800323a:	f7fd fc95 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323e:	2000      	movs	r0, #0
 8003240:	f7fd fc92 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8003244:	20cd      	movs	r0, #205	; 0xcd
 8003246:	f7fd fc8f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800324a:	2000      	movs	r0, #0
 800324c:	f7fd fc8c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8003250:	20d3      	movs	r0, #211	; 0xd3
 8003252:	f7fd fc89 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003256:	2000      	movs	r0, #0
 8003258:	f7fd fc86 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800325c:	20dc      	movs	r0, #220	; 0xdc
 800325e:	f7fd fc83 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003262:	2000      	movs	r0, #0
 8003264:	f7fd fc80 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003268:	20f3      	movs	r0, #243	; 0xf3
 800326a:	f7fd fc7d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800326e:	2000      	movs	r0, #0
 8003270:	f7fd fc7a 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8003274:	20e6      	movs	r0, #230	; 0xe6
 8003276:	f7fd fc53 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 800327a:	2011      	movs	r0, #17
 800327c:	f7fd fc74 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003280:	2000      	movs	r0, #0
 8003282:	f7fd fc71 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8003286:	2034      	movs	r0, #52	; 0x34
 8003288:	f7fd fc6e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328c:	2000      	movs	r0, #0
 800328e:	f7fd fc6b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003292:	2056      	movs	r0, #86	; 0x56
 8003294:	f7fd fc68 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003298:	2000      	movs	r0, #0
 800329a:	f7fd fc65 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800329e:	2076      	movs	r0, #118	; 0x76
 80032a0:	f7fd fc62 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a4:	2000      	movs	r0, #0
 80032a6:	f7fd fc5f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80032aa:	2077      	movs	r0, #119	; 0x77
 80032ac:	f7fd fc5c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7fd fc59 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80032b6:	2066      	movs	r0, #102	; 0x66
 80032b8:	f7fd fc56 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f7fd fc53 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80032c2:	2088      	movs	r0, #136	; 0x88
 80032c4:	f7fd fc50 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fd fc4d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80032ce:	2099      	movs	r0, #153	; 0x99
 80032d0:	f7fd fc4a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7fd fc47 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80032da:	20bb      	movs	r0, #187	; 0xbb
 80032dc:	f7fd fc44 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7fd fc41 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80032e6:	2099      	movs	r0, #153	; 0x99
 80032e8:	f7fd fc3e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7fd fc3b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80032f2:	2066      	movs	r0, #102	; 0x66
 80032f4:	f7fd fc38 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7fd fc35 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032fe:	2055      	movs	r0, #85	; 0x55
 8003300:	f7fd fc32 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003304:	2000      	movs	r0, #0
 8003306:	f7fd fc2f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800330a:	2055      	movs	r0, #85	; 0x55
 800330c:	f7fd fc2c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003310:	2000      	movs	r0, #0
 8003312:	f7fd fc29 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003316:	2045      	movs	r0, #69	; 0x45
 8003318:	f7fd fc26 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800331c:	2000      	movs	r0, #0
 800331e:	f7fd fc23 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8003322:	2043      	movs	r0, #67	; 0x43
 8003324:	f7fd fc20 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003328:	2000      	movs	r0, #0
 800332a:	f7fd fc1d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800332e:	2044      	movs	r0, #68	; 0x44
 8003330:	f7fd fc1a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003334:	2000      	movs	r0, #0
 8003336:	f7fd fc17 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 800333a:	20e7      	movs	r0, #231	; 0xe7
 800333c:	f7fd fbf0 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003340:	2032      	movs	r0, #50	; 0x32
 8003342:	f7fd fc11 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003346:	2000      	movs	r0, #0
 8003348:	f7fd fc0e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800334c:	2055      	movs	r0, #85	; 0x55
 800334e:	f7fd fc0b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003352:	2000      	movs	r0, #0
 8003354:	f7fd fc08 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003358:	2076      	movs	r0, #118	; 0x76
 800335a:	f7fd fc05 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800335e:	2000      	movs	r0, #0
 8003360:	f7fd fc02 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003364:	2066      	movs	r0, #102	; 0x66
 8003366:	f7fd fbff 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336a:	2000      	movs	r0, #0
 800336c:	f7fd fbfc 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003370:	2067      	movs	r0, #103	; 0x67
 8003372:	f7fd fbf9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003376:	2000      	movs	r0, #0
 8003378:	f7fd fbf6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 800337c:	2067      	movs	r0, #103	; 0x67
 800337e:	f7fd fbf3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003382:	2000      	movs	r0, #0
 8003384:	f7fd fbf0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003388:	2087      	movs	r0, #135	; 0x87
 800338a:	f7fd fbed 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800338e:	2000      	movs	r0, #0
 8003390:	f7fd fbea 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003394:	2099      	movs	r0, #153	; 0x99
 8003396:	f7fd fbe7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339a:	2000      	movs	r0, #0
 800339c:	f7fd fbe4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80033a0:	20bb      	movs	r0, #187	; 0xbb
 80033a2:	f7fd fbe1 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7fd fbde 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80033ac:	2099      	movs	r0, #153	; 0x99
 80033ae:	f7fd fbdb 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f7fd fbd8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80033b8:	2077      	movs	r0, #119	; 0x77
 80033ba:	f7fd fbd5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033be:	2000      	movs	r0, #0
 80033c0:	f7fd fbd2 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80033c4:	2044      	movs	r0, #68	; 0x44
 80033c6:	f7fd fbcf 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fd fbcc 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80033d0:	2056      	movs	r0, #86	; 0x56
 80033d2:	f7fd fbc9 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fd fbc6 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80033dc:	2023      	movs	r0, #35	; 0x23
 80033de:	f7fd fbc3 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fd fbc0 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80033e8:	2033      	movs	r0, #51	; 0x33
 80033ea:	f7fd fbbd 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f7fd fbba 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80033f4:	2045      	movs	r0, #69	; 0x45
 80033f6:	f7fd fbb7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033fa:	2000      	movs	r0, #0
 80033fc:	f7fd fbb4 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003400:	20e8      	movs	r0, #232	; 0xe8
 8003402:	f7fd fb8d 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003406:	2000      	movs	r0, #0
 8003408:	f7fd fbae 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340c:	2000      	movs	r0, #0
 800340e:	f7fd fbab 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003412:	2099      	movs	r0, #153	; 0x99
 8003414:	f7fd fba8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003418:	2000      	movs	r0, #0
 800341a:	f7fd fba5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 800341e:	2087      	movs	r0, #135	; 0x87
 8003420:	f7fd fba2 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003424:	2000      	movs	r0, #0
 8003426:	f7fd fb9f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800342a:	2088      	movs	r0, #136	; 0x88
 800342c:	f7fd fb9c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003430:	2000      	movs	r0, #0
 8003432:	f7fd fb99 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003436:	2077      	movs	r0, #119	; 0x77
 8003438:	f7fd fb96 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800343c:	2000      	movs	r0, #0
 800343e:	f7fd fb93 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003442:	2066      	movs	r0, #102	; 0x66
 8003444:	f7fd fb90 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003448:	2000      	movs	r0, #0
 800344a:	f7fd fb8d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800344e:	2088      	movs	r0, #136	; 0x88
 8003450:	f7fd fb8a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003454:	2000      	movs	r0, #0
 8003456:	f7fd fb87 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 800345a:	20aa      	movs	r0, #170	; 0xaa
 800345c:	f7fd fb84 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003460:	2000      	movs	r0, #0
 8003462:	f7fd fb81 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003466:	20bb      	movs	r0, #187	; 0xbb
 8003468:	f7fd fb7e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800346c:	2000      	movs	r0, #0
 800346e:	f7fd fb7b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003472:	2099      	movs	r0, #153	; 0x99
 8003474:	f7fd fb78 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003478:	2000      	movs	r0, #0
 800347a:	f7fd fb75 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800347e:	2066      	movs	r0, #102	; 0x66
 8003480:	f7fd fb72 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003484:	2000      	movs	r0, #0
 8003486:	f7fd fb6f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800348a:	2055      	movs	r0, #85	; 0x55
 800348c:	f7fd fb6c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003490:	2000      	movs	r0, #0
 8003492:	f7fd fb69 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003496:	2055      	movs	r0, #85	; 0x55
 8003498:	f7fd fb66 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800349c:	2000      	movs	r0, #0
 800349e:	f7fd fb63 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80034a2:	2044      	movs	r0, #68	; 0x44
 80034a4:	f7fd fb60 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7fd fb5d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80034ae:	2044      	movs	r0, #68	; 0x44
 80034b0:	f7fd fb5a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034b4:	2000      	movs	r0, #0
 80034b6:	f7fd fb57 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80034ba:	2055      	movs	r0, #85	; 0x55
 80034bc:	f7fd fb54 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c0:	2000      	movs	r0, #0
 80034c2:	f7fd fb51 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 80034c6:	20e9      	movs	r0, #233	; 0xe9
 80034c8:	f7fd fb2a 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80034cc:	20aa      	movs	r0, #170	; 0xaa
 80034ce:	f7fd fb4b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034d2:	2000      	movs	r0, #0
 80034d4:	f7fd fb48 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034d8:	2000      	movs	r0, #0
 80034da:	f7fd fb45 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fd fb42 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 80034e4:	2000      	movs	r0, #0
 80034e6:	f7fd fb1b 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80034ea:	20aa      	movs	r0, #170	; 0xaa
 80034ec:	f7fd fb3c 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 80034f0:	20cf      	movs	r0, #207	; 0xcf
 80034f2:	f7fd fb15 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7fd fb36 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034fc:	2000      	movs	r0, #0
 80034fe:	f7fd fb33 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003502:	2000      	movs	r0, #0
 8003504:	f7fd fb30 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003508:	2000      	movs	r0, #0
 800350a:	f7fd fb2d 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800350e:	2000      	movs	r0, #0
 8003510:	f7fd fb2a 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003514:	2000      	movs	r0, #0
 8003516:	f7fd fb27 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800351a:	2000      	movs	r0, #0
 800351c:	f7fd fb24 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003520:	2000      	movs	r0, #0
 8003522:	f7fd fb21 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003526:	2000      	movs	r0, #0
 8003528:	f7fd fb1e 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800352c:	2000      	movs	r0, #0
 800352e:	f7fd fb1b 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003532:	2000      	movs	r0, #0
 8003534:	f7fd fb18 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003538:	2000      	movs	r0, #0
 800353a:	f7fd fb15 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800353e:	2000      	movs	r0, #0
 8003540:	f7fd fb12 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003544:	2000      	movs	r0, #0
 8003546:	f7fd fb0f 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800354a:	2000      	movs	r0, #0
 800354c:	f7fd fb0c 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003550:	2000      	movs	r0, #0
 8003552:	f7fd fb09 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003556:	2000      	movs	r0, #0
 8003558:	f7fd fb06 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 800355c:	20f0      	movs	r0, #240	; 0xf0
 800355e:	f7fd fadf 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003562:	2000      	movs	r0, #0
 8003564:	f7fd fb00 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003568:	2050      	movs	r0, #80	; 0x50
 800356a:	f7fd fafd 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800356e:	2000      	movs	r0, #0
 8003570:	f7fd fafa 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003574:	2000      	movs	r0, #0
 8003576:	f7fd faf7 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800357a:	2000      	movs	r0, #0
 800357c:	f7fd faf4 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003580:	20f3      	movs	r0, #243	; 0xf3
 8003582:	f7fd facd 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003586:	2000      	movs	r0, #0
 8003588:	f7fd faee 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 800358c:	20f9      	movs	r0, #249	; 0xf9
 800358e:	f7fd fac7 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8003592:	2006      	movs	r0, #6
 8003594:	f7fd fae8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003598:	2010      	movs	r0, #16
 800359a:	f7fd fae5 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800359e:	2029      	movs	r0, #41	; 0x29
 80035a0:	f7fd fae2 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a4:	2000      	movs	r0, #0
 80035a6:	f7fd fadf 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 80035aa:	203a      	movs	r0, #58	; 0x3a
 80035ac:	f7fd fab8 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 80035b0:	2055      	movs	r0, #85	; 0x55
 80035b2:	f7fd fad9 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 80035b6:	2011      	movs	r0, #17
 80035b8:	f7fd fab2 	bl	8000b20 <LCD_WR_REG>
		HAL_Delay(100);
 80035bc:	2064      	movs	r0, #100	; 0x64
 80035be:	f003 fbaf 	bl	8006d20 <HAL_Delay>
		LCD_WR_REG(0x29);
 80035c2:	2029      	movs	r0, #41	; 0x29
 80035c4:	f7fd faac 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 80035c8:	2035      	movs	r0, #53	; 0x35
 80035ca:	f7fd faa9 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80035ce:	2000      	movs	r0, #0
 80035d0:	f7fd faca 	bl	8000b68 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 80035d4:	2051      	movs	r0, #81	; 0x51
 80035d6:	f7fd faa3 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 80035da:	20ff      	movs	r0, #255	; 0xff
 80035dc:	f7fd fac4 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 80035e0:	2053      	movs	r0, #83	; 0x53
 80035e2:	f7fd fa9d 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 80035e6:	202c      	movs	r0, #44	; 0x2c
 80035e8:	f7fd fabe 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 80035ec:	2055      	movs	r0, #85	; 0x55
 80035ee:	f7fd fa97 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 80035f2:	2082      	movs	r0, #130	; 0x82
 80035f4:	f7fd fab8 	bl	8000b68 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 80035f8:	202c      	movs	r0, #44	; 0x2c
 80035fa:	f7fd fa91 	bl	8000b20 <LCD_WR_REG>
 80035fe:	f002 bca1 	b.w	8005f44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8003602:	4b04      	ldr	r3, [pc, #16]	; (8003614 <LCD_Init+0x1504>)
 8003604:	889b      	ldrh	r3, [r3, #4]
 8003606:	f245 5210 	movw	r2, #21776	; 0x5510
 800360a:	4293      	cmp	r3, r2
 800360c:	f040 8782 	bne.w	8004514 <LCD_Init+0x2404>
 8003610:	e002      	b.n	8003618 <LCD_Init+0x1508>
 8003612:	bf00      	nop
 8003614:	20000030 	.word	0x20000030
		LCD_WriteReg(0xF000, 0x55);
 8003618:	2155      	movs	r1, #85	; 0x55
 800361a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800361e:	f7fd fb0b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003622:	21aa      	movs	r1, #170	; 0xaa
 8003624:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003628:	f7fd fb06 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800362c:	2152      	movs	r1, #82	; 0x52
 800362e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003632:	f7fd fb01 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003636:	2108      	movs	r1, #8
 8003638:	f24f 0003 	movw	r0, #61443	; 0xf003
 800363c:	f7fd fafc 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003640:	2101      	movs	r1, #1
 8003642:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003646:	f7fd faf7 	bl	8000c38 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 800364a:	210d      	movs	r1, #13
 800364c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003650:	f7fd faf2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8003654:	210d      	movs	r1, #13
 8003656:	f24b 0001 	movw	r0, #45057	; 0xb001
 800365a:	f7fd faed 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 800365e:	210d      	movs	r1, #13
 8003660:	f24b 0002 	movw	r0, #45058	; 0xb002
 8003664:	f7fd fae8 	bl	8000c38 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003668:	2134      	movs	r1, #52	; 0x34
 800366a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800366e:	f7fd fae3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8003672:	2134      	movs	r1, #52	; 0x34
 8003674:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003678:	f7fd fade 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 800367c:	2134      	movs	r1, #52	; 0x34
 800367e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003682:	f7fd fad9 	bl	8000c38 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8003686:	210d      	movs	r1, #13
 8003688:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800368c:	f7fd fad4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003690:	210d      	movs	r1, #13
 8003692:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003696:	f7fd facf 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 800369a:	210d      	movs	r1, #13
 800369c:	f24b 1002 	movw	r0, #45314	; 0xb102
 80036a0:	f7fd faca 	bl	8000c38 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80036a4:	2134      	movs	r1, #52	; 0x34
 80036a6:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80036aa:	f7fd fac5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 80036ae:	2134      	movs	r1, #52	; 0x34
 80036b0:	f24b 7001 	movw	r0, #46849	; 0xb701
 80036b4:	f7fd fac0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 80036b8:	2134      	movs	r1, #52	; 0x34
 80036ba:	f24b 7002 	movw	r0, #46850	; 0xb702
 80036be:	f7fd fabb 	bl	8000c38 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 80036c2:	2100      	movs	r1, #0
 80036c4:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80036c8:	f7fd fab6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 80036cc:	2100      	movs	r1, #0
 80036ce:	f24b 2001 	movw	r0, #45569	; 0xb201
 80036d2:	f7fd fab1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 80036d6:	2100      	movs	r1, #0
 80036d8:	f24b 2002 	movw	r0, #45570	; 0xb202
 80036dc:	f7fd faac 	bl	8000c38 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 80036e0:	2124      	movs	r1, #36	; 0x24
 80036e2:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80036e6:	f7fd faa7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 80036ea:	2124      	movs	r1, #36	; 0x24
 80036ec:	f64b 0001 	movw	r0, #47105	; 0xb801
 80036f0:	f7fd faa2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 80036f4:	2124      	movs	r1, #36	; 0x24
 80036f6:	f64b 0002 	movw	r0, #47106	; 0xb802
 80036fa:	f7fd fa9d 	bl	8000c38 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 80036fe:	2101      	movs	r1, #1
 8003700:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003704:	f7fd fa98 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003708:	210f      	movs	r1, #15
 800370a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800370e:	f7fd fa93 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8003712:	210f      	movs	r1, #15
 8003714:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003718:	f7fd fa8e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 800371c:	210f      	movs	r1, #15
 800371e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003722:	f7fd fa89 	bl	8000c38 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8003726:	2134      	movs	r1, #52	; 0x34
 8003728:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800372c:	f7fd fa84 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003730:	2134      	movs	r1, #52	; 0x34
 8003732:	f64b 1001 	movw	r0, #47361	; 0xb901
 8003736:	f7fd fa7f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 800373a:	2134      	movs	r1, #52	; 0x34
 800373c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003740:	f7fd fa7a 	bl	8000c38 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8003744:	2108      	movs	r1, #8
 8003746:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 800374a:	f7fd fa75 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 800374e:	2108      	movs	r1, #8
 8003750:	f24b 5001 	movw	r0, #46337	; 0xb501
 8003754:	f7fd fa70 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003758:	2108      	movs	r1, #8
 800375a:	f24b 5002 	movw	r0, #46338	; 0xb502
 800375e:	f7fd fa6b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8003762:	2103      	movs	r1, #3
 8003764:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003768:	f7fd fa66 	bl	8000c38 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 800376c:	2124      	movs	r1, #36	; 0x24
 800376e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003772:	f7fd fa61 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8003776:	2124      	movs	r1, #36	; 0x24
 8003778:	f64b 2001 	movw	r0, #47617	; 0xba01
 800377c:	f7fd fa5c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003780:	2124      	movs	r1, #36	; 0x24
 8003782:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003786:	f7fd fa57 	bl	8000c38 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 800378a:	2100      	movs	r1, #0
 800378c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003790:	f7fd fa52 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8003794:	2178      	movs	r1, #120	; 0x78
 8003796:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800379a:	f7fd fa4d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800379e:	2100      	movs	r1, #0
 80037a0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80037a4:	f7fd fa48 	bl	8000c38 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 80037a8:	2100      	movs	r1, #0
 80037aa:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80037ae:	f7fd fa43 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 80037b2:	2178      	movs	r1, #120	; 0x78
 80037b4:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80037b8:	f7fd fa3e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 80037bc:	2100      	movs	r1, #0
 80037be:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80037c2:	f7fd fa39 	bl	8000c38 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 80037c6:	2100      	movs	r1, #0
 80037c8:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80037cc:	f7fd fa34 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 80037d0:	2164      	movs	r1, #100	; 0x64
 80037d2:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80037d6:	f7fd fa2f 	bl	8000c38 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 80037da:	2100      	movs	r1, #0
 80037dc:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80037e0:	f7fd fa2a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 80037e4:	2133      	movs	r1, #51	; 0x33
 80037e6:	f24d 1001 	movw	r0, #53505	; 0xd101
 80037ea:	f7fd fa25 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 80037ee:	2100      	movs	r1, #0
 80037f0:	f24d 1002 	movw	r0, #53506	; 0xd102
 80037f4:	f7fd fa20 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 80037f8:	2134      	movs	r1, #52	; 0x34
 80037fa:	f24d 1003 	movw	r0, #53507	; 0xd103
 80037fe:	f7fd fa1b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8003802:	2100      	movs	r1, #0
 8003804:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003808:	f7fd fa16 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 800380c:	213a      	movs	r1, #58	; 0x3a
 800380e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003812:	f7fd fa11 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8003816:	2100      	movs	r1, #0
 8003818:	f24d 1006 	movw	r0, #53510	; 0xd106
 800381c:	f7fd fa0c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003820:	214a      	movs	r1, #74	; 0x4a
 8003822:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003826:	f7fd fa07 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 800382a:	2100      	movs	r1, #0
 800382c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003830:	f7fd fa02 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8003834:	215c      	movs	r1, #92	; 0x5c
 8003836:	f24d 1009 	movw	r0, #53513	; 0xd109
 800383a:	f7fd f9fd 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 800383e:	2100      	movs	r1, #0
 8003840:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003844:	f7fd f9f8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003848:	2181      	movs	r1, #129	; 0x81
 800384a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 800384e:	f7fd f9f3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8003852:	2100      	movs	r1, #0
 8003854:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003858:	f7fd f9ee 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 800385c:	21a6      	movs	r1, #166	; 0xa6
 800385e:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8003862:	f7fd f9e9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8003866:	2100      	movs	r1, #0
 8003868:	f24d 100e 	movw	r0, #53518	; 0xd10e
 800386c:	f7fd f9e4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003870:	21e5      	movs	r1, #229	; 0xe5
 8003872:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8003876:	f7fd f9df 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 800387a:	2101      	movs	r1, #1
 800387c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003880:	f7fd f9da 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8003884:	2113      	movs	r1, #19
 8003886:	f24d 1011 	movw	r0, #53521	; 0xd111
 800388a:	f7fd f9d5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 800388e:	2101      	movs	r1, #1
 8003890:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003894:	f7fd f9d0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003898:	2154      	movs	r1, #84	; 0x54
 800389a:	f24d 1013 	movw	r0, #53523	; 0xd113
 800389e:	f7fd f9cb 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80038a2:	2101      	movs	r1, #1
 80038a4:	f24d 1014 	movw	r0, #53524	; 0xd114
 80038a8:	f7fd f9c6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 80038ac:	2182      	movs	r1, #130	; 0x82
 80038ae:	f24d 1015 	movw	r0, #53525	; 0xd115
 80038b2:	f7fd f9c1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 80038b6:	2101      	movs	r1, #1
 80038b8:	f24d 1016 	movw	r0, #53526	; 0xd116
 80038bc:	f7fd f9bc 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 80038c0:	21ca      	movs	r1, #202	; 0xca
 80038c2:	f24d 1017 	movw	r0, #53527	; 0xd117
 80038c6:	f7fd f9b7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 80038ca:	2102      	movs	r1, #2
 80038cc:	f24d 1018 	movw	r0, #53528	; 0xd118
 80038d0:	f7fd f9b2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 80038d4:	2100      	movs	r1, #0
 80038d6:	f24d 1019 	movw	r0, #53529	; 0xd119
 80038da:	f7fd f9ad 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 80038de:	2102      	movs	r1, #2
 80038e0:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80038e4:	f7fd f9a8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 80038e8:	2101      	movs	r1, #1
 80038ea:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80038ee:	f7fd f9a3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 80038f2:	2102      	movs	r1, #2
 80038f4:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80038f8:	f7fd f99e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 80038fc:	2134      	movs	r1, #52	; 0x34
 80038fe:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003902:	f7fd f999 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8003906:	2102      	movs	r1, #2
 8003908:	f24d 101e 	movw	r0, #53534	; 0xd11e
 800390c:	f7fd f994 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003910:	2167      	movs	r1, #103	; 0x67
 8003912:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003916:	f7fd f98f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 800391a:	2102      	movs	r1, #2
 800391c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003920:	f7fd f98a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8003924:	2184      	movs	r1, #132	; 0x84
 8003926:	f24d 1021 	movw	r0, #53537	; 0xd121
 800392a:	f7fd f985 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 800392e:	2102      	movs	r1, #2
 8003930:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003934:	f7fd f980 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003938:	21a4      	movs	r1, #164	; 0xa4
 800393a:	f24d 1023 	movw	r0, #53539	; 0xd123
 800393e:	f7fd f97b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8003942:	2102      	movs	r1, #2
 8003944:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003948:	f7fd f976 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 800394c:	21b7      	movs	r1, #183	; 0xb7
 800394e:	f24d 1025 	movw	r0, #53541	; 0xd125
 8003952:	f7fd f971 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8003956:	2102      	movs	r1, #2
 8003958:	f24d 1026 	movw	r0, #53542	; 0xd126
 800395c:	f7fd f96c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003960:	21cf      	movs	r1, #207	; 0xcf
 8003962:	f24d 1027 	movw	r0, #53543	; 0xd127
 8003966:	f7fd f967 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 800396a:	2102      	movs	r1, #2
 800396c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003970:	f7fd f962 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8003974:	21de      	movs	r1, #222	; 0xde
 8003976:	f24d 1029 	movw	r0, #53545	; 0xd129
 800397a:	f7fd f95d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 800397e:	2102      	movs	r1, #2
 8003980:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003984:	f7fd f958 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003988:	21f2      	movs	r1, #242	; 0xf2
 800398a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 800398e:	f7fd f953 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8003992:	2102      	movs	r1, #2
 8003994:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003998:	f7fd f94e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 800399c:	21fe      	movs	r1, #254	; 0xfe
 800399e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80039a2:	f7fd f949 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80039a6:	2103      	movs	r1, #3
 80039a8:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80039ac:	f7fd f944 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 80039b0:	2110      	movs	r1, #16
 80039b2:	f24d 102f 	movw	r0, #53551	; 0xd12f
 80039b6:	f7fd f93f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 80039ba:	2103      	movs	r1, #3
 80039bc:	f24d 1030 	movw	r0, #53552	; 0xd130
 80039c0:	f7fd f93a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 80039c4:	2133      	movs	r1, #51	; 0x33
 80039c6:	f24d 1031 	movw	r0, #53553	; 0xd131
 80039ca:	f7fd f935 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 80039ce:	2103      	movs	r1, #3
 80039d0:	f24d 1032 	movw	r0, #53554	; 0xd132
 80039d4:	f7fd f930 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 80039d8:	216d      	movs	r1, #109	; 0x6d
 80039da:	f24d 1033 	movw	r0, #53555	; 0xd133
 80039de:	f7fd f92b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 80039e2:	2100      	movs	r1, #0
 80039e4:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80039e8:	f7fd f926 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 80039ec:	2133      	movs	r1, #51	; 0x33
 80039ee:	f24d 2001 	movw	r0, #53761	; 0xd201
 80039f2:	f7fd f921 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 80039f6:	2100      	movs	r1, #0
 80039f8:	f24d 2002 	movw	r0, #53762	; 0xd202
 80039fc:	f7fd f91c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003a00:	2134      	movs	r1, #52	; 0x34
 8003a02:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003a06:	f7fd f917 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003a10:	f7fd f912 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003a14:	213a      	movs	r1, #58	; 0x3a
 8003a16:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003a1a:	f7fd f90d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003a1e:	2100      	movs	r1, #0
 8003a20:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003a24:	f7fd f908 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003a28:	214a      	movs	r1, #74	; 0x4a
 8003a2a:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003a2e:	f7fd f903 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003a32:	2100      	movs	r1, #0
 8003a34:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003a38:	f7fd f8fe 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003a3c:	215c      	movs	r1, #92	; 0x5c
 8003a3e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003a42:	f7fd f8f9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003a46:	2100      	movs	r1, #0
 8003a48:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003a4c:	f7fd f8f4 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003a50:	2181      	movs	r1, #129	; 0x81
 8003a52:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003a56:	f7fd f8ef 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003a60:	f7fd f8ea 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003a64:	21a6      	movs	r1, #166	; 0xa6
 8003a66:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003a6a:	f7fd f8e5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003a6e:	2100      	movs	r1, #0
 8003a70:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003a74:	f7fd f8e0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003a78:	21e5      	movs	r1, #229	; 0xe5
 8003a7a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003a7e:	f7fd f8db 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003a82:	2101      	movs	r1, #1
 8003a84:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003a88:	f7fd f8d6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003a8c:	2113      	movs	r1, #19
 8003a8e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003a92:	f7fd f8d1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8003a96:	2101      	movs	r1, #1
 8003a98:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003a9c:	f7fd f8cc 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003aa0:	2154      	movs	r1, #84	; 0x54
 8003aa2:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003aa6:	f7fd f8c7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003aaa:	2101      	movs	r1, #1
 8003aac:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003ab0:	f7fd f8c2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8003ab4:	2182      	movs	r1, #130	; 0x82
 8003ab6:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003aba:	f7fd f8bd 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003abe:	2101      	movs	r1, #1
 8003ac0:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003ac4:	f7fd f8b8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003ac8:	21ca      	movs	r1, #202	; 0xca
 8003aca:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003ace:	f7fd f8b3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003ad8:	f7fd f8ae 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003adc:	2100      	movs	r1, #0
 8003ade:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003ae2:	f7fd f8a9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003aec:	f7fd f8a4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003af0:	2101      	movs	r1, #1
 8003af2:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003af6:	f7fd f89f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003afa:	2102      	movs	r1, #2
 8003afc:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003b00:	f7fd f89a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003b04:	2134      	movs	r1, #52	; 0x34
 8003b06:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003b0a:	f7fd f895 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003b0e:	2102      	movs	r1, #2
 8003b10:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003b14:	f7fd f890 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003b18:	2167      	movs	r1, #103	; 0x67
 8003b1a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003b1e:	f7fd f88b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003b22:	2102      	movs	r1, #2
 8003b24:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003b28:	f7fd f886 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003b2c:	2184      	movs	r1, #132	; 0x84
 8003b2e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003b32:	f7fd f881 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003b36:	2102      	movs	r1, #2
 8003b38:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003b3c:	f7fd f87c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003b40:	21a4      	movs	r1, #164	; 0xa4
 8003b42:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003b46:	f7fd f877 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003b50:	f7fd f872 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003b54:	21b7      	movs	r1, #183	; 0xb7
 8003b56:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003b5a:	f7fd f86d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003b5e:	2102      	movs	r1, #2
 8003b60:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003b64:	f7fd f868 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003b68:	21cf      	movs	r1, #207	; 0xcf
 8003b6a:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003b6e:	f7fd f863 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003b72:	2102      	movs	r1, #2
 8003b74:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003b78:	f7fd f85e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003b7c:	21de      	movs	r1, #222	; 0xde
 8003b7e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003b82:	f7fd f859 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003b86:	2102      	movs	r1, #2
 8003b88:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003b8c:	f7fd f854 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003b90:	21f2      	movs	r1, #242	; 0xf2
 8003b92:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003b96:	f7fd f84f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003ba0:	f7fd f84a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003ba4:	21fe      	movs	r1, #254	; 0xfe
 8003ba6:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003baa:	f7fd f845 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003bae:	2103      	movs	r1, #3
 8003bb0:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003bb4:	f7fd f840 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003bb8:	2110      	movs	r1, #16
 8003bba:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003bbe:	f7fd f83b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003bc2:	2103      	movs	r1, #3
 8003bc4:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003bc8:	f7fd f836 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003bcc:	2133      	movs	r1, #51	; 0x33
 8003bce:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003bd2:	f7fd f831 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003bd6:	2103      	movs	r1, #3
 8003bd8:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003bdc:	f7fd f82c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003be0:	216d      	movs	r1, #109	; 0x6d
 8003be2:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003be6:	f7fd f827 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003bea:	2100      	movs	r1, #0
 8003bec:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003bf0:	f7fd f822 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003bf4:	2133      	movs	r1, #51	; 0x33
 8003bf6:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003bfa:	f7fd f81d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003bfe:	2100      	movs	r1, #0
 8003c00:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003c04:	f7fd f818 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003c08:	2134      	movs	r1, #52	; 0x34
 8003c0a:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003c0e:	f7fd f813 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003c12:	2100      	movs	r1, #0
 8003c14:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003c18:	f7fd f80e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003c1c:	213a      	movs	r1, #58	; 0x3a
 8003c1e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003c22:	f7fd f809 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003c26:	2100      	movs	r1, #0
 8003c28:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003c2c:	f7fd f804 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003c30:	214a      	movs	r1, #74	; 0x4a
 8003c32:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003c36:	f7fc ffff 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003c40:	f7fc fffa 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003c44:	215c      	movs	r1, #92	; 0x5c
 8003c46:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003c4a:	f7fc fff5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003c4e:	2100      	movs	r1, #0
 8003c50:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003c54:	f7fc fff0 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003c58:	2181      	movs	r1, #129	; 0x81
 8003c5a:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003c5e:	f7fc ffeb 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003c62:	2100      	movs	r1, #0
 8003c64:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003c68:	f7fc ffe6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003c6c:	21a6      	movs	r1, #166	; 0xa6
 8003c6e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003c72:	f7fc ffe1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003c76:	2100      	movs	r1, #0
 8003c78:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003c7c:	f7fc ffdc 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003c80:	21e5      	movs	r1, #229	; 0xe5
 8003c82:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003c86:	f7fc ffd7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003c90:	f7fc ffd2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003c94:	2113      	movs	r1, #19
 8003c96:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003c9a:	f7fc ffcd 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003ca4:	f7fc ffc8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003ca8:	2154      	movs	r1, #84	; 0x54
 8003caa:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003cae:	f7fc ffc3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003cb8:	f7fc ffbe 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003cbc:	2182      	movs	r1, #130	; 0x82
 8003cbe:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003cc2:	f7fc ffb9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003ccc:	f7fc ffb4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003cd0:	21ca      	movs	r1, #202	; 0xca
 8003cd2:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003cd6:	f7fc ffaf 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003cda:	2102      	movs	r1, #2
 8003cdc:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003ce0:	f7fc ffaa 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003cea:	f7fc ffa5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003cee:	2102      	movs	r1, #2
 8003cf0:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003cf4:	f7fc ffa0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003cfe:	f7fc ff9b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003d02:	2102      	movs	r1, #2
 8003d04:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003d08:	f7fc ff96 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003d0c:	2134      	movs	r1, #52	; 0x34
 8003d0e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003d12:	f7fc ff91 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003d16:	2102      	movs	r1, #2
 8003d18:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003d1c:	f7fc ff8c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003d20:	2167      	movs	r1, #103	; 0x67
 8003d22:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003d26:	f7fc ff87 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003d30:	f7fc ff82 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003d34:	2184      	movs	r1, #132	; 0x84
 8003d36:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003d3a:	f7fc ff7d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003d3e:	2102      	movs	r1, #2
 8003d40:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003d44:	f7fc ff78 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003d48:	21a4      	movs	r1, #164	; 0xa4
 8003d4a:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003d4e:	f7fc ff73 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003d52:	2102      	movs	r1, #2
 8003d54:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003d58:	f7fc ff6e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003d5c:	21b7      	movs	r1, #183	; 0xb7
 8003d5e:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003d62:	f7fc ff69 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003d66:	2102      	movs	r1, #2
 8003d68:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003d6c:	f7fc ff64 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003d70:	21cf      	movs	r1, #207	; 0xcf
 8003d72:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003d76:	f7fc ff5f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003d80:	f7fc ff5a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003d84:	21de      	movs	r1, #222	; 0xde
 8003d86:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003d8a:	f7fc ff55 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003d8e:	2102      	movs	r1, #2
 8003d90:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003d94:	f7fc ff50 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003d98:	21f2      	movs	r1, #242	; 0xf2
 8003d9a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003d9e:	f7fc ff4b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003da2:	2102      	movs	r1, #2
 8003da4:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003da8:	f7fc ff46 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003dac:	21fe      	movs	r1, #254	; 0xfe
 8003dae:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003db2:	f7fc ff41 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003db6:	2103      	movs	r1, #3
 8003db8:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003dbc:	f7fc ff3c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003dc0:	2110      	movs	r1, #16
 8003dc2:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003dc6:	f7fc ff37 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003dca:	2103      	movs	r1, #3
 8003dcc:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003dd0:	f7fc ff32 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003dd4:	2133      	movs	r1, #51	; 0x33
 8003dd6:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003dda:	f7fc ff2d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003dde:	2103      	movs	r1, #3
 8003de0:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003de4:	f7fc ff28 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003de8:	216d      	movs	r1, #109	; 0x6d
 8003dea:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003dee:	f7fc ff23 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003df2:	2100      	movs	r1, #0
 8003df4:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003df8:	f7fc ff1e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003dfc:	2133      	movs	r1, #51	; 0x33
 8003dfe:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003e02:	f7fc ff19 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003e06:	2100      	movs	r1, #0
 8003e08:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003e0c:	f7fc ff14 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003e10:	2134      	movs	r1, #52	; 0x34
 8003e12:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003e16:	f7fc ff0f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003e20:	f7fc ff0a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003e24:	213a      	movs	r1, #58	; 0x3a
 8003e26:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003e2a:	f7fc ff05 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003e2e:	2100      	movs	r1, #0
 8003e30:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003e34:	f7fc ff00 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003e38:	214a      	movs	r1, #74	; 0x4a
 8003e3a:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003e3e:	f7fc fefb 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003e42:	2100      	movs	r1, #0
 8003e44:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003e48:	f7fc fef6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003e4c:	215c      	movs	r1, #92	; 0x5c
 8003e4e:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003e52:	f7fc fef1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003e56:	2100      	movs	r1, #0
 8003e58:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003e5c:	f7fc feec 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003e60:	2181      	movs	r1, #129	; 0x81
 8003e62:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003e66:	f7fc fee7 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003e70:	f7fc fee2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003e74:	21a6      	movs	r1, #166	; 0xa6
 8003e76:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003e7a:	f7fc fedd 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003e7e:	2100      	movs	r1, #0
 8003e80:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003e84:	f7fc fed8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003e88:	21e5      	movs	r1, #229	; 0xe5
 8003e8a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003e8e:	f7fc fed3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003e92:	2101      	movs	r1, #1
 8003e94:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003e98:	f7fc fece 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003e9c:	2113      	movs	r1, #19
 8003e9e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003ea2:	f7fc fec9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003eac:	f7fc fec4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003eb0:	2154      	movs	r1, #84	; 0x54
 8003eb2:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003eb6:	f7fc febf 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003eba:	2101      	movs	r1, #1
 8003ebc:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003ec0:	f7fc feba 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003ec4:	2182      	movs	r1, #130	; 0x82
 8003ec6:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003eca:	f7fc feb5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003ece:	2101      	movs	r1, #1
 8003ed0:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003ed4:	f7fc feb0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003ed8:	21ca      	movs	r1, #202	; 0xca
 8003eda:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003ede:	f7fc feab 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003ee8:	f7fc fea6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003eec:	2100      	movs	r1, #0
 8003eee:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003ef2:	f7fc fea1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003efc:	f7fc fe9c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003f00:	2101      	movs	r1, #1
 8003f02:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003f06:	f7fc fe97 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003f10:	f7fc fe92 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003f14:	2134      	movs	r1, #52	; 0x34
 8003f16:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003f1a:	f7fc fe8d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003f1e:	2102      	movs	r1, #2
 8003f20:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003f24:	f7fc fe88 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003f28:	2167      	movs	r1, #103	; 0x67
 8003f2a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003f2e:	f7fc fe83 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003f32:	2102      	movs	r1, #2
 8003f34:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003f38:	f7fc fe7e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003f3c:	2184      	movs	r1, #132	; 0x84
 8003f3e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003f42:	f7fc fe79 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003f46:	2102      	movs	r1, #2
 8003f48:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003f4c:	f7fc fe74 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003f50:	21a4      	movs	r1, #164	; 0xa4
 8003f52:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003f56:	f7fc fe6f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003f60:	f7fc fe6a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003f64:	21b7      	movs	r1, #183	; 0xb7
 8003f66:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003f6a:	f7fc fe65 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003f6e:	2102      	movs	r1, #2
 8003f70:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003f74:	f7fc fe60 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003f78:	21cf      	movs	r1, #207	; 0xcf
 8003f7a:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003f7e:	f7fc fe5b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003f82:	2102      	movs	r1, #2
 8003f84:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003f88:	f7fc fe56 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003f8c:	21de      	movs	r1, #222	; 0xde
 8003f8e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003f92:	f7fc fe51 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003f96:	2102      	movs	r1, #2
 8003f98:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003f9c:	f7fc fe4c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003fa0:	21f2      	movs	r1, #242	; 0xf2
 8003fa2:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003fa6:	f7fc fe47 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003faa:	2102      	movs	r1, #2
 8003fac:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003fb0:	f7fc fe42 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003fb4:	21fe      	movs	r1, #254	; 0xfe
 8003fb6:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003fba:	f7fc fe3d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003fbe:	2103      	movs	r1, #3
 8003fc0:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003fc4:	f7fc fe38 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003fc8:	2110      	movs	r1, #16
 8003fca:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003fce:	f7fc fe33 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003fd2:	2103      	movs	r1, #3
 8003fd4:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003fd8:	f7fc fe2e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003fdc:	2133      	movs	r1, #51	; 0x33
 8003fde:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003fe2:	f7fc fe29 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003fe6:	2103      	movs	r1, #3
 8003fe8:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003fec:	f7fc fe24 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003ff0:	216d      	movs	r1, #109	; 0x6d
 8003ff2:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003ff6:	f7fc fe1f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8004000:	f7fc fe1a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8004004:	2133      	movs	r1, #51	; 0x33
 8004006:	f24d 5001 	movw	r0, #54529	; 0xd501
 800400a:	f7fc fe15 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 800400e:	2100      	movs	r1, #0
 8004010:	f24d 5002 	movw	r0, #54530	; 0xd502
 8004014:	f7fc fe10 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8004018:	2134      	movs	r1, #52	; 0x34
 800401a:	f24d 5003 	movw	r0, #54531	; 0xd503
 800401e:	f7fc fe0b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8004022:	2100      	movs	r1, #0
 8004024:	f24d 5004 	movw	r0, #54532	; 0xd504
 8004028:	f7fc fe06 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 800402c:	213a      	movs	r1, #58	; 0x3a
 800402e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8004032:	f7fc fe01 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8004036:	2100      	movs	r1, #0
 8004038:	f24d 5006 	movw	r0, #54534	; 0xd506
 800403c:	f7fc fdfc 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8004040:	214a      	movs	r1, #74	; 0x4a
 8004042:	f24d 5007 	movw	r0, #54535	; 0xd507
 8004046:	f7fc fdf7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 800404a:	2100      	movs	r1, #0
 800404c:	f24d 5008 	movw	r0, #54536	; 0xd508
 8004050:	f7fc fdf2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8004054:	215c      	movs	r1, #92	; 0x5c
 8004056:	f24d 5009 	movw	r0, #54537	; 0xd509
 800405a:	f7fc fded 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 800405e:	2100      	movs	r1, #0
 8004060:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8004064:	f7fc fde8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8004068:	2181      	movs	r1, #129	; 0x81
 800406a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 800406e:	f7fc fde3 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8004072:	2100      	movs	r1, #0
 8004074:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8004078:	f7fc fdde 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 800407c:	21a6      	movs	r1, #166	; 0xa6
 800407e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8004082:	f7fc fdd9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8004086:	2100      	movs	r1, #0
 8004088:	f24d 500e 	movw	r0, #54542	; 0xd50e
 800408c:	f7fc fdd4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8004090:	21e5      	movs	r1, #229	; 0xe5
 8004092:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8004096:	f7fc fdcf 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 800409a:	2101      	movs	r1, #1
 800409c:	f24d 5010 	movw	r0, #54544	; 0xd510
 80040a0:	f7fc fdca 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 80040a4:	2113      	movs	r1, #19
 80040a6:	f24d 5011 	movw	r0, #54545	; 0xd511
 80040aa:	f7fc fdc5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 80040ae:	2101      	movs	r1, #1
 80040b0:	f24d 5012 	movw	r0, #54546	; 0xd512
 80040b4:	f7fc fdc0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 80040b8:	2154      	movs	r1, #84	; 0x54
 80040ba:	f24d 5013 	movw	r0, #54547	; 0xd513
 80040be:	f7fc fdbb 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 80040c2:	2101      	movs	r1, #1
 80040c4:	f24d 5014 	movw	r0, #54548	; 0xd514
 80040c8:	f7fc fdb6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 80040cc:	2182      	movs	r1, #130	; 0x82
 80040ce:	f24d 5015 	movw	r0, #54549	; 0xd515
 80040d2:	f7fc fdb1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 80040d6:	2101      	movs	r1, #1
 80040d8:	f24d 5016 	movw	r0, #54550	; 0xd516
 80040dc:	f7fc fdac 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 80040e0:	21ca      	movs	r1, #202	; 0xca
 80040e2:	f24d 5017 	movw	r0, #54551	; 0xd517
 80040e6:	f7fc fda7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 80040ea:	2102      	movs	r1, #2
 80040ec:	f24d 5018 	movw	r0, #54552	; 0xd518
 80040f0:	f7fc fda2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 80040f4:	2100      	movs	r1, #0
 80040f6:	f24d 5019 	movw	r0, #54553	; 0xd519
 80040fa:	f7fc fd9d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 80040fe:	2102      	movs	r1, #2
 8004100:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8004104:	f7fc fd98 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8004108:	2101      	movs	r1, #1
 800410a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 800410e:	f7fc fd93 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8004112:	2102      	movs	r1, #2
 8004114:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8004118:	f7fc fd8e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 800411c:	2134      	movs	r1, #52	; 0x34
 800411e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8004122:	f7fc fd89 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8004126:	2102      	movs	r1, #2
 8004128:	f24d 501e 	movw	r0, #54558	; 0xd51e
 800412c:	f7fc fd84 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8004130:	2167      	movs	r1, #103	; 0x67
 8004132:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8004136:	f7fc fd7f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 800413a:	2102      	movs	r1, #2
 800413c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8004140:	f7fc fd7a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8004144:	2184      	movs	r1, #132	; 0x84
 8004146:	f24d 5021 	movw	r0, #54561	; 0xd521
 800414a:	f7fc fd75 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 800414e:	2102      	movs	r1, #2
 8004150:	f24d 5022 	movw	r0, #54562	; 0xd522
 8004154:	f7fc fd70 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8004158:	21a4      	movs	r1, #164	; 0xa4
 800415a:	f24d 5023 	movw	r0, #54563	; 0xd523
 800415e:	f7fc fd6b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8004162:	2102      	movs	r1, #2
 8004164:	f24d 5024 	movw	r0, #54564	; 0xd524
 8004168:	f7fc fd66 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 800416c:	21b7      	movs	r1, #183	; 0xb7
 800416e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8004172:	f7fc fd61 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8004176:	2102      	movs	r1, #2
 8004178:	f24d 5026 	movw	r0, #54566	; 0xd526
 800417c:	f7fc fd5c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8004180:	21cf      	movs	r1, #207	; 0xcf
 8004182:	f24d 5027 	movw	r0, #54567	; 0xd527
 8004186:	f7fc fd57 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 800418a:	2102      	movs	r1, #2
 800418c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8004190:	f7fc fd52 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8004194:	21de      	movs	r1, #222	; 0xde
 8004196:	f24d 5029 	movw	r0, #54569	; 0xd529
 800419a:	f7fc fd4d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 800419e:	2102      	movs	r1, #2
 80041a0:	f24d 502a 	movw	r0, #54570	; 0xd52a
 80041a4:	f7fc fd48 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 80041a8:	21f2      	movs	r1, #242	; 0xf2
 80041aa:	f24d 502b 	movw	r0, #54571	; 0xd52b
 80041ae:	f7fc fd43 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 80041b2:	2102      	movs	r1, #2
 80041b4:	f24d 502c 	movw	r0, #54572	; 0xd52c
 80041b8:	f7fc fd3e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 80041bc:	21fe      	movs	r1, #254	; 0xfe
 80041be:	f24d 502d 	movw	r0, #54573	; 0xd52d
 80041c2:	f7fc fd39 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 80041c6:	2103      	movs	r1, #3
 80041c8:	f24d 502e 	movw	r0, #54574	; 0xd52e
 80041cc:	f7fc fd34 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 80041d0:	2110      	movs	r1, #16
 80041d2:	f24d 502f 	movw	r0, #54575	; 0xd52f
 80041d6:	f7fc fd2f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 80041da:	2103      	movs	r1, #3
 80041dc:	f24d 5030 	movw	r0, #54576	; 0xd530
 80041e0:	f7fc fd2a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 80041e4:	2133      	movs	r1, #51	; 0x33
 80041e6:	f24d 5031 	movw	r0, #54577	; 0xd531
 80041ea:	f7fc fd25 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 80041ee:	2103      	movs	r1, #3
 80041f0:	f24d 5032 	movw	r0, #54578	; 0xd532
 80041f4:	f7fc fd20 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 80041f8:	216d      	movs	r1, #109	; 0x6d
 80041fa:	f24d 5033 	movw	r0, #54579	; 0xd533
 80041fe:	f7fc fd1b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8004202:	2100      	movs	r1, #0
 8004204:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004208:	f7fc fd16 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 800420c:	2133      	movs	r1, #51	; 0x33
 800420e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8004212:	f7fc fd11 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8004216:	2100      	movs	r1, #0
 8004218:	f24d 6002 	movw	r0, #54786	; 0xd602
 800421c:	f7fc fd0c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8004220:	2134      	movs	r1, #52	; 0x34
 8004222:	f24d 6003 	movw	r0, #54787	; 0xd603
 8004226:	f7fc fd07 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 800422a:	2100      	movs	r1, #0
 800422c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004230:	f7fc fd02 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8004234:	213a      	movs	r1, #58	; 0x3a
 8004236:	f24d 6005 	movw	r0, #54789	; 0xd605
 800423a:	f7fc fcfd 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 800423e:	2100      	movs	r1, #0
 8004240:	f24d 6006 	movw	r0, #54790	; 0xd606
 8004244:	f7fc fcf8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8004248:	214a      	movs	r1, #74	; 0x4a
 800424a:	f24d 6007 	movw	r0, #54791	; 0xd607
 800424e:	f7fc fcf3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8004252:	2100      	movs	r1, #0
 8004254:	f24d 6008 	movw	r0, #54792	; 0xd608
 8004258:	f7fc fcee 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 800425c:	215c      	movs	r1, #92	; 0x5c
 800425e:	f24d 6009 	movw	r0, #54793	; 0xd609
 8004262:	f7fc fce9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8004266:	2100      	movs	r1, #0
 8004268:	f24d 600a 	movw	r0, #54794	; 0xd60a
 800426c:	f7fc fce4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8004270:	2181      	movs	r1, #129	; 0x81
 8004272:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8004276:	f7fc fcdf 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 800427a:	2100      	movs	r1, #0
 800427c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004280:	f7fc fcda 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8004284:	21a6      	movs	r1, #166	; 0xa6
 8004286:	f24d 600d 	movw	r0, #54797	; 0xd60d
 800428a:	f7fc fcd5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 800428e:	2100      	movs	r1, #0
 8004290:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8004294:	f7fc fcd0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004298:	21e5      	movs	r1, #229	; 0xe5
 800429a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 800429e:	f7fc fccb 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 80042a2:	2101      	movs	r1, #1
 80042a4:	f24d 6010 	movw	r0, #54800	; 0xd610
 80042a8:	f7fc fcc6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 80042ac:	2113      	movs	r1, #19
 80042ae:	f24d 6011 	movw	r0, #54801	; 0xd611
 80042b2:	f7fc fcc1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 80042b6:	2101      	movs	r1, #1
 80042b8:	f24d 6012 	movw	r0, #54802	; 0xd612
 80042bc:	f7fc fcbc 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 80042c0:	2154      	movs	r1, #84	; 0x54
 80042c2:	f24d 6013 	movw	r0, #54803	; 0xd613
 80042c6:	f7fc fcb7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 80042ca:	2101      	movs	r1, #1
 80042cc:	f24d 6014 	movw	r0, #54804	; 0xd614
 80042d0:	f7fc fcb2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 80042d4:	2182      	movs	r1, #130	; 0x82
 80042d6:	f24d 6015 	movw	r0, #54805	; 0xd615
 80042da:	f7fc fcad 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 80042de:	2101      	movs	r1, #1
 80042e0:	f24d 6016 	movw	r0, #54806	; 0xd616
 80042e4:	f7fc fca8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 80042e8:	21ca      	movs	r1, #202	; 0xca
 80042ea:	f24d 6017 	movw	r0, #54807	; 0xd617
 80042ee:	f7fc fca3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 80042f2:	2102      	movs	r1, #2
 80042f4:	f24d 6018 	movw	r0, #54808	; 0xd618
 80042f8:	f7fc fc9e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 80042fc:	2100      	movs	r1, #0
 80042fe:	f24d 6019 	movw	r0, #54809	; 0xd619
 8004302:	f7fc fc99 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8004306:	2102      	movs	r1, #2
 8004308:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800430c:	f7fc fc94 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004310:	2101      	movs	r1, #1
 8004312:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8004316:	f7fc fc8f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 800431a:	2102      	movs	r1, #2
 800431c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004320:	f7fc fc8a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8004324:	2134      	movs	r1, #52	; 0x34
 8004326:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800432a:	f7fc fc85 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 800432e:	2102      	movs	r1, #2
 8004330:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8004334:	f7fc fc80 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8004338:	2167      	movs	r1, #103	; 0x67
 800433a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 800433e:	f7fc fc7b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8004342:	2102      	movs	r1, #2
 8004344:	f24d 6020 	movw	r0, #54816	; 0xd620
 8004348:	f7fc fc76 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 800434c:	2184      	movs	r1, #132	; 0x84
 800434e:	f24d 6021 	movw	r0, #54817	; 0xd621
 8004352:	f7fc fc71 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8004356:	2102      	movs	r1, #2
 8004358:	f24d 6022 	movw	r0, #54818	; 0xd622
 800435c:	f7fc fc6c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8004360:	21a4      	movs	r1, #164	; 0xa4
 8004362:	f24d 6023 	movw	r0, #54819	; 0xd623
 8004366:	f7fc fc67 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 800436a:	2102      	movs	r1, #2
 800436c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004370:	f7fc fc62 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8004374:	21b7      	movs	r1, #183	; 0xb7
 8004376:	f24d 6025 	movw	r0, #54821	; 0xd625
 800437a:	f7fc fc5d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 800437e:	2102      	movs	r1, #2
 8004380:	f24d 6026 	movw	r0, #54822	; 0xd626
 8004384:	f7fc fc58 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8004388:	21cf      	movs	r1, #207	; 0xcf
 800438a:	f24d 6027 	movw	r0, #54823	; 0xd627
 800438e:	f7fc fc53 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8004392:	2102      	movs	r1, #2
 8004394:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004398:	f7fc fc4e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 800439c:	21de      	movs	r1, #222	; 0xde
 800439e:	f24d 6029 	movw	r0, #54825	; 0xd629
 80043a2:	f7fc fc49 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80043a6:	2102      	movs	r1, #2
 80043a8:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80043ac:	f7fc fc44 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 80043b0:	21f2      	movs	r1, #242	; 0xf2
 80043b2:	f24d 602b 	movw	r0, #54827	; 0xd62b
 80043b6:	f7fc fc3f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 80043ba:	2102      	movs	r1, #2
 80043bc:	f24d 602c 	movw	r0, #54828	; 0xd62c
 80043c0:	f7fc fc3a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 80043c4:	21fe      	movs	r1, #254	; 0xfe
 80043c6:	f24d 602d 	movw	r0, #54829	; 0xd62d
 80043ca:	f7fc fc35 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 80043ce:	2103      	movs	r1, #3
 80043d0:	f24d 602e 	movw	r0, #54830	; 0xd62e
 80043d4:	f7fc fc30 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 80043d8:	2110      	movs	r1, #16
 80043da:	f24d 602f 	movw	r0, #54831	; 0xd62f
 80043de:	f7fc fc2b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 80043e2:	2103      	movs	r1, #3
 80043e4:	f24d 6030 	movw	r0, #54832	; 0xd630
 80043e8:	f7fc fc26 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 80043ec:	2133      	movs	r1, #51	; 0x33
 80043ee:	f24d 6031 	movw	r0, #54833	; 0xd631
 80043f2:	f7fc fc21 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 80043f6:	2103      	movs	r1, #3
 80043f8:	f24d 6032 	movw	r0, #54834	; 0xd632
 80043fc:	f7fc fc1c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004400:	216d      	movs	r1, #109	; 0x6d
 8004402:	f24d 6033 	movw	r0, #54835	; 0xd633
 8004406:	f7fc fc17 	bl	8000c38 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 800440a:	2155      	movs	r1, #85	; 0x55
 800440c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004410:	f7fc fc12 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8004414:	21aa      	movs	r1, #170	; 0xaa
 8004416:	f24f 0001 	movw	r0, #61441	; 0xf001
 800441a:	f7fc fc0d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800441e:	2152      	movs	r1, #82	; 0x52
 8004420:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004424:	f7fc fc08 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004428:	2108      	movs	r1, #8
 800442a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800442e:	f7fc fc03 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8004432:	2100      	movs	r1, #0
 8004434:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004438:	f7fc fbfe 	bl	8000c38 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 800443c:	21cc      	movs	r1, #204	; 0xcc
 800443e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004442:	f7fc fbf9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8004446:	2100      	movs	r1, #0
 8004448:	f24b 1001 	movw	r0, #45313	; 0xb101
 800444c:	f7fc fbf4 	bl	8000c38 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8004450:	2105      	movs	r1, #5
 8004452:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8004456:	f7fc fbef 	bl	8000c38 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 800445a:	2170      	movs	r1, #112	; 0x70
 800445c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004460:	f7fc fbea 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8004464:	2170      	movs	r1, #112	; 0x70
 8004466:	f24b 7001 	movw	r0, #46849	; 0xb701
 800446a:	f7fc fbe5 	bl	8000c38 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 800446e:	2101      	movs	r1, #1
 8004470:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004474:	f7fc fbe0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8004478:	2103      	movs	r1, #3
 800447a:	f64b 0001 	movw	r0, #47105	; 0xb801
 800447e:	f7fc fbdb 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8004482:	2103      	movs	r1, #3
 8004484:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004488:	f7fc fbd6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 800448c:	2103      	movs	r1, #3
 800448e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8004492:	f7fc fbd1 	bl	8000c38 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8004496:	2102      	movs	r1, #2
 8004498:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800449c:	f7fc fbcc 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80044a0:	2100      	movs	r1, #0
 80044a2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80044a6:	f7fc fbc7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80044aa:	2100      	movs	r1, #0
 80044ac:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80044b0:	f7fc fbc2 	bl	8000c38 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 80044b4:	21d0      	movs	r1, #208	; 0xd0
 80044b6:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 80044ba:	f7fc fbbd 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 80044be:	2102      	movs	r1, #2
 80044c0:	f64c 1001 	movw	r0, #51457	; 0xc901
 80044c4:	f7fc fbb8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 80044c8:	2150      	movs	r1, #80	; 0x50
 80044ca:	f64c 1002 	movw	r0, #51458	; 0xc902
 80044ce:	f7fc fbb3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 80044d2:	2150      	movs	r1, #80	; 0x50
 80044d4:	f64c 1003 	movw	r0, #51459	; 0xc903
 80044d8:	f7fc fbae 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 80044dc:	2150      	movs	r1, #80	; 0x50
 80044de:	f64c 1004 	movw	r0, #51460	; 0xc904
 80044e2:	f7fc fba9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 80044e6:	2100      	movs	r1, #0
 80044e8:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 80044ec:	f7fc fba4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 80044f0:	2155      	movs	r1, #85	; 0x55
 80044f2:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 80044f6:	f7fc fb9f 	bl	8000c38 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 80044fa:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80044fe:	f7fc fb0f 	bl	8000b20 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8004502:	2001      	movs	r0, #1
 8004504:	f002 fc0c 	bl	8006d20 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004508:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 800450c:	f7fc fb08 	bl	8000b20 <LCD_WR_REG>
 8004510:	f001 bd18 	b.w	8005f44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8004514:	4bec      	ldr	r3, [pc, #944]	; (80048c8 <LCD_Init+0x27b8>)
 8004516:	889b      	ldrh	r3, [r3, #4]
 8004518:	f249 3225 	movw	r2, #37669	; 0x9325
 800451c:	4293      	cmp	r3, r2
 800451e:	f040 80d7 	bne.w	80046d0 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8004522:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8004526:	20e5      	movs	r0, #229	; 0xe5
 8004528:	f7fc fb86 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 800452c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004530:	2001      	movs	r0, #1
 8004532:	f7fc fb81 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004536:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800453a:	2002      	movs	r0, #2
 800453c:	f7fc fb7c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004540:	f241 0130 	movw	r1, #4144	; 0x1030
 8004544:	2003      	movs	r0, #3
 8004546:	f7fc fb77 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800454a:	2100      	movs	r1, #0
 800454c:	2004      	movs	r0, #4
 800454e:	f7fc fb73 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004552:	f240 2102 	movw	r1, #514	; 0x202
 8004556:	2008      	movs	r0, #8
 8004558:	f7fc fb6e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800455c:	2100      	movs	r1, #0
 800455e:	2009      	movs	r0, #9
 8004560:	f7fc fb6a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8004564:	2100      	movs	r1, #0
 8004566:	200a      	movs	r0, #10
 8004568:	f7fc fb66 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800456c:	2100      	movs	r1, #0
 800456e:	200c      	movs	r0, #12
 8004570:	f7fc fb62 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8004574:	2100      	movs	r1, #0
 8004576:	200d      	movs	r0, #13
 8004578:	f7fc fb5e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800457c:	2100      	movs	r1, #0
 800457e:	200f      	movs	r0, #15
 8004580:	f7fc fb5a 	bl	8000c38 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8004584:	2100      	movs	r1, #0
 8004586:	2010      	movs	r0, #16
 8004588:	f7fc fb56 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800458c:	2107      	movs	r1, #7
 800458e:	2011      	movs	r0, #17
 8004590:	f7fc fb52 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004594:	2100      	movs	r1, #0
 8004596:	2012      	movs	r0, #18
 8004598:	f7fc fb4e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800459c:	2100      	movs	r1, #0
 800459e:	2013      	movs	r0, #19
 80045a0:	f7fc fb4a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80045a4:	2100      	movs	r1, #0
 80045a6:	2007      	movs	r0, #7
 80045a8:	f7fc fb46 	bl	8000c38 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 80045ac:	f241 6190 	movw	r1, #5776	; 0x1690
 80045b0:	2010      	movs	r0, #16
 80045b2:	f7fc fb41 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80045b6:	f240 2127 	movw	r1, #551	; 0x227
 80045ba:	2011      	movs	r0, #17
 80045bc:	f7fc fb3c 	bl	8000c38 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 80045c0:	219d      	movs	r1, #157	; 0x9d
 80045c2:	2012      	movs	r0, #18
 80045c4:	f7fc fb38 	bl	8000c38 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 80045c8:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80045cc:	2013      	movs	r0, #19
 80045ce:	f7fc fb33 	bl	8000c38 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 80045d2:	2125      	movs	r1, #37	; 0x25
 80045d4:	2029      	movs	r0, #41	; 0x29
 80045d6:	f7fc fb2f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 80045da:	210d      	movs	r1, #13
 80045dc:	202b      	movs	r0, #43	; 0x2b
 80045de:	f7fc fb2b 	bl	8000c38 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 80045e2:	2107      	movs	r1, #7
 80045e4:	2030      	movs	r0, #48	; 0x30
 80045e6:	f7fc fb27 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 80045ea:	f240 3103 	movw	r1, #771	; 0x303
 80045ee:	2031      	movs	r0, #49	; 0x31
 80045f0:	f7fc fb22 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 80045f4:	2103      	movs	r1, #3
 80045f6:	2032      	movs	r0, #50	; 0x32
 80045f8:	f7fc fb1e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 80045fc:	f240 2106 	movw	r1, #518	; 0x206
 8004600:	2035      	movs	r0, #53	; 0x35
 8004602:	f7fc fb19 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8004606:	2108      	movs	r1, #8
 8004608:	2036      	movs	r0, #54	; 0x36
 800460a:	f7fc fb15 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 800460e:	f240 4106 	movw	r1, #1030	; 0x406
 8004612:	2037      	movs	r0, #55	; 0x37
 8004614:	f7fc fb10 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004618:	f44f 7141 	mov.w	r1, #772	; 0x304
 800461c:	2038      	movs	r0, #56	; 0x38
 800461e:	f7fc fb0b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8004622:	2107      	movs	r1, #7
 8004624:	2039      	movs	r0, #57	; 0x39
 8004626:	f7fc fb07 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 800462a:	f240 6102 	movw	r1, #1538	; 0x602
 800462e:	203c      	movs	r0, #60	; 0x3c
 8004630:	f7fc fb02 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8004634:	2108      	movs	r1, #8
 8004636:	203d      	movs	r0, #61	; 0x3d
 8004638:	f7fc fafe 	bl	8000c38 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 800463c:	2100      	movs	r1, #0
 800463e:	2050      	movs	r0, #80	; 0x50
 8004640:	f7fc fafa 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004644:	21ef      	movs	r1, #239	; 0xef
 8004646:	2051      	movs	r0, #81	; 0x51
 8004648:	f7fc faf6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800464c:	2100      	movs	r1, #0
 800464e:	2052      	movs	r0, #82	; 0x52
 8004650:	f7fc faf2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004654:	f240 113f 	movw	r1, #319	; 0x13f
 8004658:	2053      	movs	r0, #83	; 0x53
 800465a:	f7fc faed 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 800465e:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004662:	2060      	movs	r0, #96	; 0x60
 8004664:	f7fc fae8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004668:	2101      	movs	r1, #1
 800466a:	2061      	movs	r0, #97	; 0x61
 800466c:	f7fc fae4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004670:	2100      	movs	r1, #0
 8004672:	206a      	movs	r0, #106	; 0x6a
 8004674:	f7fc fae0 	bl	8000c38 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004678:	2100      	movs	r1, #0
 800467a:	2080      	movs	r0, #128	; 0x80
 800467c:	f7fc fadc 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004680:	2100      	movs	r1, #0
 8004682:	2081      	movs	r0, #129	; 0x81
 8004684:	f7fc fad8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004688:	2100      	movs	r1, #0
 800468a:	2082      	movs	r0, #130	; 0x82
 800468c:	f7fc fad4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004690:	2100      	movs	r1, #0
 8004692:	2083      	movs	r0, #131	; 0x83
 8004694:	f7fc fad0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004698:	2100      	movs	r1, #0
 800469a:	2084      	movs	r0, #132	; 0x84
 800469c:	f7fc facc 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80046a0:	2100      	movs	r1, #0
 80046a2:	2085      	movs	r0, #133	; 0x85
 80046a4:	f7fc fac8 	bl	8000c38 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 80046a8:	2110      	movs	r1, #16
 80046aa:	2090      	movs	r0, #144	; 0x90
 80046ac:	f7fc fac4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80046b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046b4:	2092      	movs	r0, #146	; 0x92
 80046b6:	f7fc fabf 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 80046ba:	f240 1133 	movw	r1, #307	; 0x133
 80046be:	2007      	movs	r0, #7
 80046c0:	f7fc faba 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 80046c4:	2122      	movs	r1, #34	; 0x22
 80046c6:	2000      	movs	r0, #0
 80046c8:	f7fc fab6 	bl	8000c38 <LCD_WriteReg>
 80046cc:	f001 bc3a 	b.w	8005f44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 80046d0:	4b7d      	ldr	r3, [pc, #500]	; (80048c8 <LCD_Init+0x27b8>)
 80046d2:	889b      	ldrh	r3, [r3, #4]
 80046d4:	f249 3228 	movw	r2, #37672	; 0x9328
 80046d8:	4293      	cmp	r3, r2
 80046da:	f040 80f7 	bne.w	80048cc <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 80046de:	f241 018f 	movw	r1, #4239	; 0x108f
 80046e2:	20ec      	movs	r0, #236	; 0xec
 80046e4:	f7fc faa8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80046e8:	f241 2134 	movw	r1, #4660	; 0x1234
 80046ec:	20ef      	movs	r0, #239	; 0xef
 80046ee:	f7fc faa3 	bl	8000c38 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 80046f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046f6:	2001      	movs	r0, #1
 80046f8:	f7fc fa9e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 80046fc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004700:	2002      	movs	r0, #2
 8004702:	f7fc fa99 	bl	8000c38 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8004706:	f241 0130 	movw	r1, #4144	; 0x1030
 800470a:	2003      	movs	r0, #3
 800470c:	f7fc fa94 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004710:	2100      	movs	r1, #0
 8004712:	2004      	movs	r0, #4
 8004714:	f7fc fa90 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004718:	f240 2102 	movw	r1, #514	; 0x202
 800471c:	2008      	movs	r0, #8
 800471e:	f7fc fa8b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004722:	2100      	movs	r1, #0
 8004724:	2009      	movs	r0, #9
 8004726:	f7fc fa87 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 800472a:	2100      	movs	r1, #0
 800472c:	200a      	movs	r0, #10
 800472e:	f7fc fa83 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8004732:	2101      	movs	r1, #1
 8004734:	200c      	movs	r0, #12
 8004736:	f7fc fa7f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 800473a:	2100      	movs	r1, #0
 800473c:	200d      	movs	r0, #13
 800473e:	f7fc fa7b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8004742:	2100      	movs	r1, #0
 8004744:	200f      	movs	r0, #15
 8004746:	f7fc fa77 	bl	8000c38 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 800474a:	2100      	movs	r1, #0
 800474c:	2010      	movs	r0, #16
 800474e:	f7fc fa73 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004752:	2107      	movs	r1, #7
 8004754:	2011      	movs	r0, #17
 8004756:	f7fc fa6f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800475a:	2100      	movs	r1, #0
 800475c:	2012      	movs	r0, #18
 800475e:	f7fc fa6b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004762:	2100      	movs	r1, #0
 8004764:	2013      	movs	r0, #19
 8004766:	f7fc fa67 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 800476a:	2101      	movs	r1, #1
 800476c:	2007      	movs	r0, #7
 800476e:	f7fc fa63 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50);
 8004772:	2032      	movs	r0, #50	; 0x32
 8004774:	f002 fad4 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004778:	f241 4190 	movw	r1, #5264	; 0x1490
 800477c:	2010      	movs	r0, #16
 800477e:	f7fc fa5b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004782:	f240 2127 	movw	r1, #551	; 0x227
 8004786:	2011      	movs	r0, #17
 8004788:	f7fc fa56 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50);
 800478c:	2032      	movs	r0, #50	; 0x32
 800478e:	f002 fac7 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8004792:	218a      	movs	r1, #138	; 0x8a
 8004794:	2012      	movs	r0, #18
 8004796:	f7fc fa4f 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50);
 800479a:	2032      	movs	r0, #50	; 0x32
 800479c:	f002 fac0 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80047a0:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80047a4:	2013      	movs	r0, #19
 80047a6:	f7fc fa47 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 80047aa:	2106      	movs	r1, #6
 80047ac:	2029      	movs	r0, #41	; 0x29
 80047ae:	f7fc fa43 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 80047b2:	210d      	movs	r1, #13
 80047b4:	202b      	movs	r0, #43	; 0x2b
 80047b6:	f7fc fa3f 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50);
 80047ba:	2032      	movs	r0, #50	; 0x32
 80047bc:	f002 fab0 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 80047c0:	2100      	movs	r1, #0
 80047c2:	2020      	movs	r0, #32
 80047c4:	f7fc fa38 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80047c8:	2100      	movs	r1, #0
 80047ca:	2021      	movs	r0, #33	; 0x21
 80047cc:	f7fc fa34 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50);
 80047d0:	2032      	movs	r0, #50	; 0x32
 80047d2:	f002 faa5 	bl	8006d20 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 80047d6:	2100      	movs	r1, #0
 80047d8:	2030      	movs	r0, #48	; 0x30
 80047da:	f7fc fa2d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 80047de:	f240 6104 	movw	r1, #1540	; 0x604
 80047e2:	2031      	movs	r0, #49	; 0x31
 80047e4:	f7fc fa28 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 80047e8:	f240 3105 	movw	r1, #773	; 0x305
 80047ec:	2032      	movs	r0, #50	; 0x32
 80047ee:	f7fc fa23 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 80047f2:	2100      	movs	r1, #0
 80047f4:	2035      	movs	r0, #53	; 0x35
 80047f6:	f7fc fa1f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 80047fa:	f640 4109 	movw	r1, #3081	; 0xc09
 80047fe:	2036      	movs	r0, #54	; 0x36
 8004800:	f7fc fa1a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8004804:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004808:	2037      	movs	r0, #55	; 0x37
 800480a:	f7fc fa15 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 800480e:	f240 3101 	movw	r1, #769	; 0x301
 8004812:	2038      	movs	r0, #56	; 0x38
 8004814:	f7fc fa10 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004818:	f240 7107 	movw	r1, #1799	; 0x707
 800481c:	2039      	movs	r0, #57	; 0x39
 800481e:	f7fc fa0b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8004822:	2100      	movs	r1, #0
 8004824:	203c      	movs	r0, #60	; 0x3c
 8004826:	f7fc fa07 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 800482a:	f640 210a 	movw	r1, #2570	; 0xa0a
 800482e:	203d      	movs	r0, #61	; 0x3d
 8004830:	f7fc fa02 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50);
 8004834:	2032      	movs	r0, #50	; 0x32
 8004836:	f002 fa73 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 800483a:	2100      	movs	r1, #0
 800483c:	2050      	movs	r0, #80	; 0x50
 800483e:	f7fc f9fb 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8004842:	21ef      	movs	r1, #239	; 0xef
 8004844:	2051      	movs	r0, #81	; 0x51
 8004846:	f7fc f9f7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 800484a:	2100      	movs	r1, #0
 800484c:	2052      	movs	r0, #82	; 0x52
 800484e:	f7fc f9f3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8004852:	f240 113f 	movw	r1, #319	; 0x13f
 8004856:	2053      	movs	r0, #83	; 0x53
 8004858:	f7fc f9ee 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 800485c:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004860:	2060      	movs	r0, #96	; 0x60
 8004862:	f7fc f9e9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004866:	2101      	movs	r1, #1
 8004868:	2061      	movs	r0, #97	; 0x61
 800486a:	f7fc f9e5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800486e:	2100      	movs	r1, #0
 8004870:	206a      	movs	r0, #106	; 0x6a
 8004872:	f7fc f9e1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004876:	2100      	movs	r1, #0
 8004878:	2080      	movs	r0, #128	; 0x80
 800487a:	f7fc f9dd 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 800487e:	2100      	movs	r1, #0
 8004880:	2081      	movs	r0, #129	; 0x81
 8004882:	f7fc f9d9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004886:	2100      	movs	r1, #0
 8004888:	2082      	movs	r0, #130	; 0x82
 800488a:	f7fc f9d5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800488e:	2100      	movs	r1, #0
 8004890:	2083      	movs	r0, #131	; 0x83
 8004892:	f7fc f9d1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004896:	2100      	movs	r1, #0
 8004898:	2084      	movs	r0, #132	; 0x84
 800489a:	f7fc f9cd 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800489e:	2100      	movs	r1, #0
 80048a0:	2085      	movs	r0, #133	; 0x85
 80048a2:	f7fc f9c9 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80048a6:	2110      	movs	r1, #16
 80048a8:	2090      	movs	r0, #144	; 0x90
 80048aa:	f7fc f9c5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80048ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048b2:	2092      	movs	r0, #146	; 0x92
 80048b4:	f7fc f9c0 	bl	8000c38 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 80048b8:	f240 1133 	movw	r1, #307	; 0x133
 80048bc:	2007      	movs	r0, #7
 80048be:	f7fc f9bb 	bl	8000c38 <LCD_WriteReg>
 80048c2:	f001 bb3f 	b.w	8005f44 <LCD_Init+0x3e34>
 80048c6:	bf00      	nop
 80048c8:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x9320) //测试OK.
 80048cc:	4bce      	ldr	r3, [pc, #824]	; (8004c08 <LCD_Init+0x2af8>)
 80048ce:	889b      	ldrh	r3, [r3, #4]
 80048d0:	f249 3220 	movw	r2, #37664	; 0x9320
 80048d4:	4293      	cmp	r3, r2
 80048d6:	f040 80ad 	bne.w	8004a34 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 80048da:	2100      	movs	r1, #0
 80048dc:	2000      	movs	r0, #0
 80048de:	f7fc f9ab 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 80048e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048e6:	2001      	movs	r0, #1
 80048e8:	f7fc f9a6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80048ec:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80048f0:	2002      	movs	r0, #2
 80048f2:	f7fc f9a1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 80048f6:	f241 0130 	movw	r1, #4144	; 0x1030
 80048fa:	2003      	movs	r0, #3
 80048fc:	f7fc f99c 	bl	8000c38 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004900:	2100      	movs	r1, #0
 8004902:	2004      	movs	r0, #4
 8004904:	f7fc f998 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004908:	f240 2102 	movw	r1, #514	; 0x202
 800490c:	2008      	movs	r0, #8
 800490e:	f7fc f993 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8004912:	2100      	movs	r1, #0
 8004914:	2009      	movs	r0, #9
 8004916:	f7fc f98f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 800491a:	2100      	movs	r1, #0
 800491c:	200a      	movs	r0, #10
 800491e:	f7fc f98b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8004922:	2101      	movs	r1, #1
 8004924:	200c      	movs	r0, #12
 8004926:	f7fc f987 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 800492a:	2100      	movs	r1, #0
 800492c:	200d      	movs	r0, #13
 800492e:	f7fc f983 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8004932:	2100      	movs	r1, #0
 8004934:	200f      	movs	r0, #15
 8004936:	f7fc f97f 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50);
 800493a:	2032      	movs	r0, #50	; 0x32
 800493c:	f002 f9f0 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004940:	f240 1101 	movw	r1, #257	; 0x101
 8004944:	2007      	movs	r0, #7
 8004946:	f7fc f977 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50);
 800494a:	2032      	movs	r0, #50	; 0x32
 800494c:	f002 f9e8 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004950:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004954:	2010      	movs	r0, #16
 8004956:	f7fc f96f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 800495a:	2107      	movs	r1, #7
 800495c:	2011      	movs	r0, #17
 800495e:	f7fc f96b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8004962:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004966:	2012      	movs	r0, #18
 8004968:	f7fc f966 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 800496c:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004970:	2013      	movs	r0, #19
 8004972:	f7fc f961 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8004976:	2100      	movs	r1, #0
 8004978:	2029      	movs	r0, #41	; 0x29
 800497a:	f7fc f95d 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 800497e:	f244 0110 	movw	r1, #16400	; 0x4010
 8004982:	202b      	movs	r0, #43	; 0x2b
 8004984:	f7fc f958 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004988:	2100      	movs	r1, #0
 800498a:	2050      	movs	r0, #80	; 0x50
 800498c:	f7fc f954 	bl	8000c38 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004990:	21ef      	movs	r1, #239	; 0xef
 8004992:	2051      	movs	r0, #81	; 0x51
 8004994:	f7fc f950 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004998:	2100      	movs	r1, #0
 800499a:	2052      	movs	r0, #82	; 0x52
 800499c:	f7fc f94c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80049a0:	f240 113f 	movw	r1, #319	; 0x13f
 80049a4:	2053      	movs	r0, #83	; 0x53
 80049a6:	f7fc f947 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 80049aa:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80049ae:	2060      	movs	r0, #96	; 0x60
 80049b0:	f7fc f942 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 80049b4:	2101      	movs	r1, #1
 80049b6:	2061      	movs	r0, #97	; 0x61
 80049b8:	f7fc f93e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 80049bc:	2100      	movs	r1, #0
 80049be:	206a      	movs	r0, #106	; 0x6a
 80049c0:	f7fc f93a 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 80049c4:	2100      	movs	r1, #0
 80049c6:	2080      	movs	r0, #128	; 0x80
 80049c8:	f7fc f936 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 80049cc:	2100      	movs	r1, #0
 80049ce:	2081      	movs	r0, #129	; 0x81
 80049d0:	f7fc f932 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 80049d4:	2100      	movs	r1, #0
 80049d6:	2082      	movs	r0, #130	; 0x82
 80049d8:	f7fc f92e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 80049dc:	2100      	movs	r1, #0
 80049de:	2083      	movs	r0, #131	; 0x83
 80049e0:	f7fc f92a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 80049e4:	2100      	movs	r1, #0
 80049e6:	2084      	movs	r0, #132	; 0x84
 80049e8:	f7fc f926 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 80049ec:	2100      	movs	r1, #0
 80049ee:	2085      	movs	r0, #133	; 0x85
 80049f0:	f7fc f922 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 80049f4:	2110      	movs	r1, #16
 80049f6:	2090      	movs	r0, #144	; 0x90
 80049f8:	f7fc f91e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 80049fc:	2100      	movs	r1, #0
 80049fe:	2092      	movs	r0, #146	; 0x92
 8004a00:	f7fc f91a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8004a04:	2101      	movs	r1, #1
 8004a06:	2093      	movs	r0, #147	; 0x93
 8004a08:	f7fc f916 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004a0c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004a10:	2095      	movs	r0, #149	; 0x95
 8004a12:	f7fc f911 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004a16:	2100      	movs	r1, #0
 8004a18:	2097      	movs	r0, #151	; 0x97
 8004a1a:	f7fc f90d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004a1e:	2100      	movs	r1, #0
 8004a20:	2098      	movs	r0, #152	; 0x98
 8004a22:	f7fc f909 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004a26:	f240 1173 	movw	r1, #371	; 0x173
 8004a2a:	2007      	movs	r0, #7
 8004a2c:	f7fc f904 	bl	8000c38 <LCD_WriteReg>
 8004a30:	f001 ba88 	b.w	8005f44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004a34:	4b74      	ldr	r3, [pc, #464]	; (8004c08 <LCD_Init+0x2af8>)
 8004a36:	889b      	ldrh	r3, [r3, #4]
 8004a38:	f249 3231 	movw	r2, #37681	; 0x9331
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	f040 80e5 	bne.w	8004c0c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004a42:	f241 0114 	movw	r1, #4116	; 0x1014
 8004a46:	20e7      	movs	r0, #231	; 0xe7
 8004a48:	f7fc f8f6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a50:	2001      	movs	r0, #1
 8004a52:	f7fc f8f1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004a56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a5a:	2002      	movs	r0, #2
 8004a5c:	f7fc f8ec 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004a60:	f241 0138 	movw	r1, #4152	; 0x1038
 8004a64:	2003      	movs	r0, #3
 8004a66:	f7fc f8e7 	bl	8000c38 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004a6a:	f240 2102 	movw	r1, #514	; 0x202
 8004a6e:	2008      	movs	r0, #8
 8004a70:	f7fc f8e2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004a74:	2100      	movs	r1, #0
 8004a76:	2009      	movs	r0, #9
 8004a78:	f7fc f8de 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	200a      	movs	r0, #10
 8004a80:	f7fc f8da 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004a84:	2100      	movs	r1, #0
 8004a86:	200c      	movs	r0, #12
 8004a88:	f7fc f8d6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	200d      	movs	r0, #13
 8004a90:	f7fc f8d2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004a94:	2100      	movs	r1, #0
 8004a96:	200f      	movs	r0, #15
 8004a98:	f7fc f8ce 	bl	8000c38 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	2010      	movs	r0, #16
 8004aa0:	f7fc f8ca 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004aa4:	2107      	movs	r1, #7
 8004aa6:	2011      	movs	r0, #17
 8004aa8:	f7fc f8c6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004aac:	2100      	movs	r1, #0
 8004aae:	2012      	movs	r0, #18
 8004ab0:	f7fc f8c2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	2013      	movs	r0, #19
 8004ab8:	f7fc f8be 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004abc:	20c8      	movs	r0, #200	; 0xc8
 8004abe:	f002 f92f 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004ac2:	f241 6190 	movw	r1, #5776	; 0x1690
 8004ac6:	2010      	movs	r0, #16
 8004ac8:	f7fc f8b6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004acc:	f240 2127 	movw	r1, #551	; 0x227
 8004ad0:	2011      	movs	r0, #17
 8004ad2:	f7fc f8b1 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004ad6:	2032      	movs	r0, #50	; 0x32
 8004ad8:	f002 f922 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004adc:	210c      	movs	r1, #12
 8004ade:	2012      	movs	r0, #18
 8004ae0:	f7fc f8aa 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004ae4:	2032      	movs	r0, #50	; 0x32
 8004ae6:	f002 f91b 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004aee:	2013      	movs	r0, #19
 8004af0:	f7fc f8a2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004af4:	2111      	movs	r1, #17
 8004af6:	2029      	movs	r0, #41	; 0x29
 8004af8:	f7fc f89e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004afc:	210b      	movs	r1, #11
 8004afe:	202b      	movs	r0, #43	; 0x2b
 8004b00:	f7fc f89a 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b04:	2032      	movs	r0, #50	; 0x32
 8004b06:	f002 f90b 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	2020      	movs	r0, #32
 8004b0e:	f7fc f893 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004b12:	f240 113f 	movw	r1, #319	; 0x13f
 8004b16:	2021      	movs	r0, #33	; 0x21
 8004b18:	f7fc f88e 	bl	8000c38 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	2030      	movs	r0, #48	; 0x30
 8004b20:	f7fc f88a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004b24:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004b28:	2031      	movs	r0, #49	; 0x31
 8004b2a:	f7fc f885 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004b2e:	2100      	movs	r1, #0
 8004b30:	2032      	movs	r0, #50	; 0x32
 8004b32:	f7fc f881 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004b36:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004b3a:	2035      	movs	r0, #53	; 0x35
 8004b3c:	f7fc f87c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004b40:	f241 610a 	movw	r1, #5642	; 0x160a
 8004b44:	2036      	movs	r0, #54	; 0x36
 8004b46:	f7fc f877 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004b4a:	f240 7107 	movw	r1, #1799	; 0x707
 8004b4e:	2037      	movs	r0, #55	; 0x37
 8004b50:	f7fc f872 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004b54:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004b58:	2038      	movs	r0, #56	; 0x38
 8004b5a:	f7fc f86d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004b5e:	f240 7107 	movw	r1, #1799	; 0x707
 8004b62:	2039      	movs	r0, #57	; 0x39
 8004b64:	f7fc f868 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004b68:	f240 4102 	movw	r1, #1026	; 0x402
 8004b6c:	203c      	movs	r0, #60	; 0x3c
 8004b6e:	f7fc f863 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004b72:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004b76:	203d      	movs	r0, #61	; 0x3d
 8004b78:	f7fc f85e 	bl	8000c38 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	2050      	movs	r0, #80	; 0x50
 8004b80:	f7fc f85a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004b84:	21ef      	movs	r1, #239	; 0xef
 8004b86:	2051      	movs	r0, #81	; 0x51
 8004b88:	f7fc f856 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2052      	movs	r0, #82	; 0x52
 8004b90:	f7fc f852 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004b94:	f240 113f 	movw	r1, #319	; 0x13f
 8004b98:	2053      	movs	r0, #83	; 0x53
 8004b9a:	f7fc f84d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004b9e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004ba2:	2060      	movs	r0, #96	; 0x60
 8004ba4:	f7fc f848 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004ba8:	2101      	movs	r1, #1
 8004baa:	2061      	movs	r0, #97	; 0x61
 8004bac:	f7fc f844 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	206a      	movs	r0, #106	; 0x6a
 8004bb4:	f7fc f840 	bl	8000c38 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004bb8:	2100      	movs	r1, #0
 8004bba:	2080      	movs	r0, #128	; 0x80
 8004bbc:	f7fc f83c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	2081      	movs	r0, #129	; 0x81
 8004bc4:	f7fc f838 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004bc8:	2100      	movs	r1, #0
 8004bca:	2082      	movs	r0, #130	; 0x82
 8004bcc:	f7fc f834 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	2083      	movs	r0, #131	; 0x83
 8004bd4:	f7fc f830 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004bd8:	2100      	movs	r1, #0
 8004bda:	2084      	movs	r0, #132	; 0x84
 8004bdc:	f7fc f82c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004be0:	2100      	movs	r1, #0
 8004be2:	2085      	movs	r0, #133	; 0x85
 8004be4:	f7fc f828 	bl	8000c38 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004be8:	2110      	movs	r1, #16
 8004bea:	2090      	movs	r0, #144	; 0x90
 8004bec:	f7fc f824 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004bf0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004bf4:	2092      	movs	r0, #146	; 0x92
 8004bf6:	f7fc f81f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004bfa:	f240 1133 	movw	r1, #307	; 0x133
 8004bfe:	2007      	movs	r0, #7
 8004c00:	f7fc f81a 	bl	8000c38 <LCD_WriteReg>
 8004c04:	f001 b99e 	b.w	8005f44 <LCD_Init+0x3e34>
 8004c08:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x5408) {
 8004c0c:	4be2      	ldr	r3, [pc, #904]	; (8004f98 <LCD_Init+0x2e88>)
 8004c0e:	889b      	ldrh	r3, [r3, #4]
 8004c10:	f245 4208 	movw	r2, #21512	; 0x5408
 8004c14:	4293      	cmp	r3, r2
 8004c16:	f040 80a3 	bne.w	8004d60 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c1e:	2001      	movs	r0, #1
 8004c20:	f7fc f80a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004c24:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004c28:	2002      	movs	r0, #2
 8004c2a:	f7fc f805 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004c2e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004c32:	2003      	movs	r0, #3
 8004c34:	f7fc f800 	bl	8000c38 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004c38:	2100      	movs	r1, #0
 8004c3a:	2004      	movs	r0, #4
 8004c3c:	f7fb fffc 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004c40:	f240 2107 	movw	r1, #519	; 0x207
 8004c44:	2008      	movs	r0, #8
 8004c46:	f7fb fff7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	2009      	movs	r0, #9
 8004c4e:	f7fb fff3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004c52:	2100      	movs	r1, #0
 8004c54:	200a      	movs	r0, #10
 8004c56:	f7fb ffef 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	200c      	movs	r0, #12
 8004c5e:	f7fb ffeb 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004c62:	2100      	movs	r1, #0
 8004c64:	200d      	movs	r0, #13
 8004c66:	f7fb ffe7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	200f      	movs	r0, #15
 8004c6e:	f7fb ffe3 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 8004c72:	2014      	movs	r0, #20
 8004c74:	f002 f854 	bl	8006d20 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004c78:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004c7c:	2010      	movs	r0, #16
 8004c7e:	f7fb ffdb 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004c82:	2101      	movs	r1, #1
 8004c84:	2011      	movs	r0, #17
 8004c86:	f7fb ffd7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	2017      	movs	r0, #23
 8004c8e:	f7fb ffd3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004c92:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004c96:	2012      	movs	r0, #18
 8004c98:	f7fb ffce 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004c9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ca0:	2013      	movs	r0, #19
 8004ca2:	f7fb ffc9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004ca6:	2109      	movs	r1, #9
 8004ca8:	2029      	movs	r0, #41	; 0x29
 8004caa:	f7fb ffc5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004cae:	2109      	movs	r1, #9
 8004cb0:	202a      	movs	r0, #42	; 0x2a
 8004cb2:	f7fb ffc1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	20a4      	movs	r0, #164	; 0xa4
 8004cba:	f7fb ffbd 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	2050      	movs	r0, #80	; 0x50
 8004cc2:	f7fb ffb9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004cc6:	21ef      	movs	r1, #239	; 0xef
 8004cc8:	2051      	movs	r0, #81	; 0x51
 8004cca:	f7fb ffb5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004cce:	2100      	movs	r1, #0
 8004cd0:	2052      	movs	r0, #82	; 0x52
 8004cd2:	f7fb ffb1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004cd6:	f240 113f 	movw	r1, #319	; 0x13f
 8004cda:	2053      	movs	r0, #83	; 0x53
 8004cdc:	f7fb ffac 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004ce0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004ce4:	2060      	movs	r0, #96	; 0x60
 8004ce6:	f7fb ffa7 	bl	8000c38 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004cea:	2101      	movs	r1, #1
 8004cec:	2061      	movs	r0, #97	; 0x61
 8004cee:	f7fb ffa3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	206a      	movs	r0, #106	; 0x6a
 8004cf6:	f7fb ff9f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2080      	movs	r0, #128	; 0x80
 8004cfe:	f7fb ff9b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004d02:	2100      	movs	r1, #0
 8004d04:	2081      	movs	r0, #129	; 0x81
 8004d06:	f7fb ff97 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	2082      	movs	r0, #130	; 0x82
 8004d0e:	f7fb ff93 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004d12:	2100      	movs	r1, #0
 8004d14:	2083      	movs	r0, #131	; 0x83
 8004d16:	f7fb ff8f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	2084      	movs	r0, #132	; 0x84
 8004d1e:	f7fb ff8b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004d22:	2100      	movs	r1, #0
 8004d24:	2085      	movs	r0, #133	; 0x85
 8004d26:	f7fb ff87 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004d2a:	2113      	movs	r1, #19
 8004d2c:	2090      	movs	r0, #144	; 0x90
 8004d2e:	f7fb ff83 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004d32:	2100      	movs	r1, #0
 8004d34:	2092      	movs	r0, #146	; 0x92
 8004d36:	f7fb ff7f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004d3a:	2103      	movs	r1, #3
 8004d3c:	2093      	movs	r0, #147	; 0x93
 8004d3e:	f7fb ff7b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004d42:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004d46:	2095      	movs	r0, #149	; 0x95
 8004d48:	f7fb ff76 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004d4c:	f240 1173 	movw	r1, #371	; 0x173
 8004d50:	2007      	movs	r0, #7
 8004d52:	f7fb ff71 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50);
 8004d56:	2032      	movs	r0, #50	; 0x32
 8004d58:	f001 ffe2 	bl	8006d20 <HAL_Delay>
 8004d5c:	f001 b8f2 	b.w	8005f44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004d60:	4b8d      	ldr	r3, [pc, #564]	; (8004f98 <LCD_Init+0x2e88>)
 8004d62:	889b      	ldrh	r3, [r3, #4]
 8004d64:	f241 5205 	movw	r2, #5381	; 0x1505
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	f040 8117 	bne.w	8004f9c <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004d6e:	2100      	movs	r1, #0
 8004d70:	2007      	movs	r0, #7
 8004d72:	f7fb ff61 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50);
 8004d76:	2032      	movs	r0, #50	; 0x32
 8004d78:	f001 ffd2 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004d7c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004d80:	2012      	movs	r0, #18
 8004d82:	f7fb ff59 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004d86:	2101      	movs	r1, #1
 8004d88:	20a4      	movs	r0, #164	; 0xa4
 8004d8a:	f7fb ff55 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004d8e:	210f      	movs	r1, #15
 8004d90:	2008      	movs	r0, #8
 8004d92:	f7fb ff51 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004d96:	2108      	movs	r1, #8
 8004d98:	200a      	movs	r0, #10
 8004d9a:	f7fb ff4d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004d9e:	2108      	movs	r1, #8
 8004da0:	200d      	movs	r0, #13
 8004da2:	f7fb ff49 	bl	8000c38 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004da6:	f240 7107 	movw	r1, #1799	; 0x707
 8004daa:	2030      	movs	r0, #48	; 0x30
 8004dac:	f7fb ff44 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004db0:	2107      	movs	r1, #7
 8004db2:	2031      	movs	r0, #49	; 0x31
 8004db4:	f7fb ff40 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004db8:	f240 6103 	movw	r1, #1539	; 0x603
 8004dbc:	2032      	movs	r0, #50	; 0x32
 8004dbe:	f7fb ff3b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004dc2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004dc6:	2033      	movs	r0, #51	; 0x33
 8004dc8:	f7fb ff36 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004dcc:	f240 2102 	movw	r1, #514	; 0x202
 8004dd0:	2034      	movs	r0, #52	; 0x34
 8004dd2:	f7fb ff31 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004dd6:	2102      	movs	r1, #2
 8004dd8:	2035      	movs	r0, #53	; 0x35
 8004dda:	f7fb ff2d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004dde:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004de2:	2036      	movs	r0, #54	; 0x36
 8004de4:	f7fb ff28 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004de8:	f240 7107 	movw	r1, #1799	; 0x707
 8004dec:	2037      	movs	r0, #55	; 0x37
 8004dee:	f7fb ff23 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004df2:	2100      	movs	r1, #0
 8004df4:	2038      	movs	r0, #56	; 0x38
 8004df6:	f7fb ff1f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	2039      	movs	r0, #57	; 0x39
 8004dfe:	f7fb ff1b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004e02:	f240 7107 	movw	r1, #1799	; 0x707
 8004e06:	203a      	movs	r0, #58	; 0x3a
 8004e08:	f7fb ff16 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	203b      	movs	r0, #59	; 0x3b
 8004e10:	f7fb ff12 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004e14:	2107      	movs	r1, #7
 8004e16:	203c      	movs	r0, #60	; 0x3c
 8004e18:	f7fb ff0e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	203d      	movs	r0, #61	; 0x3d
 8004e20:	f7fb ff0a 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50);
 8004e24:	2032      	movs	r0, #50	; 0x32
 8004e26:	f001 ff7b 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	2007      	movs	r0, #7
 8004e2e:	f7fb ff03 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004e32:	2101      	movs	r1, #1
 8004e34:	2017      	movs	r0, #23
 8004e36:	f7fb feff 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(50);
 8004e3a:	2032      	movs	r0, #50	; 0x32
 8004e3c:	f001 ff70 	bl	8006d20 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004e40:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004e44:	2010      	movs	r0, #16
 8004e46:	f7fb fef7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004e4a:	f240 2117 	movw	r1, #535	; 0x217
 8004e4e:	2011      	movs	r0, #17
 8004e50:	f7fb fef2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004e54:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004e58:	2012      	movs	r0, #18
 8004e5a:	f7fb feed 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004e5e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004e62:	2013      	movs	r0, #19
 8004e64:	f7fb fee8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004e68:	2100      	movs	r1, #0
 8004e6a:	202a      	movs	r0, #42	; 0x2a
 8004e6c:	f7fb fee4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004e70:	210a      	movs	r1, #10
 8004e72:	2029      	movs	r0, #41	; 0x29
 8004e74:	f7fb fee0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004e78:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004e7c:	2012      	movs	r0, #18
 8004e7e:	f7fb fedb 	bl	8000c38 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004e82:	2100      	movs	r1, #0
 8004e84:	2050      	movs	r0, #80	; 0x50
 8004e86:	f7fb fed7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004e8a:	21ef      	movs	r1, #239	; 0xef
 8004e8c:	2051      	movs	r0, #81	; 0x51
 8004e8e:	f7fb fed3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004e92:	2100      	movs	r1, #0
 8004e94:	2052      	movs	r0, #82	; 0x52
 8004e96:	f7fb fecf 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004e9a:	f240 113f 	movw	r1, #319	; 0x13f
 8004e9e:	2053      	movs	r0, #83	; 0x53
 8004ea0:	f7fb feca 	bl	8000c38 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004ea4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004ea8:	2060      	movs	r0, #96	; 0x60
 8004eaa:	f7fb fec5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004eae:	2101      	movs	r1, #1
 8004eb0:	2061      	movs	r0, #97	; 0x61
 8004eb2:	f7fb fec1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	206a      	movs	r0, #106	; 0x6a
 8004eba:	f7fb febd 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	2080      	movs	r0, #128	; 0x80
 8004ec2:	f7fb feb9 	bl	8000c38 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	2081      	movs	r0, #129	; 0x81
 8004eca:	f7fb feb5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004ece:	2100      	movs	r1, #0
 8004ed0:	2082      	movs	r0, #130	; 0x82
 8004ed2:	f7fb feb1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	2083      	movs	r0, #131	; 0x83
 8004eda:	f7fb fead 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004ede:	2100      	movs	r1, #0
 8004ee0:	2084      	movs	r0, #132	; 0x84
 8004ee2:	f7fb fea9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	2085      	movs	r0, #133	; 0x85
 8004eea:	f7fb fea5 	bl	8000c38 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004eee:	2113      	movs	r1, #19
 8004ef0:	2090      	movs	r0, #144	; 0x90
 8004ef2:	f7fb fea1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004ef6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004efa:	2092      	movs	r0, #146	; 0x92
 8004efc:	f7fb fe9c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004f00:	2105      	movs	r1, #5
 8004f02:	2093      	movs	r0, #147	; 0x93
 8004f04:	f7fb fe98 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004f08:	2100      	movs	r1, #0
 8004f0a:	2095      	movs	r0, #149	; 0x95
 8004f0c:	f7fb fe94 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004f10:	2100      	movs	r1, #0
 8004f12:	2097      	movs	r0, #151	; 0x97
 8004f14:	f7fb fe90 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004f18:	2100      	movs	r1, #0
 8004f1a:	2098      	movs	r0, #152	; 0x98
 8004f1c:	f7fb fe8c 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f24:	2001      	movs	r0, #1
 8004f26:	f7fb fe87 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004f2a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004f2e:	2002      	movs	r0, #2
 8004f30:	f7fb fe82 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004f34:	f241 0138 	movw	r1, #4152	; 0x1038
 8004f38:	2003      	movs	r0, #3
 8004f3a:	f7fb fe7d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	2004      	movs	r0, #4
 8004f42:	f7fb fe79 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004f46:	2100      	movs	r1, #0
 8004f48:	200c      	movs	r0, #12
 8004f4a:	f7fb fe75 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004f4e:	2100      	movs	r1, #0
 8004f50:	200f      	movs	r0, #15
 8004f52:	f7fb fe71 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004f56:	2100      	movs	r1, #0
 8004f58:	2020      	movs	r0, #32
 8004f5a:	f7fb fe6d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2021      	movs	r0, #33	; 0x21
 8004f62:	f7fb fe69 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004f66:	2121      	movs	r1, #33	; 0x21
 8004f68:	2007      	movs	r0, #7
 8004f6a:	f7fb fe65 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 8004f6e:	2014      	movs	r0, #20
 8004f70:	f001 fed6 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004f74:	2161      	movs	r1, #97	; 0x61
 8004f76:	2007      	movs	r0, #7
 8004f78:	f7fb fe5e 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 8004f7c:	2014      	movs	r0, #20
 8004f7e:	f001 fecf 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004f82:	f240 1173 	movw	r1, #371	; 0x173
 8004f86:	2007      	movs	r0, #7
 8004f88:	f7fb fe56 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 8004f8c:	2014      	movs	r0, #20
 8004f8e:	f001 fec7 	bl	8006d20 <HAL_Delay>
 8004f92:	f000 bfd7 	b.w	8005f44 <LCD_Init+0x3e34>
 8004f96:	bf00      	nop
 8004f98:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0xB505) {
 8004f9c:	4bf0      	ldr	r3, [pc, #960]	; (8005360 <LCD_Init+0x3250>)
 8004f9e:	889b      	ldrh	r3, [r3, #4]
 8004fa0:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	f040 8103 	bne.w	80051b0 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004faa:	2100      	movs	r1, #0
 8004fac:	2000      	movs	r0, #0
 8004fae:	f7fb fe43 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	f7fb fe3f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004fba:	2100      	movs	r1, #0
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f7fb fe3b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	f7fb fe37 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004fca:	2101      	movs	r1, #1
 8004fcc:	20a4      	movs	r0, #164	; 0xa4
 8004fce:	f7fb fe33 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 8004fd2:	2014      	movs	r0, #20
 8004fd4:	f001 fea4 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004fd8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004fdc:	2060      	movs	r0, #96	; 0x60
 8004fde:	f7fb fe2b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004fe2:	f240 2102 	movw	r1, #514	; 0x202
 8004fe6:	2008      	movs	r0, #8
 8004fe8:	f7fb fe26 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004fec:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004ff0:	2030      	movs	r0, #48	; 0x30
 8004ff2:	f7fb fe21 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004ff6:	f243 7115 	movw	r1, #14101	; 0x3715
 8004ffa:	2031      	movs	r0, #49	; 0x31
 8004ffc:	f7fb fe1c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8005000:	f240 6104 	movw	r1, #1540	; 0x604
 8005004:	2032      	movs	r0, #50	; 0x32
 8005006:	f7fb fe17 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 800500a:	f640 6116 	movw	r1, #3606	; 0xe16
 800500e:	2033      	movs	r0, #51	; 0x33
 8005010:	f7fb fe12 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8005014:	f242 2111 	movw	r1, #8721	; 0x2211
 8005018:	2034      	movs	r0, #52	; 0x34
 800501a:	f7fb fe0d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 800501e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8005022:	2035      	movs	r0, #53	; 0x35
 8005024:	f7fb fe08 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8005028:	f248 5107 	movw	r1, #34055	; 0x8507
 800502c:	2036      	movs	r0, #54	; 0x36
 800502e:	f7fb fe03 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8005032:	f241 4107 	movw	r1, #5127	; 0x1407
 8005036:	2037      	movs	r0, #55	; 0x37
 8005038:	f7fb fdfe 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 800503c:	f241 4103 	movw	r1, #5123	; 0x1403
 8005040:	2038      	movs	r0, #56	; 0x38
 8005042:	f7fb fdf9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8005046:	2120      	movs	r1, #32
 8005048:	2039      	movs	r0, #57	; 0x39
 800504a:	f7fb fdf5 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 800504e:	211a      	movs	r1, #26
 8005050:	2090      	movs	r0, #144	; 0x90
 8005052:	f7fb fdf1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005056:	2100      	movs	r1, #0
 8005058:	2010      	movs	r0, #16
 800505a:	f7fb fded 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800505e:	2107      	movs	r1, #7
 8005060:	2011      	movs	r0, #17
 8005062:	f7fb fde9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8005066:	2100      	movs	r1, #0
 8005068:	2012      	movs	r0, #18
 800506a:	f7fb fde5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800506e:	2100      	movs	r1, #0
 8005070:	2013      	movs	r0, #19
 8005072:	f7fb fde1 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 8005076:	2014      	movs	r0, #20
 8005078:	f001 fe52 	bl	8006d20 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 800507c:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8005080:	2010      	movs	r0, #16
 8005082:	f7fb fdd9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8005086:	f240 1137 	movw	r1, #311	; 0x137
 800508a:	2011      	movs	r0, #17
 800508c:	f7fb fdd4 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 8005090:	2014      	movs	r0, #20
 8005092:	f001 fe45 	bl	8006d20 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8005096:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800509a:	2012      	movs	r0, #18
 800509c:	f7fb fdcc 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 80050a0:	2014      	movs	r0, #20
 80050a2:	f001 fe3d 	bl	8006d20 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 80050a6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80050aa:	2013      	movs	r0, #19
 80050ac:	f7fb fdc4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 80050b0:	2180      	movs	r1, #128	; 0x80
 80050b2:	202a      	movs	r0, #42	; 0x2a
 80050b4:	f7fb fdc0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 80050b8:	2148      	movs	r1, #72	; 0x48
 80050ba:	2029      	movs	r0, #41	; 0x29
 80050bc:	f7fb fdbc 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 80050c0:	2014      	movs	r0, #20
 80050c2:	f001 fe2d 	bl	8006d20 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 80050c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050ca:	2001      	movs	r0, #1
 80050cc:	f7fb fdb4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80050d0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80050d4:	2002      	movs	r0, #2
 80050d6:	f7fb fdaf 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 80050da:	f241 0138 	movw	r1, #4152	; 0x1038
 80050de:	2003      	movs	r0, #3
 80050e0:	f7fb fdaa 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80050e4:	f240 2102 	movw	r1, #514	; 0x202
 80050e8:	2008      	movs	r0, #8
 80050ea:	f7fb fda5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 80050ee:	2100      	movs	r1, #0
 80050f0:	200a      	movs	r0, #10
 80050f2:	f7fb fda1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 80050f6:	2100      	movs	r1, #0
 80050f8:	200c      	movs	r0, #12
 80050fa:	f7fb fd9d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 80050fe:	2100      	movs	r1, #0
 8005100:	200d      	movs	r0, #13
 8005102:	f7fb fd99 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8005106:	2130      	movs	r1, #48	; 0x30
 8005108:	200e      	movs	r0, #14
 800510a:	f7fb fd95 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800510e:	2100      	movs	r1, #0
 8005110:	2050      	movs	r0, #80	; 0x50
 8005112:	f7fb fd91 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8005116:	21ef      	movs	r1, #239	; 0xef
 8005118:	2051      	movs	r0, #81	; 0x51
 800511a:	f7fb fd8d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800511e:	2100      	movs	r1, #0
 8005120:	2052      	movs	r0, #82	; 0x52
 8005122:	f7fb fd89 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8005126:	f240 113f 	movw	r1, #319	; 0x13f
 800512a:	2053      	movs	r0, #83	; 0x53
 800512c:	f7fb fd84 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8005130:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005134:	2060      	movs	r0, #96	; 0x60
 8005136:	f7fb fd7f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800513a:	2101      	movs	r1, #1
 800513c:	2061      	movs	r0, #97	; 0x61
 800513e:	f7fb fd7b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8005142:	2100      	movs	r1, #0
 8005144:	206a      	movs	r0, #106	; 0x6a
 8005146:	f7fb fd77 	bl	8000c38 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 800514a:	2111      	movs	r1, #17
 800514c:	2090      	movs	r0, #144	; 0x90
 800514e:	f7fb fd73 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005152:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005156:	2092      	movs	r0, #146	; 0x92
 8005158:	f7fb fd6e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 800515c:	f240 4102 	movw	r1, #1026	; 0x402
 8005160:	2093      	movs	r0, #147	; 0x93
 8005162:	f7fb fd69 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8005166:	2102      	movs	r1, #2
 8005168:	2094      	movs	r0, #148	; 0x94
 800516a:	f7fb fd65 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 800516e:	2014      	movs	r0, #20
 8005170:	f001 fdd6 	bl	8006d20 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8005174:	2101      	movs	r1, #1
 8005176:	2007      	movs	r0, #7
 8005178:	f7fb fd5e 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 800517c:	2014      	movs	r0, #20
 800517e:	f001 fdcf 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8005182:	2161      	movs	r1, #97	; 0x61
 8005184:	2007      	movs	r0, #7
 8005186:	f7fb fd57 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 800518a:	f240 1173 	movw	r1, #371	; 0x173
 800518e:	2007      	movs	r0, #7
 8005190:	f7fb fd52 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8005194:	2100      	movs	r1, #0
 8005196:	2020      	movs	r0, #32
 8005198:	f7fb fd4e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800519c:	2100      	movs	r1, #0
 800519e:	2021      	movs	r0, #33	; 0x21
 80051a0:	f7fb fd4a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 80051a4:	2122      	movs	r1, #34	; 0x22
 80051a6:	2000      	movs	r0, #0
 80051a8:	f7fb fd46 	bl	8000c38 <LCD_WriteReg>
 80051ac:	f000 beca 	b.w	8005f44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 80051b0:	4b6b      	ldr	r3, [pc, #428]	; (8005360 <LCD_Init+0x3250>)
 80051b2:	889b      	ldrh	r3, [r3, #4]
 80051b4:	f24c 5205 	movw	r2, #50437	; 0xc505
 80051b8:	4293      	cmp	r3, r2
 80051ba:	f040 80d3 	bne.w	8005364 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 80051be:	2100      	movs	r1, #0
 80051c0:	2000      	movs	r0, #0
 80051c2:	f7fb fd39 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80051c6:	2100      	movs	r1, #0
 80051c8:	2000      	movs	r0, #0
 80051ca:	f7fb fd35 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 80051ce:	2014      	movs	r0, #20
 80051d0:	f001 fda6 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 80051d4:	2100      	movs	r1, #0
 80051d6:	2000      	movs	r0, #0
 80051d8:	f7fb fd2e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80051dc:	2100      	movs	r1, #0
 80051de:	2000      	movs	r0, #0
 80051e0:	f7fb fd2a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80051e4:	2100      	movs	r1, #0
 80051e6:	2000      	movs	r0, #0
 80051e8:	f7fb fd26 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80051ec:	2100      	movs	r1, #0
 80051ee:	2000      	movs	r0, #0
 80051f0:	f7fb fd22 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 80051f4:	2101      	movs	r1, #1
 80051f6:	20a4      	movs	r0, #164	; 0xa4
 80051f8:	f7fb fd1e 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 80051fc:	2014      	movs	r0, #20
 80051fe:	f001 fd8f 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005202:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005206:	2060      	movs	r0, #96	; 0x60
 8005208:	f7fb fd16 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 800520c:	f640 0106 	movw	r1, #2054	; 0x806
 8005210:	2008      	movs	r0, #8
 8005212:	f7fb fd11 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8005216:	f240 7103 	movw	r1, #1795	; 0x703
 800521a:	2030      	movs	r0, #48	; 0x30
 800521c:	f7fb fd0c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8005220:	2101      	movs	r1, #1
 8005222:	2031      	movs	r0, #49	; 0x31
 8005224:	f7fb fd08 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8005228:	2104      	movs	r1, #4
 800522a:	2032      	movs	r0, #50	; 0x32
 800522c:	f7fb fd04 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8005230:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005234:	2033      	movs	r0, #51	; 0x33
 8005236:	f7fb fcff 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 800523a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800523e:	2034      	movs	r0, #52	; 0x34
 8005240:	f7fb fcfa 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8005244:	f240 1103 	movw	r1, #259	; 0x103
 8005248:	2035      	movs	r0, #53	; 0x35
 800524a:	f7fb fcf5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 800524e:	211f      	movs	r1, #31
 8005250:	2036      	movs	r0, #54	; 0x36
 8005252:	f7fb fcf1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8005256:	f240 7103 	movw	r1, #1795	; 0x703
 800525a:	2037      	movs	r0, #55	; 0x37
 800525c:	f7fb fcec 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8005260:	2101      	movs	r1, #1
 8005262:	2038      	movs	r0, #56	; 0x38
 8005264:	f7fb fce8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8005268:	2104      	movs	r1, #4
 800526a:	2039      	movs	r0, #57	; 0x39
 800526c:	f7fb fce4 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8005270:	2115      	movs	r1, #21
 8005272:	2090      	movs	r0, #144	; 0x90
 8005274:	f7fb fce0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8005278:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800527c:	2010      	movs	r0, #16
 800527e:	f7fb fcdb 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8005282:	f240 2147 	movw	r1, #583	; 0x247
 8005286:	2011      	movs	r0, #17
 8005288:	f7fb fcd6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 800528c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005290:	2012      	movs	r0, #18
 8005292:	f7fb fcd1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8005296:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800529a:	2013      	movs	r0, #19
 800529c:	f7fb fccc 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(120);
 80052a0:	2078      	movs	r0, #120	; 0x78
 80052a2:	f001 fd3d 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80052a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052aa:	2001      	movs	r0, #1
 80052ac:	f7fb fcc4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 80052b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052b4:	2002      	movs	r0, #2
 80052b6:	f7fb fcbf 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80052ba:	f241 0130 	movw	r1, #4144	; 0x1030
 80052be:	2003      	movs	r0, #3
 80052c0:	f7fb fcba 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 80052c4:	2108      	movs	r1, #8
 80052c6:	200a      	movs	r0, #10
 80052c8:	f7fb fcb6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80052cc:	2100      	movs	r1, #0
 80052ce:	200c      	movs	r0, #12
 80052d0:	f7fb fcb2 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 80052d4:	2120      	movs	r1, #32
 80052d6:	200e      	movs	r0, #14
 80052d8:	f7fb fcae 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80052dc:	2100      	movs	r1, #0
 80052de:	200f      	movs	r0, #15
 80052e0:	f7fb fcaa 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 80052e4:	2100      	movs	r1, #0
 80052e6:	2020      	movs	r0, #32
 80052e8:	f7fb fca6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 80052ec:	2100      	movs	r1, #0
 80052ee:	2021      	movs	r0, #33	; 0x21
 80052f0:	f7fb fca2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 80052f4:	213d      	movs	r1, #61	; 0x3d
 80052f6:	202a      	movs	r0, #42	; 0x2a
 80052f8:	f7fb fc9e 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(20);
 80052fc:	2014      	movs	r0, #20
 80052fe:	f001 fd0f 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8005302:	212d      	movs	r1, #45	; 0x2d
 8005304:	2029      	movs	r0, #41	; 0x29
 8005306:	f7fb fc97 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800530a:	2100      	movs	r1, #0
 800530c:	2050      	movs	r0, #80	; 0x50
 800530e:	f7fb fc93 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8005312:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8005316:	2051      	movs	r0, #81	; 0x51
 8005318:	f7fb fc8e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800531c:	2100      	movs	r1, #0
 800531e:	2052      	movs	r0, #82	; 0x52
 8005320:	f7fb fc8a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005324:	f240 113f 	movw	r1, #319	; 0x13f
 8005328:	2053      	movs	r0, #83	; 0x53
 800532a:	f7fb fc85 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 800532e:	2100      	movs	r1, #0
 8005330:	2061      	movs	r0, #97	; 0x61
 8005332:	f7fb fc81 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005336:	2100      	movs	r1, #0
 8005338:	206a      	movs	r0, #106	; 0x6a
 800533a:	f7fb fc7d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800533e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005342:	2092      	movs	r0, #146	; 0x92
 8005344:	f7fb fc78 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8005348:	2105      	movs	r1, #5
 800534a:	2093      	movs	r0, #147	; 0x93
 800534c:	f7fb fc74 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8005350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005354:	2007      	movs	r0, #7
 8005356:	f7fb fc6f 	bl	8000c38 <LCD_WriteReg>
 800535a:	f000 bdf3 	b.w	8005f44 <LCD_Init+0x3e34>
 800535e:	bf00      	nop
 8005360:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8005364:	4bc2      	ldr	r3, [pc, #776]	; (8005670 <LCD_Init+0x3560>)
 8005366:	889b      	ldrh	r3, [r3, #4]
 8005368:	f648 1289 	movw	r2, #35209	; 0x8989
 800536c:	4293      	cmp	r3, r2
 800536e:	f040 80bc 	bne.w	80054ea <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8005372:	2101      	movs	r1, #1
 8005374:	2000      	movs	r0, #0
 8005376:	f7fb fc5f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 800537a:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 800537e:	2003      	movs	r0, #3
 8005380:	f7fb fc5a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005384:	2100      	movs	r1, #0
 8005386:	200c      	movs	r0, #12
 8005388:	f7fb fc56 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 800538c:	f640 010c 	movw	r1, #2060	; 0x80c
 8005390:	200d      	movs	r0, #13
 8005392:	f7fb fc51 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8005396:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 800539a:	200e      	movs	r0, #14
 800539c:	f7fb fc4c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80053a0:	21b0      	movs	r1, #176	; 0xb0
 80053a2:	201e      	movs	r0, #30
 80053a4:	f7fb fc48 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 80053a8:	f642 313f 	movw	r1, #11071	; 0x2b3f
 80053ac:	2001      	movs	r0, #1
 80053ae:	f7fb fc43 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 80053b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053b6:	2002      	movs	r0, #2
 80053b8:	f7fb fc3e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80053bc:	2100      	movs	r1, #0
 80053be:	2010      	movs	r0, #16
 80053c0:	f7fb fc3a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 80053c4:	f246 0178 	movw	r1, #24696	; 0x6078
 80053c8:	2011      	movs	r0, #17
 80053ca:	f7fb fc35 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 80053ce:	2100      	movs	r1, #0
 80053d0:	2005      	movs	r0, #5
 80053d2:	f7fb fc31 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 80053d6:	2100      	movs	r1, #0
 80053d8:	2006      	movs	r0, #6
 80053da:	f7fb fc2d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 80053de:	f64e 711c 	movw	r1, #61212	; 0xef1c
 80053e2:	2016      	movs	r0, #22
 80053e4:	f7fb fc28 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 80053e8:	2103      	movs	r1, #3
 80053ea:	2017      	movs	r0, #23
 80053ec:	f7fb fc24 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 80053f0:	f240 2133 	movw	r1, #563	; 0x233
 80053f4:	2007      	movs	r0, #7
 80053f6:	f7fb fc1f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 80053fa:	2100      	movs	r1, #0
 80053fc:	200b      	movs	r0, #11
 80053fe:	f7fb fc1b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8005402:	2100      	movs	r1, #0
 8005404:	200f      	movs	r0, #15
 8005406:	f7fb fc17 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 800540a:	2100      	movs	r1, #0
 800540c:	2041      	movs	r0, #65	; 0x41
 800540e:	f7fb fc13 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8005412:	2100      	movs	r1, #0
 8005414:	2042      	movs	r0, #66	; 0x42
 8005416:	f7fb fc0f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 800541a:	2100      	movs	r1, #0
 800541c:	2048      	movs	r0, #72	; 0x48
 800541e:	f7fb fc0b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8005422:	f240 113f 	movw	r1, #319	; 0x13f
 8005426:	2049      	movs	r0, #73	; 0x49
 8005428:	f7fb fc06 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 800542c:	2100      	movs	r1, #0
 800542e:	204a      	movs	r0, #74	; 0x4a
 8005430:	f7fb fc02 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8005434:	2100      	movs	r1, #0
 8005436:	204b      	movs	r0, #75	; 0x4b
 8005438:	f7fb fbfe 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 800543c:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005440:	2044      	movs	r0, #68	; 0x44
 8005442:	f7fb fbf9 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8005446:	2100      	movs	r1, #0
 8005448:	2045      	movs	r0, #69	; 0x45
 800544a:	f7fb fbf5 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 800544e:	f240 113f 	movw	r1, #319	; 0x13f
 8005452:	2046      	movs	r0, #70	; 0x46
 8005454:	f7fb fbf0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8005458:	f240 7107 	movw	r1, #1799	; 0x707
 800545c:	2030      	movs	r0, #48	; 0x30
 800545e:	f7fb fbeb 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8005462:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005466:	2031      	movs	r0, #49	; 0x31
 8005468:	f7fb fbe6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 800546c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005470:	2032      	movs	r0, #50	; 0x32
 8005472:	f7fb fbe1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8005476:	f240 5102 	movw	r1, #1282	; 0x502
 800547a:	2033      	movs	r0, #51	; 0x33
 800547c:	f7fb fbdc 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005480:	f240 5107 	movw	r1, #1287	; 0x507
 8005484:	2034      	movs	r0, #52	; 0x34
 8005486:	f7fb fbd7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800548a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800548e:	2035      	movs	r0, #53	; 0x35
 8005490:	f7fb fbd2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8005494:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005498:	2036      	movs	r0, #54	; 0x36
 800549a:	f7fb fbcd 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 800549e:	f240 5102 	movw	r1, #1282	; 0x502
 80054a2:	2037      	movs	r0, #55	; 0x37
 80054a4:	f7fb fbc8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 80054a8:	f240 3102 	movw	r1, #770	; 0x302
 80054ac:	203a      	movs	r0, #58	; 0x3a
 80054ae:	f7fb fbc3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 80054b2:	f240 3102 	movw	r1, #770	; 0x302
 80054b6:	203b      	movs	r0, #59	; 0x3b
 80054b8:	f7fb fbbe 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 80054bc:	2100      	movs	r1, #0
 80054be:	2023      	movs	r0, #35	; 0x23
 80054c0:	f7fb fbba 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 80054c4:	2100      	movs	r1, #0
 80054c6:	2024      	movs	r0, #36	; 0x24
 80054c8:	f7fb fbb6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 80054cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054d0:	2025      	movs	r0, #37	; 0x25
 80054d2:	f7fb fbb1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 80054d6:	2100      	movs	r1, #0
 80054d8:	204f      	movs	r0, #79	; 0x4f
 80054da:	f7fb fbad 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 80054de:	2100      	movs	r1, #0
 80054e0:	204e      	movs	r0, #78	; 0x4e
 80054e2:	f7fb fba9 	bl	8000c38 <LCD_WriteReg>
 80054e6:	f000 bd2d 	b.w	8005f44 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 80054ea:	4b61      	ldr	r3, [pc, #388]	; (8005670 <LCD_Init+0x3560>)
 80054ec:	889b      	ldrh	r3, [r3, #4]
 80054ee:	f244 5231 	movw	r2, #17713	; 0x4531
 80054f2:	4293      	cmp	r3, r2
 80054f4:	f040 80be 	bne.w	8005674 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 80054f8:	2101      	movs	r1, #1
 80054fa:	2000      	movs	r0, #0
 80054fc:	f7fb fb9c 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(10);
 8005500:	200a      	movs	r0, #10
 8005502:	f001 fc0d 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8005506:	f241 6128 	movw	r1, #5672	; 0x1628
 800550a:	2010      	movs	r0, #16
 800550c:	f7fb fb94 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005510:	210e      	movs	r1, #14
 8005512:	2012      	movs	r0, #18
 8005514:	f7fb fb90 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005518:	f640 2139 	movw	r1, #2617	; 0xa39
 800551c:	2013      	movs	r0, #19
 800551e:	f7fb fb8b 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(10);
 8005522:	200a      	movs	r0, #10
 8005524:	f001 fbfc 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005528:	2140      	movs	r1, #64	; 0x40
 800552a:	2011      	movs	r0, #17
 800552c:	f7fb fb84 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005530:	2150      	movs	r1, #80	; 0x50
 8005532:	2015      	movs	r0, #21
 8005534:	f7fb fb80 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(10);
 8005538:	200a      	movs	r0, #10
 800553a:	f001 fbf1 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 800553e:	211e      	movs	r1, #30
 8005540:	2012      	movs	r0, #18
 8005542:	f7fb fb79 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(10);
 8005546:	200a      	movs	r0, #10
 8005548:	f001 fbea 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 800554c:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005550:	2010      	movs	r0, #16
 8005552:	f7fb fb71 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8005556:	f642 2139 	movw	r1, #10809	; 0x2a39
 800555a:	2013      	movs	r0, #19
 800555c:	f7fb fb6c 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(10);
 8005560:	200a      	movs	r0, #10
 8005562:	f001 fbdd 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8005566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800556a:	2001      	movs	r0, #1
 800556c:	f7fb fb64 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005570:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005574:	2002      	movs	r0, #2
 8005576:	f7fb fb5f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 800557a:	f241 0138 	movw	r1, #4152	; 0x1038
 800557e:	2003      	movs	r0, #3
 8005580:	f7fb fb5a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8005584:	f240 2102 	movw	r1, #514	; 0x202
 8005588:	2008      	movs	r0, #8
 800558a:	f7fb fb55 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800558e:	2108      	movs	r1, #8
 8005590:	200a      	movs	r0, #10
 8005592:	f7fb fb51 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8005596:	2100      	movs	r1, #0
 8005598:	2030      	movs	r0, #48	; 0x30
 800559a:	f7fb fb4d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800559e:	f240 4102 	movw	r1, #1026	; 0x402
 80055a2:	2031      	movs	r0, #49	; 0x31
 80055a4:	f7fb fb48 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 80055a8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80055ac:	2032      	movs	r0, #50	; 0x32
 80055ae:	f7fb fb43 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 80055b2:	f240 5103 	movw	r1, #1283	; 0x503
 80055b6:	2033      	movs	r0, #51	; 0x33
 80055b8:	f7fb fb3e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 80055bc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80055c0:	2034      	movs	r0, #52	; 0x34
 80055c2:	f7fb fb39 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 80055c6:	f240 3101 	movw	r1, #769	; 0x301
 80055ca:	2035      	movs	r0, #53	; 0x35
 80055cc:	f7fb fb34 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80055d0:	f240 7107 	movw	r1, #1799	; 0x707
 80055d4:	2036      	movs	r0, #54	; 0x36
 80055d6:	f7fb fb2f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80055da:	f240 3105 	movw	r1, #773	; 0x305
 80055de:	2037      	movs	r0, #55	; 0x37
 80055e0:	f7fb fb2a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 80055e4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80055e8:	2038      	movs	r0, #56	; 0x38
 80055ea:	f7fb fb25 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 80055ee:	f640 710b 	movw	r1, #3851	; 0xf0b
 80055f2:	2039      	movs	r0, #57	; 0x39
 80055f4:	f7fb fb20 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 80055f8:	2102      	movs	r1, #2
 80055fa:	2041      	movs	r0, #65	; 0x41
 80055fc:	f7fb fb1c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005600:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005604:	2060      	movs	r0, #96	; 0x60
 8005606:	f7fb fb17 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800560a:	2101      	movs	r1, #1
 800560c:	2061      	movs	r0, #97	; 0x61
 800560e:	f7fb fb13 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8005612:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005616:	2090      	movs	r0, #144	; 0x90
 8005618:	f7fb fb0e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 800561c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005620:	2092      	movs	r0, #146	; 0x92
 8005622:	f7fb fb09 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8005626:	2104      	movs	r1, #4
 8005628:	2093      	movs	r0, #147	; 0x93
 800562a:	f7fb fb05 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 800562e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005632:	20a0      	movs	r0, #160	; 0xa0
 8005634:	f7fb fb00 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005638:	2101      	movs	r1, #1
 800563a:	2007      	movs	r0, #7
 800563c:	f7fb fafc 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005640:	2121      	movs	r1, #33	; 0x21
 8005642:	2007      	movs	r0, #7
 8005644:	f7fb faf8 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005648:	2123      	movs	r1, #35	; 0x23
 800564a:	2007      	movs	r0, #7
 800564c:	f7fb faf4 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005650:	2133      	movs	r1, #51	; 0x33
 8005652:	2007      	movs	r0, #7
 8005654:	f7fb faf0 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005658:	f240 1133 	movw	r1, #307	; 0x133
 800565c:	2007      	movs	r0, #7
 800565e:	f7fb faeb 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8005662:	2100      	movs	r1, #0
 8005664:	20a0      	movs	r0, #160	; 0xa0
 8005666:	f7fb fae7 	bl	8000c38 <LCD_WriteReg>
 800566a:	f000 bc6b 	b.w	8005f44 <LCD_Init+0x3e34>
 800566e:	bf00      	nop
 8005670:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0x4535) {
 8005674:	4b5b      	ldr	r3, [pc, #364]	; (80057e4 <LCD_Init+0x36d4>)
 8005676:	889b      	ldrh	r3, [r3, #4]
 8005678:	f244 5235 	movw	r2, #17717	; 0x4535
 800567c:	4293      	cmp	r3, r2
 800567e:	f040 80b3 	bne.w	80057e8 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8005682:	2130      	movs	r1, #48	; 0x30
 8005684:	2015      	movs	r0, #21
 8005686:	f7fb fad7 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 800568a:	2110      	movs	r1, #16
 800568c:	209a      	movs	r0, #154	; 0x9a
 800568e:	f7fb fad3 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8005692:	2120      	movs	r1, #32
 8005694:	2011      	movs	r0, #17
 8005696:	f7fb facf 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 800569a:	f243 4128 	movw	r1, #13352	; 0x3428
 800569e:	2010      	movs	r0, #16
 80056a0:	f7fb faca 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80056a4:	2102      	movs	r1, #2
 80056a6:	2012      	movs	r0, #18
 80056a8:	f7fb fac6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 80056ac:	f241 0138 	movw	r1, #4152	; 0x1038
 80056b0:	2013      	movs	r0, #19
 80056b2:	f7fb fac1 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(40);
 80056b6:	2028      	movs	r0, #40	; 0x28
 80056b8:	f001 fb32 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 80056bc:	2112      	movs	r1, #18
 80056be:	2012      	movs	r0, #18
 80056c0:	f7fb faba 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(40);
 80056c4:	2028      	movs	r0, #40	; 0x28
 80056c6:	f001 fb2b 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 80056ca:	f243 4120 	movw	r1, #13344	; 0x3420
 80056ce:	2010      	movs	r0, #16
 80056d0:	f7fb fab2 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 80056d4:	f243 0138 	movw	r1, #12344	; 0x3038
 80056d8:	2013      	movs	r0, #19
 80056da:	f7fb faad 	bl	8000c38 <LCD_WriteReg>
		HAL_Delay(70);
 80056de:	2046      	movs	r0, #70	; 0x46
 80056e0:	f001 fb1e 	bl	8006d20 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 80056e4:	2100      	movs	r1, #0
 80056e6:	2030      	movs	r0, #48	; 0x30
 80056e8:	f7fb faa6 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80056ec:	f240 4102 	movw	r1, #1026	; 0x402
 80056f0:	2031      	movs	r0, #49	; 0x31
 80056f2:	f7fb faa1 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 80056f6:	f240 3107 	movw	r1, #775	; 0x307
 80056fa:	2032      	movs	r0, #50	; 0x32
 80056fc:	f7fb fa9c 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005700:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005704:	2033      	movs	r0, #51	; 0x33
 8005706:	f7fb fa97 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 800570a:	2104      	movs	r1, #4
 800570c:	2034      	movs	r0, #52	; 0x34
 800570e:	f7fb fa93 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8005712:	f240 4101 	movw	r1, #1025	; 0x401
 8005716:	2035      	movs	r0, #53	; 0x35
 8005718:	f7fb fa8e 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 800571c:	f240 7107 	movw	r1, #1799	; 0x707
 8005720:	2036      	movs	r0, #54	; 0x36
 8005722:	f7fb fa89 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005726:	f240 3105 	movw	r1, #773	; 0x305
 800572a:	2037      	movs	r0, #55	; 0x37
 800572c:	f7fb fa84 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005730:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005734:	2038      	movs	r0, #56	; 0x38
 8005736:	f7fb fa7f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 800573a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800573e:	2039      	movs	r0, #57	; 0x39
 8005740:	f7fb fa7a 	bl	8000c38 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8005744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005748:	2001      	movs	r0, #1
 800574a:	f7fb fa75 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 800574e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005752:	2002      	movs	r0, #2
 8005754:	f7fb fa70 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005758:	f241 0130 	movw	r1, #4144	; 0x1030
 800575c:	2003      	movs	r0, #3
 800575e:	f7fb fa6b 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8005762:	f640 0108 	movw	r1, #2056	; 0x808
 8005766:	2008      	movs	r0, #8
 8005768:	f7fb fa66 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800576c:	2108      	movs	r1, #8
 800576e:	200a      	movs	r0, #10
 8005770:	f7fb fa62 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005774:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005778:	2060      	movs	r0, #96	; 0x60
 800577a:	f7fb fa5d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800577e:	2101      	movs	r1, #1
 8005780:	2061      	movs	r0, #97	; 0x61
 8005782:	f7fb fa59 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8005786:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800578a:	2090      	movs	r0, #144	; 0x90
 800578c:	f7fb fa54 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005794:	2092      	movs	r0, #146	; 0x92
 8005796:	f7fb fa4f 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 800579a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800579e:	2093      	movs	r0, #147	; 0x93
 80057a0:	f7fb fa4a 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80057a4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80057a8:	20a0      	movs	r0, #160	; 0xa0
 80057aa:	f7fb fa45 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 80057ae:	2110      	movs	r1, #16
 80057b0:	20a3      	movs	r0, #163	; 0xa3
 80057b2:	f7fb fa41 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80057b6:	2101      	movs	r1, #1
 80057b8:	2007      	movs	r0, #7
 80057ba:	f7fb fa3d 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80057be:	2121      	movs	r1, #33	; 0x21
 80057c0:	2007      	movs	r0, #7
 80057c2:	f7fb fa39 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80057c6:	2123      	movs	r1, #35	; 0x23
 80057c8:	2007      	movs	r0, #7
 80057ca:	f7fb fa35 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80057ce:	2133      	movs	r1, #51	; 0x33
 80057d0:	2007      	movs	r0, #7
 80057d2:	f7fb fa31 	bl	8000c38 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80057d6:	f240 1133 	movw	r1, #307	; 0x133
 80057da:	2007      	movs	r0, #7
 80057dc:	f7fb fa2c 	bl	8000c38 <LCD_WriteReg>
 80057e0:	e3b0      	b.n	8005f44 <LCD_Init+0x3e34>
 80057e2:	bf00      	nop
 80057e4:	20000030 	.word	0x20000030
	} else if (lcddev.id == 0X1963) {
 80057e8:	4ba8      	ldr	r3, [pc, #672]	; (8005a8c <LCD_Init+0x397c>)
 80057ea:	889b      	ldrh	r3, [r3, #4]
 80057ec:	f641 1263 	movw	r2, #6499	; 0x1963
 80057f0:	4293      	cmp	r3, r2
 80057f2:	f040 83a7 	bne.w	8005f44 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80057f6:	20e2      	movs	r0, #226	; 0xe2
 80057f8:	f7fb f992 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 80057fc:	4ba4      	ldr	r3, [pc, #656]	; (8005a90 <LCD_Init+0x3980>)
 80057fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005802:	611a      	str	r2, [r3, #16]
 8005804:	4ba2      	ldr	r3, [pc, #648]	; (8005a90 <LCD_Init+0x3980>)
 8005806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580a:	615a      	str	r2, [r3, #20]
 800580c:	4ba1      	ldr	r3, [pc, #644]	; (8005a94 <LCD_Init+0x3984>)
 800580e:	221d      	movs	r2, #29
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	4b9f      	ldr	r3, [pc, #636]	; (8005a90 <LCD_Init+0x3980>)
 8005814:	2280      	movs	r2, #128	; 0x80
 8005816:	615a      	str	r2, [r3, #20]
 8005818:	4b9d      	ldr	r3, [pc, #628]	; (8005a90 <LCD_Init+0x3980>)
 800581a:	2280      	movs	r2, #128	; 0x80
 800581c:	611a      	str	r2, [r3, #16]
 800581e:	4b9c      	ldr	r3, [pc, #624]	; (8005a90 <LCD_Init+0x3980>)
 8005820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005824:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005826:	4b9a      	ldr	r3, [pc, #616]	; (8005a90 <LCD_Init+0x3980>)
 8005828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800582c:	611a      	str	r2, [r3, #16]
 800582e:	4b98      	ldr	r3, [pc, #608]	; (8005a90 <LCD_Init+0x3980>)
 8005830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005834:	615a      	str	r2, [r3, #20]
 8005836:	4b97      	ldr	r3, [pc, #604]	; (8005a94 <LCD_Init+0x3984>)
 8005838:	2202      	movs	r2, #2
 800583a:	60da      	str	r2, [r3, #12]
 800583c:	4b94      	ldr	r3, [pc, #592]	; (8005a90 <LCD_Init+0x3980>)
 800583e:	2280      	movs	r2, #128	; 0x80
 8005840:	615a      	str	r2, [r3, #20]
 8005842:	4b93      	ldr	r3, [pc, #588]	; (8005a90 <LCD_Init+0x3980>)
 8005844:	2280      	movs	r2, #128	; 0x80
 8005846:	611a      	str	r2, [r3, #16]
 8005848:	4b91      	ldr	r3, [pc, #580]	; (8005a90 <LCD_Init+0x3980>)
 800584a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005850:	4b8f      	ldr	r3, [pc, #572]	; (8005a90 <LCD_Init+0x3980>)
 8005852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005856:	611a      	str	r2, [r3, #16]
 8005858:	4b8d      	ldr	r3, [pc, #564]	; (8005a90 <LCD_Init+0x3980>)
 800585a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800585e:	615a      	str	r2, [r3, #20]
 8005860:	4b8c      	ldr	r3, [pc, #560]	; (8005a94 <LCD_Init+0x3984>)
 8005862:	2204      	movs	r2, #4
 8005864:	60da      	str	r2, [r3, #12]
 8005866:	4b8a      	ldr	r3, [pc, #552]	; (8005a90 <LCD_Init+0x3980>)
 8005868:	2280      	movs	r2, #128	; 0x80
 800586a:	615a      	str	r2, [r3, #20]
 800586c:	4b88      	ldr	r3, [pc, #544]	; (8005a90 <LCD_Init+0x3980>)
 800586e:	2280      	movs	r2, #128	; 0x80
 8005870:	611a      	str	r2, [r3, #16]
 8005872:	4b87      	ldr	r3, [pc, #540]	; (8005a90 <LCD_Init+0x3980>)
 8005874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005878:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 800587a:	2001      	movs	r0, #1
 800587c:	f001 fa50 	bl	8006d20 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005880:	20e0      	movs	r0, #224	; 0xe0
 8005882:	f7fb f94d 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005886:	4b82      	ldr	r3, [pc, #520]	; (8005a90 <LCD_Init+0x3980>)
 8005888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800588c:	611a      	str	r2, [r3, #16]
 800588e:	4b80      	ldr	r3, [pc, #512]	; (8005a90 <LCD_Init+0x3980>)
 8005890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005894:	615a      	str	r2, [r3, #20]
 8005896:	4b7f      	ldr	r3, [pc, #508]	; (8005a94 <LCD_Init+0x3984>)
 8005898:	2201      	movs	r2, #1
 800589a:	60da      	str	r2, [r3, #12]
 800589c:	4b7c      	ldr	r3, [pc, #496]	; (8005a90 <LCD_Init+0x3980>)
 800589e:	2280      	movs	r2, #128	; 0x80
 80058a0:	615a      	str	r2, [r3, #20]
 80058a2:	4b7b      	ldr	r3, [pc, #492]	; (8005a90 <LCD_Init+0x3980>)
 80058a4:	2280      	movs	r2, #128	; 0x80
 80058a6:	611a      	str	r2, [r3, #16]
 80058a8:	4b79      	ldr	r3, [pc, #484]	; (8005a90 <LCD_Init+0x3980>)
 80058aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ae:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 80058b0:	200a      	movs	r0, #10
 80058b2:	f001 fa35 	bl	8006d20 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 80058b6:	20e0      	movs	r0, #224	; 0xe0
 80058b8:	f7fb f932 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 80058bc:	4b74      	ldr	r3, [pc, #464]	; (8005a90 <LCD_Init+0x3980>)
 80058be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058c2:	611a      	str	r2, [r3, #16]
 80058c4:	4b72      	ldr	r3, [pc, #456]	; (8005a90 <LCD_Init+0x3980>)
 80058c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ca:	615a      	str	r2, [r3, #20]
 80058cc:	4b71      	ldr	r3, [pc, #452]	; (8005a94 <LCD_Init+0x3984>)
 80058ce:	2203      	movs	r2, #3
 80058d0:	60da      	str	r2, [r3, #12]
 80058d2:	4b6f      	ldr	r3, [pc, #444]	; (8005a90 <LCD_Init+0x3980>)
 80058d4:	2280      	movs	r2, #128	; 0x80
 80058d6:	615a      	str	r2, [r3, #20]
 80058d8:	4b6d      	ldr	r3, [pc, #436]	; (8005a90 <LCD_Init+0x3980>)
 80058da:	2280      	movs	r2, #128	; 0x80
 80058dc:	611a      	str	r2, [r3, #16]
 80058de:	4b6c      	ldr	r3, [pc, #432]	; (8005a90 <LCD_Init+0x3980>)
 80058e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e4:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 80058e6:	200c      	movs	r0, #12
 80058e8:	f001 fa1a 	bl	8006d20 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80058ec:	2001      	movs	r0, #1
 80058ee:	f7fb f917 	bl	8000b20 <LCD_WR_REG>
		HAL_Delay(10);
 80058f2:	200a      	movs	r0, #10
 80058f4:	f001 fa14 	bl	8006d20 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80058f8:	20e6      	movs	r0, #230	; 0xe6
 80058fa:	f7fb f911 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80058fe:	4b64      	ldr	r3, [pc, #400]	; (8005a90 <LCD_Init+0x3980>)
 8005900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005904:	611a      	str	r2, [r3, #16]
 8005906:	4b62      	ldr	r3, [pc, #392]	; (8005a90 <LCD_Init+0x3980>)
 8005908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590c:	615a      	str	r2, [r3, #20]
 800590e:	4b61      	ldr	r3, [pc, #388]	; (8005a94 <LCD_Init+0x3984>)
 8005910:	222f      	movs	r2, #47	; 0x2f
 8005912:	60da      	str	r2, [r3, #12]
 8005914:	4b5e      	ldr	r3, [pc, #376]	; (8005a90 <LCD_Init+0x3980>)
 8005916:	2280      	movs	r2, #128	; 0x80
 8005918:	615a      	str	r2, [r3, #20]
 800591a:	4b5d      	ldr	r3, [pc, #372]	; (8005a90 <LCD_Init+0x3980>)
 800591c:	2280      	movs	r2, #128	; 0x80
 800591e:	611a      	str	r2, [r3, #16]
 8005920:	4b5b      	ldr	r3, [pc, #364]	; (8005a90 <LCD_Init+0x3980>)
 8005922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005926:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005928:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <LCD_Init+0x3980>)
 800592a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800592e:	611a      	str	r2, [r3, #16]
 8005930:	4b57      	ldr	r3, [pc, #348]	; (8005a90 <LCD_Init+0x3980>)
 8005932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005936:	615a      	str	r2, [r3, #20]
 8005938:	4b56      	ldr	r3, [pc, #344]	; (8005a94 <LCD_Init+0x3984>)
 800593a:	22ff      	movs	r2, #255	; 0xff
 800593c:	60da      	str	r2, [r3, #12]
 800593e:	4b54      	ldr	r3, [pc, #336]	; (8005a90 <LCD_Init+0x3980>)
 8005940:	2280      	movs	r2, #128	; 0x80
 8005942:	615a      	str	r2, [r3, #20]
 8005944:	4b52      	ldr	r3, [pc, #328]	; (8005a90 <LCD_Init+0x3980>)
 8005946:	2280      	movs	r2, #128	; 0x80
 8005948:	611a      	str	r2, [r3, #16]
 800594a:	4b51      	ldr	r3, [pc, #324]	; (8005a90 <LCD_Init+0x3980>)
 800594c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005950:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005952:	4b4f      	ldr	r3, [pc, #316]	; (8005a90 <LCD_Init+0x3980>)
 8005954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005958:	611a      	str	r2, [r3, #16]
 800595a:	4b4d      	ldr	r3, [pc, #308]	; (8005a90 <LCD_Init+0x3980>)
 800595c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005960:	615a      	str	r2, [r3, #20]
 8005962:	4b4c      	ldr	r3, [pc, #304]	; (8005a94 <LCD_Init+0x3984>)
 8005964:	22ff      	movs	r2, #255	; 0xff
 8005966:	60da      	str	r2, [r3, #12]
 8005968:	4b49      	ldr	r3, [pc, #292]	; (8005a90 <LCD_Init+0x3980>)
 800596a:	2280      	movs	r2, #128	; 0x80
 800596c:	615a      	str	r2, [r3, #20]
 800596e:	4b48      	ldr	r3, [pc, #288]	; (8005a90 <LCD_Init+0x3980>)
 8005970:	2280      	movs	r2, #128	; 0x80
 8005972:	611a      	str	r2, [r3, #16]
 8005974:	4b46      	ldr	r3, [pc, #280]	; (8005a90 <LCD_Init+0x3980>)
 8005976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 800597c:	20b0      	movs	r0, #176	; 0xb0
 800597e:	f7fb f8cf 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005982:	4b43      	ldr	r3, [pc, #268]	; (8005a90 <LCD_Init+0x3980>)
 8005984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005988:	611a      	str	r2, [r3, #16]
 800598a:	4b41      	ldr	r3, [pc, #260]	; (8005a90 <LCD_Init+0x3980>)
 800598c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005990:	615a      	str	r2, [r3, #20]
 8005992:	4b40      	ldr	r3, [pc, #256]	; (8005a94 <LCD_Init+0x3984>)
 8005994:	2220      	movs	r2, #32
 8005996:	60da      	str	r2, [r3, #12]
 8005998:	4b3d      	ldr	r3, [pc, #244]	; (8005a90 <LCD_Init+0x3980>)
 800599a:	2280      	movs	r2, #128	; 0x80
 800599c:	615a      	str	r2, [r3, #20]
 800599e:	4b3c      	ldr	r3, [pc, #240]	; (8005a90 <LCD_Init+0x3980>)
 80059a0:	2280      	movs	r2, #128	; 0x80
 80059a2:	611a      	str	r2, [r3, #16]
 80059a4:	4b3a      	ldr	r3, [pc, #232]	; (8005a90 <LCD_Init+0x3980>)
 80059a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059aa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 80059ac:	4b38      	ldr	r3, [pc, #224]	; (8005a90 <LCD_Init+0x3980>)
 80059ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059b2:	611a      	str	r2, [r3, #16]
 80059b4:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <LCD_Init+0x3980>)
 80059b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ba:	615a      	str	r2, [r3, #20]
 80059bc:	4b35      	ldr	r3, [pc, #212]	; (8005a94 <LCD_Init+0x3984>)
 80059be:	2200      	movs	r2, #0
 80059c0:	60da      	str	r2, [r3, #12]
 80059c2:	4b33      	ldr	r3, [pc, #204]	; (8005a90 <LCD_Init+0x3980>)
 80059c4:	2280      	movs	r2, #128	; 0x80
 80059c6:	615a      	str	r2, [r3, #20]
 80059c8:	4b31      	ldr	r3, [pc, #196]	; (8005a90 <LCD_Init+0x3980>)
 80059ca:	2280      	movs	r2, #128	; 0x80
 80059cc:	611a      	str	r2, [r3, #16]
 80059ce:	4b30      	ldr	r3, [pc, #192]	; (8005a90 <LCD_Init+0x3980>)
 80059d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d4:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 80059d6:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <LCD_Init+0x3980>)
 80059d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059dc:	611a      	str	r2, [r3, #16]
 80059de:	4b2c      	ldr	r3, [pc, #176]	; (8005a90 <LCD_Init+0x3980>)
 80059e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e4:	615a      	str	r2, [r3, #20]
 80059e6:	4b2b      	ldr	r3, [pc, #172]	; (8005a94 <LCD_Init+0x3984>)
 80059e8:	2203      	movs	r2, #3
 80059ea:	60da      	str	r2, [r3, #12]
 80059ec:	4b28      	ldr	r3, [pc, #160]	; (8005a90 <LCD_Init+0x3980>)
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	615a      	str	r2, [r3, #20]
 80059f2:	4b27      	ldr	r3, [pc, #156]	; (8005a90 <LCD_Init+0x3980>)
 80059f4:	2280      	movs	r2, #128	; 0x80
 80059f6:	611a      	str	r2, [r3, #16]
 80059f8:	4b25      	ldr	r3, [pc, #148]	; (8005a90 <LCD_Init+0x3980>)
 80059fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005a00:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <LCD_Init+0x3980>)
 8005a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a06:	611a      	str	r2, [r3, #16]
 8005a08:	4b21      	ldr	r3, [pc, #132]	; (8005a90 <LCD_Init+0x3980>)
 8005a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0e:	615a      	str	r2, [r3, #20]
 8005a10:	4b20      	ldr	r3, [pc, #128]	; (8005a94 <LCD_Init+0x3984>)
 8005a12:	f240 321f 	movw	r2, #799	; 0x31f
 8005a16:	60da      	str	r2, [r3, #12]
 8005a18:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <LCD_Init+0x3980>)
 8005a1a:	2280      	movs	r2, #128	; 0x80
 8005a1c:	615a      	str	r2, [r3, #20]
 8005a1e:	4b1c      	ldr	r3, [pc, #112]	; (8005a90 <LCD_Init+0x3980>)
 8005a20:	2280      	movs	r2, #128	; 0x80
 8005a22:	611a      	str	r2, [r3, #16]
 8005a24:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <LCD_Init+0x3980>)
 8005a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a2a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005a2c:	4b18      	ldr	r3, [pc, #96]	; (8005a90 <LCD_Init+0x3980>)
 8005a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a32:	611a      	str	r2, [r3, #16]
 8005a34:	4b16      	ldr	r3, [pc, #88]	; (8005a90 <LCD_Init+0x3980>)
 8005a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3a:	615a      	str	r2, [r3, #20]
 8005a3c:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <LCD_Init+0x3984>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	60da      	str	r2, [r3, #12]
 8005a42:	4b13      	ldr	r3, [pc, #76]	; (8005a90 <LCD_Init+0x3980>)
 8005a44:	2280      	movs	r2, #128	; 0x80
 8005a46:	615a      	str	r2, [r3, #20]
 8005a48:	4b11      	ldr	r3, [pc, #68]	; (8005a90 <LCD_Init+0x3980>)
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	611a      	str	r2, [r3, #16]
 8005a4e:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <LCD_Init+0x3980>)
 8005a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a54:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005a56:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <LCD_Init+0x3980>)
 8005a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a5c:	611a      	str	r2, [r3, #16]
 8005a5e:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <LCD_Init+0x3980>)
 8005a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a64:	615a      	str	r2, [r3, #20]
 8005a66:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <LCD_Init+0x3984>)
 8005a68:	f240 12df 	movw	r2, #479	; 0x1df
 8005a6c:	60da      	str	r2, [r3, #12]
 8005a6e:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <LCD_Init+0x3980>)
 8005a70:	2280      	movs	r2, #128	; 0x80
 8005a72:	615a      	str	r2, [r3, #20]
 8005a74:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <LCD_Init+0x3980>)
 8005a76:	2280      	movs	r2, #128	; 0x80
 8005a78:	611a      	str	r2, [r3, #16]
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <LCD_Init+0x3980>)
 8005a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a80:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005a82:	4b03      	ldr	r3, [pc, #12]	; (8005a90 <LCD_Init+0x3980>)
 8005a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a88:	e006      	b.n	8005a98 <LCD_Init+0x3988>
 8005a8a:	bf00      	nop
 8005a8c:	20000030 	.word	0x20000030
 8005a90:	40011000 	.word	0x40011000
 8005a94:	40010c00 	.word	0x40010c00
 8005a98:	611a      	str	r2, [r3, #16]
 8005a9a:	4ba3      	ldr	r3, [pc, #652]	; (8005d28 <LCD_Init+0x3c18>)
 8005a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa0:	615a      	str	r2, [r3, #20]
 8005aa2:	4ba2      	ldr	r3, [pc, #648]	; (8005d2c <LCD_Init+0x3c1c>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	60da      	str	r2, [r3, #12]
 8005aa8:	4b9f      	ldr	r3, [pc, #636]	; (8005d28 <LCD_Init+0x3c18>)
 8005aaa:	2280      	movs	r2, #128	; 0x80
 8005aac:	615a      	str	r2, [r3, #20]
 8005aae:	4b9e      	ldr	r3, [pc, #632]	; (8005d28 <LCD_Init+0x3c18>)
 8005ab0:	2280      	movs	r2, #128	; 0x80
 8005ab2:	611a      	str	r2, [r3, #16]
 8005ab4:	4b9c      	ldr	r3, [pc, #624]	; (8005d28 <LCD_Init+0x3c18>)
 8005ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aba:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005abc:	20b4      	movs	r0, #180	; 0xb4
 8005abe:	f7fb f82f 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005ac2:	4b99      	ldr	r3, [pc, #612]	; (8005d28 <LCD_Init+0x3c18>)
 8005ac4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ac8:	611a      	str	r2, [r3, #16]
 8005aca:	4b97      	ldr	r3, [pc, #604]	; (8005d28 <LCD_Init+0x3c18>)
 8005acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad0:	615a      	str	r2, [r3, #20]
 8005ad2:	4b96      	ldr	r3, [pc, #600]	; (8005d2c <LCD_Init+0x3c1c>)
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	60da      	str	r2, [r3, #12]
 8005ad8:	4b93      	ldr	r3, [pc, #588]	; (8005d28 <LCD_Init+0x3c18>)
 8005ada:	2280      	movs	r2, #128	; 0x80
 8005adc:	615a      	str	r2, [r3, #20]
 8005ade:	4b92      	ldr	r3, [pc, #584]	; (8005d28 <LCD_Init+0x3c18>)
 8005ae0:	2280      	movs	r2, #128	; 0x80
 8005ae2:	611a      	str	r2, [r3, #16]
 8005ae4:	4b90      	ldr	r3, [pc, #576]	; (8005d28 <LCD_Init+0x3c18>)
 8005ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005aec:	4b8e      	ldr	r3, [pc, #568]	; (8005d28 <LCD_Init+0x3c18>)
 8005aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005af2:	611a      	str	r2, [r3, #16]
 8005af4:	4b8c      	ldr	r3, [pc, #560]	; (8005d28 <LCD_Init+0x3c18>)
 8005af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005afa:	615a      	str	r2, [r3, #20]
 8005afc:	4b8b      	ldr	r3, [pc, #556]	; (8005d2c <LCD_Init+0x3c1c>)
 8005afe:	f240 421f 	movw	r2, #1055	; 0x41f
 8005b02:	60da      	str	r2, [r3, #12]
 8005b04:	4b88      	ldr	r3, [pc, #544]	; (8005d28 <LCD_Init+0x3c18>)
 8005b06:	2280      	movs	r2, #128	; 0x80
 8005b08:	615a      	str	r2, [r3, #20]
 8005b0a:	4b87      	ldr	r3, [pc, #540]	; (8005d28 <LCD_Init+0x3c18>)
 8005b0c:	2280      	movs	r2, #128	; 0x80
 8005b0e:	611a      	str	r2, [r3, #16]
 8005b10:	4b85      	ldr	r3, [pc, #532]	; (8005d28 <LCD_Init+0x3c18>)
 8005b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b16:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005b18:	4b83      	ldr	r3, [pc, #524]	; (8005d28 <LCD_Init+0x3c18>)
 8005b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b1e:	611a      	str	r2, [r3, #16]
 8005b20:	4b81      	ldr	r3, [pc, #516]	; (8005d28 <LCD_Init+0x3c18>)
 8005b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b26:	615a      	str	r2, [r3, #20]
 8005b28:	4b80      	ldr	r3, [pc, #512]	; (8005d2c <LCD_Init+0x3c1c>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	4b7e      	ldr	r3, [pc, #504]	; (8005d28 <LCD_Init+0x3c18>)
 8005b30:	2280      	movs	r2, #128	; 0x80
 8005b32:	615a      	str	r2, [r3, #20]
 8005b34:	4b7c      	ldr	r3, [pc, #496]	; (8005d28 <LCD_Init+0x3c18>)
 8005b36:	2280      	movs	r2, #128	; 0x80
 8005b38:	611a      	str	r2, [r3, #16]
 8005b3a:	4b7b      	ldr	r3, [pc, #492]	; (8005d28 <LCD_Init+0x3c18>)
 8005b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b40:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005b42:	4b79      	ldr	r3, [pc, #484]	; (8005d28 <LCD_Init+0x3c18>)
 8005b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b48:	611a      	str	r2, [r3, #16]
 8005b4a:	4b77      	ldr	r3, [pc, #476]	; (8005d28 <LCD_Init+0x3c18>)
 8005b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b50:	615a      	str	r2, [r3, #20]
 8005b52:	4b76      	ldr	r3, [pc, #472]	; (8005d2c <LCD_Init+0x3c1c>)
 8005b54:	222e      	movs	r2, #46	; 0x2e
 8005b56:	60da      	str	r2, [r3, #12]
 8005b58:	4b73      	ldr	r3, [pc, #460]	; (8005d28 <LCD_Init+0x3c18>)
 8005b5a:	2280      	movs	r2, #128	; 0x80
 8005b5c:	615a      	str	r2, [r3, #20]
 8005b5e:	4b72      	ldr	r3, [pc, #456]	; (8005d28 <LCD_Init+0x3c18>)
 8005b60:	2280      	movs	r2, #128	; 0x80
 8005b62:	611a      	str	r2, [r3, #16]
 8005b64:	4b70      	ldr	r3, [pc, #448]	; (8005d28 <LCD_Init+0x3c18>)
 8005b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b6a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005b6c:	4b6e      	ldr	r3, [pc, #440]	; (8005d28 <LCD_Init+0x3c18>)
 8005b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b72:	611a      	str	r2, [r3, #16]
 8005b74:	4b6c      	ldr	r3, [pc, #432]	; (8005d28 <LCD_Init+0x3c18>)
 8005b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7a:	615a      	str	r2, [r3, #20]
 8005b7c:	4b6b      	ldr	r3, [pc, #428]	; (8005d2c <LCD_Init+0x3c1c>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	60da      	str	r2, [r3, #12]
 8005b82:	4b69      	ldr	r3, [pc, #420]	; (8005d28 <LCD_Init+0x3c18>)
 8005b84:	2280      	movs	r2, #128	; 0x80
 8005b86:	615a      	str	r2, [r3, #20]
 8005b88:	4b67      	ldr	r3, [pc, #412]	; (8005d28 <LCD_Init+0x3c18>)
 8005b8a:	2280      	movs	r2, #128	; 0x80
 8005b8c:	611a      	str	r2, [r3, #16]
 8005b8e:	4b66      	ldr	r3, [pc, #408]	; (8005d28 <LCD_Init+0x3c18>)
 8005b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b94:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b96:	4b64      	ldr	r3, [pc, #400]	; (8005d28 <LCD_Init+0x3c18>)
 8005b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b9c:	611a      	str	r2, [r3, #16]
 8005b9e:	4b62      	ldr	r3, [pc, #392]	; (8005d28 <LCD_Init+0x3c18>)
 8005ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba4:	615a      	str	r2, [r3, #20]
 8005ba6:	4b61      	ldr	r3, [pc, #388]	; (8005d2c <LCD_Init+0x3c1c>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	60da      	str	r2, [r3, #12]
 8005bac:	4b5e      	ldr	r3, [pc, #376]	; (8005d28 <LCD_Init+0x3c18>)
 8005bae:	2280      	movs	r2, #128	; 0x80
 8005bb0:	615a      	str	r2, [r3, #20]
 8005bb2:	4b5d      	ldr	r3, [pc, #372]	; (8005d28 <LCD_Init+0x3c18>)
 8005bb4:	2280      	movs	r2, #128	; 0x80
 8005bb6:	611a      	str	r2, [r3, #16]
 8005bb8:	4b5b      	ldr	r3, [pc, #364]	; (8005d28 <LCD_Init+0x3c18>)
 8005bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bbe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005bc0:	4b59      	ldr	r3, [pc, #356]	; (8005d28 <LCD_Init+0x3c18>)
 8005bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bc6:	611a      	str	r2, [r3, #16]
 8005bc8:	4b57      	ldr	r3, [pc, #348]	; (8005d28 <LCD_Init+0x3c18>)
 8005bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bce:	615a      	str	r2, [r3, #20]
 8005bd0:	4b56      	ldr	r3, [pc, #344]	; (8005d2c <LCD_Init+0x3c1c>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	60da      	str	r2, [r3, #12]
 8005bd6:	4b54      	ldr	r3, [pc, #336]	; (8005d28 <LCD_Init+0x3c18>)
 8005bd8:	2280      	movs	r2, #128	; 0x80
 8005bda:	615a      	str	r2, [r3, #20]
 8005bdc:	4b52      	ldr	r3, [pc, #328]	; (8005d28 <LCD_Init+0x3c18>)
 8005bde:	2280      	movs	r2, #128	; 0x80
 8005be0:	611a      	str	r2, [r3, #16]
 8005be2:	4b51      	ldr	r3, [pc, #324]	; (8005d28 <LCD_Init+0x3c18>)
 8005be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005bea:	4b4f      	ldr	r3, [pc, #316]	; (8005d28 <LCD_Init+0x3c18>)
 8005bec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf0:	611a      	str	r2, [r3, #16]
 8005bf2:	4b4d      	ldr	r3, [pc, #308]	; (8005d28 <LCD_Init+0x3c18>)
 8005bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf8:	615a      	str	r2, [r3, #20]
 8005bfa:	4b4c      	ldr	r3, [pc, #304]	; (8005d2c <LCD_Init+0x3c1c>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	60da      	str	r2, [r3, #12]
 8005c00:	4b49      	ldr	r3, [pc, #292]	; (8005d28 <LCD_Init+0x3c18>)
 8005c02:	2280      	movs	r2, #128	; 0x80
 8005c04:	615a      	str	r2, [r3, #20]
 8005c06:	4b48      	ldr	r3, [pc, #288]	; (8005d28 <LCD_Init+0x3c18>)
 8005c08:	2280      	movs	r2, #128	; 0x80
 8005c0a:	611a      	str	r2, [r3, #16]
 8005c0c:	4b46      	ldr	r3, [pc, #280]	; (8005d28 <LCD_Init+0x3c18>)
 8005c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c12:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005c14:	20b6      	movs	r0, #182	; 0xb6
 8005c16:	f7fa ff83 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005c1a:	4b43      	ldr	r3, [pc, #268]	; (8005d28 <LCD_Init+0x3c18>)
 8005c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c20:	611a      	str	r2, [r3, #16]
 8005c22:	4b41      	ldr	r3, [pc, #260]	; (8005d28 <LCD_Init+0x3c18>)
 8005c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c28:	615a      	str	r2, [r3, #20]
 8005c2a:	4b40      	ldr	r3, [pc, #256]	; (8005d2c <LCD_Init+0x3c1c>)
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	60da      	str	r2, [r3, #12]
 8005c30:	4b3d      	ldr	r3, [pc, #244]	; (8005d28 <LCD_Init+0x3c18>)
 8005c32:	2280      	movs	r2, #128	; 0x80
 8005c34:	615a      	str	r2, [r3, #20]
 8005c36:	4b3c      	ldr	r3, [pc, #240]	; (8005d28 <LCD_Init+0x3c18>)
 8005c38:	2280      	movs	r2, #128	; 0x80
 8005c3a:	611a      	str	r2, [r3, #16]
 8005c3c:	4b3a      	ldr	r3, [pc, #232]	; (8005d28 <LCD_Init+0x3c18>)
 8005c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c42:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005c44:	4b38      	ldr	r3, [pc, #224]	; (8005d28 <LCD_Init+0x3c18>)
 8005c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c4a:	611a      	str	r2, [r3, #16]
 8005c4c:	4b36      	ldr	r3, [pc, #216]	; (8005d28 <LCD_Init+0x3c18>)
 8005c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c52:	615a      	str	r2, [r3, #20]
 8005c54:	4b35      	ldr	r3, [pc, #212]	; (8005d2c <LCD_Init+0x3c1c>)
 8005c56:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005c5a:	60da      	str	r2, [r3, #12]
 8005c5c:	4b32      	ldr	r3, [pc, #200]	; (8005d28 <LCD_Init+0x3c18>)
 8005c5e:	2280      	movs	r2, #128	; 0x80
 8005c60:	615a      	str	r2, [r3, #20]
 8005c62:	4b31      	ldr	r3, [pc, #196]	; (8005d28 <LCD_Init+0x3c18>)
 8005c64:	2280      	movs	r2, #128	; 0x80
 8005c66:	611a      	str	r2, [r3, #16]
 8005c68:	4b2f      	ldr	r3, [pc, #188]	; (8005d28 <LCD_Init+0x3c18>)
 8005c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c6e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005c70:	4b2d      	ldr	r3, [pc, #180]	; (8005d28 <LCD_Init+0x3c18>)
 8005c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c76:	611a      	str	r2, [r3, #16]
 8005c78:	4b2b      	ldr	r3, [pc, #172]	; (8005d28 <LCD_Init+0x3c18>)
 8005c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c7e:	615a      	str	r2, [r3, #20]
 8005c80:	4b2a      	ldr	r3, [pc, #168]	; (8005d2c <LCD_Init+0x3c1c>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	60da      	str	r2, [r3, #12]
 8005c86:	4b28      	ldr	r3, [pc, #160]	; (8005d28 <LCD_Init+0x3c18>)
 8005c88:	2280      	movs	r2, #128	; 0x80
 8005c8a:	615a      	str	r2, [r3, #20]
 8005c8c:	4b26      	ldr	r3, [pc, #152]	; (8005d28 <LCD_Init+0x3c18>)
 8005c8e:	2280      	movs	r2, #128	; 0x80
 8005c90:	611a      	str	r2, [r3, #16]
 8005c92:	4b25      	ldr	r3, [pc, #148]	; (8005d28 <LCD_Init+0x3c18>)
 8005c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c98:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005c9a:	4b23      	ldr	r3, [pc, #140]	; (8005d28 <LCD_Init+0x3c18>)
 8005c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca0:	611a      	str	r2, [r3, #16]
 8005ca2:	4b21      	ldr	r3, [pc, #132]	; (8005d28 <LCD_Init+0x3c18>)
 8005ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca8:	615a      	str	r2, [r3, #20]
 8005caa:	4b20      	ldr	r3, [pc, #128]	; (8005d2c <LCD_Init+0x3c1c>)
 8005cac:	2217      	movs	r2, #23
 8005cae:	60da      	str	r2, [r3, #12]
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <LCD_Init+0x3c18>)
 8005cb2:	2280      	movs	r2, #128	; 0x80
 8005cb4:	615a      	str	r2, [r3, #20]
 8005cb6:	4b1c      	ldr	r3, [pc, #112]	; (8005d28 <LCD_Init+0x3c18>)
 8005cb8:	2280      	movs	r2, #128	; 0x80
 8005cba:	611a      	str	r2, [r3, #16]
 8005cbc:	4b1a      	ldr	r3, [pc, #104]	; (8005d28 <LCD_Init+0x3c18>)
 8005cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005cc4:	4b18      	ldr	r3, [pc, #96]	; (8005d28 <LCD_Init+0x3c18>)
 8005cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cca:	611a      	str	r2, [r3, #16]
 8005ccc:	4b16      	ldr	r3, [pc, #88]	; (8005d28 <LCD_Init+0x3c18>)
 8005cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd2:	615a      	str	r2, [r3, #20]
 8005cd4:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <LCD_Init+0x3c1c>)
 8005cd6:	2215      	movs	r2, #21
 8005cd8:	60da      	str	r2, [r3, #12]
 8005cda:	4b13      	ldr	r3, [pc, #76]	; (8005d28 <LCD_Init+0x3c18>)
 8005cdc:	2280      	movs	r2, #128	; 0x80
 8005cde:	615a      	str	r2, [r3, #20]
 8005ce0:	4b11      	ldr	r3, [pc, #68]	; (8005d28 <LCD_Init+0x3c18>)
 8005ce2:	2280      	movs	r2, #128	; 0x80
 8005ce4:	611a      	str	r2, [r3, #16]
 8005ce6:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <LCD_Init+0x3c18>)
 8005ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005cee:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <LCD_Init+0x3c18>)
 8005cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cf4:	611a      	str	r2, [r3, #16]
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <LCD_Init+0x3c18>)
 8005cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfc:	615a      	str	r2, [r3, #20]
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <LCD_Init+0x3c1c>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	60da      	str	r2, [r3, #12]
 8005d04:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <LCD_Init+0x3c18>)
 8005d06:	2280      	movs	r2, #128	; 0x80
 8005d08:	615a      	str	r2, [r3, #20]
 8005d0a:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <LCD_Init+0x3c18>)
 8005d0c:	2280      	movs	r2, #128	; 0x80
 8005d0e:	611a      	str	r2, [r3, #16]
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <LCD_Init+0x3c18>)
 8005d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d16:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005d18:	4b03      	ldr	r3, [pc, #12]	; (8005d28 <LCD_Init+0x3c18>)
 8005d1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d1e:	611a      	str	r2, [r3, #16]
 8005d20:	4b01      	ldr	r3, [pc, #4]	; (8005d28 <LCD_Init+0x3c18>)
 8005d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d26:	e003      	b.n	8005d30 <LCD_Init+0x3c20>
 8005d28:	40011000 	.word	0x40011000
 8005d2c:	40010c00 	.word	0x40010c00
 8005d30:	615a      	str	r2, [r3, #20]
 8005d32:	4b8b      	ldr	r3, [pc, #556]	; (8005f60 <LCD_Init+0x3e50>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	60da      	str	r2, [r3, #12]
 8005d38:	4b8a      	ldr	r3, [pc, #552]	; (8005f64 <LCD_Init+0x3e54>)
 8005d3a:	2280      	movs	r2, #128	; 0x80
 8005d3c:	615a      	str	r2, [r3, #20]
 8005d3e:	4b89      	ldr	r3, [pc, #548]	; (8005f64 <LCD_Init+0x3e54>)
 8005d40:	2280      	movs	r2, #128	; 0x80
 8005d42:	611a      	str	r2, [r3, #16]
 8005d44:	4b87      	ldr	r3, [pc, #540]	; (8005f64 <LCD_Init+0x3e54>)
 8005d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005d4c:	20f0      	movs	r0, #240	; 0xf0
 8005d4e:	f7fa fee7 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005d52:	4b84      	ldr	r3, [pc, #528]	; (8005f64 <LCD_Init+0x3e54>)
 8005d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d58:	611a      	str	r2, [r3, #16]
 8005d5a:	4b82      	ldr	r3, [pc, #520]	; (8005f64 <LCD_Init+0x3e54>)
 8005d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d60:	615a      	str	r2, [r3, #20]
 8005d62:	4b7f      	ldr	r3, [pc, #508]	; (8005f60 <LCD_Init+0x3e50>)
 8005d64:	2203      	movs	r2, #3
 8005d66:	60da      	str	r2, [r3, #12]
 8005d68:	4b7e      	ldr	r3, [pc, #504]	; (8005f64 <LCD_Init+0x3e54>)
 8005d6a:	2280      	movs	r2, #128	; 0x80
 8005d6c:	615a      	str	r2, [r3, #20]
 8005d6e:	4b7d      	ldr	r3, [pc, #500]	; (8005f64 <LCD_Init+0x3e54>)
 8005d70:	2280      	movs	r2, #128	; 0x80
 8005d72:	611a      	str	r2, [r3, #16]
 8005d74:	4b7b      	ldr	r3, [pc, #492]	; (8005f64 <LCD_Init+0x3e54>)
 8005d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d7a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005d7c:	2029      	movs	r0, #41	; 0x29
 8005d7e:	f7fa fecf 	bl	8000b20 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005d82:	20d0      	movs	r0, #208	; 0xd0
 8005d84:	f7fa fecc 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005d88:	4b76      	ldr	r3, [pc, #472]	; (8005f64 <LCD_Init+0x3e54>)
 8005d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d8e:	611a      	str	r2, [r3, #16]
 8005d90:	4b74      	ldr	r3, [pc, #464]	; (8005f64 <LCD_Init+0x3e54>)
 8005d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d96:	615a      	str	r2, [r3, #20]
 8005d98:	4b71      	ldr	r3, [pc, #452]	; (8005f60 <LCD_Init+0x3e50>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	60da      	str	r2, [r3, #12]
 8005d9e:	4b71      	ldr	r3, [pc, #452]	; (8005f64 <LCD_Init+0x3e54>)
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	615a      	str	r2, [r3, #20]
 8005da4:	4b6f      	ldr	r3, [pc, #444]	; (8005f64 <LCD_Init+0x3e54>)
 8005da6:	2280      	movs	r2, #128	; 0x80
 8005da8:	611a      	str	r2, [r3, #16]
 8005daa:	4b6e      	ldr	r3, [pc, #440]	; (8005f64 <LCD_Init+0x3e54>)
 8005dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005db0:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005db2:	20be      	movs	r0, #190	; 0xbe
 8005db4:	f7fa feb4 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005db8:	4b6a      	ldr	r3, [pc, #424]	; (8005f64 <LCD_Init+0x3e54>)
 8005dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dbe:	611a      	str	r2, [r3, #16]
 8005dc0:	4b68      	ldr	r3, [pc, #416]	; (8005f64 <LCD_Init+0x3e54>)
 8005dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc6:	615a      	str	r2, [r3, #20]
 8005dc8:	4b65      	ldr	r3, [pc, #404]	; (8005f60 <LCD_Init+0x3e50>)
 8005dca:	2205      	movs	r2, #5
 8005dcc:	60da      	str	r2, [r3, #12]
 8005dce:	4b65      	ldr	r3, [pc, #404]	; (8005f64 <LCD_Init+0x3e54>)
 8005dd0:	2280      	movs	r2, #128	; 0x80
 8005dd2:	615a      	str	r2, [r3, #20]
 8005dd4:	4b63      	ldr	r3, [pc, #396]	; (8005f64 <LCD_Init+0x3e54>)
 8005dd6:	2280      	movs	r2, #128	; 0x80
 8005dd8:	611a      	str	r2, [r3, #16]
 8005dda:	4b62      	ldr	r3, [pc, #392]	; (8005f64 <LCD_Init+0x3e54>)
 8005ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005de2:	4b60      	ldr	r3, [pc, #384]	; (8005f64 <LCD_Init+0x3e54>)
 8005de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005de8:	611a      	str	r2, [r3, #16]
 8005dea:	4b5e      	ldr	r3, [pc, #376]	; (8005f64 <LCD_Init+0x3e54>)
 8005dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005df0:	615a      	str	r2, [r3, #20]
 8005df2:	4b5b      	ldr	r3, [pc, #364]	; (8005f60 <LCD_Init+0x3e50>)
 8005df4:	22fe      	movs	r2, #254	; 0xfe
 8005df6:	60da      	str	r2, [r3, #12]
 8005df8:	4b5a      	ldr	r3, [pc, #360]	; (8005f64 <LCD_Init+0x3e54>)
 8005dfa:	2280      	movs	r2, #128	; 0x80
 8005dfc:	615a      	str	r2, [r3, #20]
 8005dfe:	4b59      	ldr	r3, [pc, #356]	; (8005f64 <LCD_Init+0x3e54>)
 8005e00:	2280      	movs	r2, #128	; 0x80
 8005e02:	611a      	str	r2, [r3, #16]
 8005e04:	4b57      	ldr	r3, [pc, #348]	; (8005f64 <LCD_Init+0x3e54>)
 8005e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e0a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005e0c:	4b55      	ldr	r3, [pc, #340]	; (8005f64 <LCD_Init+0x3e54>)
 8005e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e12:	611a      	str	r2, [r3, #16]
 8005e14:	4b53      	ldr	r3, [pc, #332]	; (8005f64 <LCD_Init+0x3e54>)
 8005e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e1a:	615a      	str	r2, [r3, #20]
 8005e1c:	4b50      	ldr	r3, [pc, #320]	; (8005f60 <LCD_Init+0x3e50>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	60da      	str	r2, [r3, #12]
 8005e22:	4b50      	ldr	r3, [pc, #320]	; (8005f64 <LCD_Init+0x3e54>)
 8005e24:	2280      	movs	r2, #128	; 0x80
 8005e26:	615a      	str	r2, [r3, #20]
 8005e28:	4b4e      	ldr	r3, [pc, #312]	; (8005f64 <LCD_Init+0x3e54>)
 8005e2a:	2280      	movs	r2, #128	; 0x80
 8005e2c:	611a      	str	r2, [r3, #16]
 8005e2e:	4b4d      	ldr	r3, [pc, #308]	; (8005f64 <LCD_Init+0x3e54>)
 8005e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e34:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005e36:	4b4b      	ldr	r3, [pc, #300]	; (8005f64 <LCD_Init+0x3e54>)
 8005e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e3c:	611a      	str	r2, [r3, #16]
 8005e3e:	4b49      	ldr	r3, [pc, #292]	; (8005f64 <LCD_Init+0x3e54>)
 8005e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e44:	615a      	str	r2, [r3, #20]
 8005e46:	4b46      	ldr	r3, [pc, #280]	; (8005f60 <LCD_Init+0x3e50>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	60da      	str	r2, [r3, #12]
 8005e4c:	4b45      	ldr	r3, [pc, #276]	; (8005f64 <LCD_Init+0x3e54>)
 8005e4e:	2280      	movs	r2, #128	; 0x80
 8005e50:	615a      	str	r2, [r3, #20]
 8005e52:	4b44      	ldr	r3, [pc, #272]	; (8005f64 <LCD_Init+0x3e54>)
 8005e54:	2280      	movs	r2, #128	; 0x80
 8005e56:	611a      	str	r2, [r3, #16]
 8005e58:	4b42      	ldr	r3, [pc, #264]	; (8005f64 <LCD_Init+0x3e54>)
 8005e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e5e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005e60:	4b40      	ldr	r3, [pc, #256]	; (8005f64 <LCD_Init+0x3e54>)
 8005e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e66:	611a      	str	r2, [r3, #16]
 8005e68:	4b3e      	ldr	r3, [pc, #248]	; (8005f64 <LCD_Init+0x3e54>)
 8005e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e6e:	615a      	str	r2, [r3, #20]
 8005e70:	4b3b      	ldr	r3, [pc, #236]	; (8005f60 <LCD_Init+0x3e50>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	60da      	str	r2, [r3, #12]
 8005e76:	4b3b      	ldr	r3, [pc, #236]	; (8005f64 <LCD_Init+0x3e54>)
 8005e78:	2280      	movs	r2, #128	; 0x80
 8005e7a:	615a      	str	r2, [r3, #20]
 8005e7c:	4b39      	ldr	r3, [pc, #228]	; (8005f64 <LCD_Init+0x3e54>)
 8005e7e:	2280      	movs	r2, #128	; 0x80
 8005e80:	611a      	str	r2, [r3, #16]
 8005e82:	4b38      	ldr	r3, [pc, #224]	; (8005f64 <LCD_Init+0x3e54>)
 8005e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e88:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005e8a:	4b36      	ldr	r3, [pc, #216]	; (8005f64 <LCD_Init+0x3e54>)
 8005e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e90:	611a      	str	r2, [r3, #16]
 8005e92:	4b34      	ldr	r3, [pc, #208]	; (8005f64 <LCD_Init+0x3e54>)
 8005e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e98:	615a      	str	r2, [r3, #20]
 8005e9a:	4b31      	ldr	r3, [pc, #196]	; (8005f60 <LCD_Init+0x3e50>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	60da      	str	r2, [r3, #12]
 8005ea0:	4b30      	ldr	r3, [pc, #192]	; (8005f64 <LCD_Init+0x3e54>)
 8005ea2:	2280      	movs	r2, #128	; 0x80
 8005ea4:	615a      	str	r2, [r3, #20]
 8005ea6:	4b2f      	ldr	r3, [pc, #188]	; (8005f64 <LCD_Init+0x3e54>)
 8005ea8:	2280      	movs	r2, #128	; 0x80
 8005eaa:	611a      	str	r2, [r3, #16]
 8005eac:	4b2d      	ldr	r3, [pc, #180]	; (8005f64 <LCD_Init+0x3e54>)
 8005eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005eb4:	20b8      	movs	r0, #184	; 0xb8
 8005eb6:	f7fa fe33 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005eba:	4b2a      	ldr	r3, [pc, #168]	; (8005f64 <LCD_Init+0x3e54>)
 8005ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ec0:	611a      	str	r2, [r3, #16]
 8005ec2:	4b28      	ldr	r3, [pc, #160]	; (8005f64 <LCD_Init+0x3e54>)
 8005ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ec8:	615a      	str	r2, [r3, #20]
 8005eca:	4b25      	ldr	r3, [pc, #148]	; (8005f60 <LCD_Init+0x3e50>)
 8005ecc:	2203      	movs	r2, #3
 8005ece:	60da      	str	r2, [r3, #12]
 8005ed0:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <LCD_Init+0x3e54>)
 8005ed2:	2280      	movs	r2, #128	; 0x80
 8005ed4:	615a      	str	r2, [r3, #20]
 8005ed6:	4b23      	ldr	r3, [pc, #140]	; (8005f64 <LCD_Init+0x3e54>)
 8005ed8:	2280      	movs	r2, #128	; 0x80
 8005eda:	611a      	str	r2, [r3, #16]
 8005edc:	4b21      	ldr	r3, [pc, #132]	; (8005f64 <LCD_Init+0x3e54>)
 8005ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005ee4:	4b1f      	ldr	r3, [pc, #124]	; (8005f64 <LCD_Init+0x3e54>)
 8005ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eea:	611a      	str	r2, [r3, #16]
 8005eec:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <LCD_Init+0x3e54>)
 8005eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ef2:	615a      	str	r2, [r3, #20]
 8005ef4:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <LCD_Init+0x3e50>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	60da      	str	r2, [r3, #12]
 8005efa:	4b1a      	ldr	r3, [pc, #104]	; (8005f64 <LCD_Init+0x3e54>)
 8005efc:	2280      	movs	r2, #128	; 0x80
 8005efe:	615a      	str	r2, [r3, #20]
 8005f00:	4b18      	ldr	r3, [pc, #96]	; (8005f64 <LCD_Init+0x3e54>)
 8005f02:	2280      	movs	r2, #128	; 0x80
 8005f04:	611a      	str	r2, [r3, #16]
 8005f06:	4b17      	ldr	r3, [pc, #92]	; (8005f64 <LCD_Init+0x3e54>)
 8005f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f0c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005f0e:	20ba      	movs	r0, #186	; 0xba
 8005f10:	f7fa fe06 	bl	8000b20 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005f14:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <LCD_Init+0x3e54>)
 8005f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f1a:	611a      	str	r2, [r3, #16]
 8005f1c:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <LCD_Init+0x3e54>)
 8005f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f22:	615a      	str	r2, [r3, #20]
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <LCD_Init+0x3e50>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	60da      	str	r2, [r3, #12]
 8005f2a:	4b0e      	ldr	r3, [pc, #56]	; (8005f64 <LCD_Init+0x3e54>)
 8005f2c:	2280      	movs	r2, #128	; 0x80
 8005f2e:	615a      	str	r2, [r3, #20]
 8005f30:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <LCD_Init+0x3e54>)
 8005f32:	2280      	movs	r2, #128	; 0x80
 8005f34:	611a      	str	r2, [r3, #16]
 8005f36:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <LCD_Init+0x3e54>)
 8005f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f3c:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005f3e:	2064      	movs	r0, #100	; 0x64
 8005f40:	f7fb ff36 	bl	8001db0 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005f44:	2000      	movs	r0, #0
 8005f46:	f7fb ffd7 	bl	8001ef8 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <LCD_Init+0x3e58>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005f50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005f54:	f000 f80a 	bl	8005f6c <LCD_Clear>
}
 8005f58:	bf00      	nop
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40010c00 	.word	0x40010c00
 8005f64:	40011000 	.word	0x40011000
 8005f68:	422201a8 	.word	0x422201a8

08005f6c <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005f7a:	4b2a      	ldr	r3, [pc, #168]	; (8006024 <LCD_Clear+0xb8>)
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005f80:	4b28      	ldr	r3, [pc, #160]	; (8006024 <LCD_Clear+0xb8>)
 8005f82:	885b      	ldrh	r3, [r3, #2]
 8005f84:	461a      	mov	r2, r3
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	fb02 f303 	mul.w	r3, r2, r3
 8005f8c:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005f8e:	4b25      	ldr	r3, [pc, #148]	; (8006024 <LCD_Clear+0xb8>)
 8005f90:	889b      	ldrh	r3, [r3, #4]
 8005f92:	f646 0204 	movw	r2, #26628	; 0x6804
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d11a      	bne.n	8005fd0 <LCD_Clear+0x64>
 8005f9a:	4b22      	ldr	r3, [pc, #136]	; (8006024 <LCD_Clear+0xb8>)
 8005f9c:	799b      	ldrb	r3, [r3, #6]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d116      	bne.n	8005fd0 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005fa2:	4b20      	ldr	r3, [pc, #128]	; (8006024 <LCD_Clear+0xb8>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005fa8:	4b1e      	ldr	r3, [pc, #120]	; (8006024 <LCD_Clear+0xb8>)
 8005faa:	222a      	movs	r2, #42	; 0x2a
 8005fac:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005fae:	4b1d      	ldr	r3, [pc, #116]	; (8006024 <LCD_Clear+0xb8>)
 8005fb0:	222b      	movs	r2, #43	; 0x2b
 8005fb2:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	f7fa fe84 	bl	8000cc4 <LCD_SetCursor>
		lcddev.dir = 1;
 8005fbc:	4b19      	ldr	r3, [pc, #100]	; (8006024 <LCD_Clear+0xb8>)
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005fc2:	4b18      	ldr	r3, [pc, #96]	; (8006024 <LCD_Clear+0xb8>)
 8005fc4:	222b      	movs	r2, #43	; 0x2b
 8005fc6:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005fc8:	4b16      	ldr	r3, [pc, #88]	; (8006024 <LCD_Clear+0xb8>)
 8005fca:	222a      	movs	r2, #42	; 0x2a
 8005fcc:	819a      	strh	r2, [r3, #12]
 8005fce:	e003      	b.n	8005fd8 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	f7fa fe76 	bl	8000cc4 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005fd8:	f7fa fe68 	bl	8000cac <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	e017      	b.n	8006012 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005fe2:	4b11      	ldr	r3, [pc, #68]	; (8006028 <LCD_Clear+0xbc>)
 8005fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fe8:	611a      	str	r2, [r3, #16]
 8005fea:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <LCD_Clear+0xbc>)
 8005fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ff0:	615a      	str	r2, [r3, #20]
 8005ff2:	4a0e      	ldr	r2, [pc, #56]	; (800602c <LCD_Clear+0xc0>)
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	60d3      	str	r3, [r2, #12]
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <LCD_Clear+0xbc>)
 8005ffa:	2280      	movs	r2, #128	; 0x80
 8005ffc:	615a      	str	r2, [r3, #20]
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <LCD_Clear+0xbc>)
 8006000:	2280      	movs	r2, #128	; 0x80
 8006002:	611a      	str	r2, [r3, #16]
 8006004:	4b08      	ldr	r3, [pc, #32]	; (8006028 <LCD_Clear+0xbc>)
 8006006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800600a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3301      	adds	r3, #1
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	429a      	cmp	r2, r3
 8006018:	d3e3      	bcc.n	8005fe2 <LCD_Clear+0x76>
}
 800601a:	bf00      	nop
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000030 	.word	0x20000030
 8006028:	40011000 	.word	0x40011000
 800602c:	40010c00 	.word	0x40010c00

08006030 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8006030:	b590      	push	{r4, r7, lr}
 8006032:	b087      	sub	sp, #28
 8006034:	af02      	add	r7, sp, #8
 8006036:	4604      	mov	r4, r0
 8006038:	4608      	mov	r0, r1
 800603a:	4611      	mov	r1, r2
 800603c:	461a      	mov	r2, r3
 800603e:	4623      	mov	r3, r4
 8006040:	80fb      	strh	r3, [r7, #6]
 8006042:	4603      	mov	r3, r0
 8006044:	80bb      	strh	r3, [r7, #4]
 8006046:	460b      	mov	r3, r1
 8006048:	807b      	strh	r3, [r7, #2]
 800604a:	4613      	mov	r3, r2
 800604c:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 800604e:	2300      	movs	r3, #0
 8006050:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 8006052:	4b3b      	ldr	r3, [pc, #236]	; (8006140 <LCD_Fill+0x110>)
 8006054:	889b      	ldrh	r3, [r3, #4]
 8006056:	f646 0204 	movw	r2, #26628	; 0x6804
 800605a:	4293      	cmp	r3, r2
 800605c:	d133      	bne.n	80060c6 <LCD_Fill+0x96>
 800605e:	4b38      	ldr	r3, [pc, #224]	; (8006140 <LCD_Fill+0x110>)
 8006060:	799b      	ldrb	r3, [r3, #6]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d12f      	bne.n	80060c6 <LCD_Fill+0x96>
			{
		temp = sx;
 8006066:	88fb      	ldrh	r3, [r7, #6]
 8006068:	813b      	strh	r3, [r7, #8]
		sx = sy;
 800606a:	88bb      	ldrh	r3, [r7, #4]
 800606c:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 800606e:	4b34      	ldr	r3, [pc, #208]	; (8006140 <LCD_Fill+0x110>)
 8006070:	881a      	ldrh	r2, [r3, #0]
 8006072:	887b      	ldrh	r3, [r7, #2]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 800607c:	883b      	ldrh	r3, [r7, #0]
 800607e:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 8006080:	4b2f      	ldr	r3, [pc, #188]	; (8006140 <LCD_Fill+0x110>)
 8006082:	881a      	ldrh	r2, [r3, #0]
 8006084:	893b      	ldrh	r3, [r7, #8]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 800608e:	4b2c      	ldr	r3, [pc, #176]	; (8006140 <LCD_Fill+0x110>)
 8006090:	2200      	movs	r2, #0
 8006092:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8006094:	4b2a      	ldr	r3, [pc, #168]	; (8006140 <LCD_Fill+0x110>)
 8006096:	222a      	movs	r2, #42	; 0x2a
 8006098:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 800609a:	4b29      	ldr	r3, [pc, #164]	; (8006140 <LCD_Fill+0x110>)
 800609c:	222b      	movs	r2, #43	; 0x2b
 800609e:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 80060a0:	883c      	ldrh	r4, [r7, #0]
 80060a2:	887a      	ldrh	r2, [r7, #2]
 80060a4:	88b9      	ldrh	r1, [r7, #4]
 80060a6:	88f8      	ldrh	r0, [r7, #6]
 80060a8:	8c3b      	ldrh	r3, [r7, #32]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4623      	mov	r3, r4
 80060ae:	f7ff ffbf 	bl	8006030 <LCD_Fill>
		lcddev.dir = 1;
 80060b2:	4b23      	ldr	r3, [pc, #140]	; (8006140 <LCD_Fill+0x110>)
 80060b4:	2201      	movs	r2, #1
 80060b6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 80060b8:	4b21      	ldr	r3, [pc, #132]	; (8006140 <LCD_Fill+0x110>)
 80060ba:	222b      	movs	r2, #43	; 0x2b
 80060bc:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 80060be:	4b20      	ldr	r3, [pc, #128]	; (8006140 <LCD_Fill+0x110>)
 80060c0:	222a      	movs	r2, #42	; 0x2a
 80060c2:	819a      	strh	r2, [r3, #12]
 80060c4:	e037      	b.n	8006136 <LCD_Fill+0x106>
	} else {
		xlen = ex - sx + 1;
 80060c6:	887a      	ldrh	r2, [r7, #2]
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3301      	adds	r3, #1
 80060d0:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 80060d2:	88bb      	ldrh	r3, [r7, #4]
 80060d4:	81fb      	strh	r3, [r7, #14]
 80060d6:	e029      	b.n	800612c <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 80060d8:	89fa      	ldrh	r2, [r7, #14]
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	4611      	mov	r1, r2
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fa fdf0 	bl	8000cc4 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 80060e4:	f7fa fde2 	bl	8000cac <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 80060e8:	2300      	movs	r3, #0
 80060ea:	81bb      	strh	r3, [r7, #12]
 80060ec:	e017      	b.n	800611e <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 80060ee:	4b15      	ldr	r3, [pc, #84]	; (8006144 <LCD_Fill+0x114>)
 80060f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060f4:	611a      	str	r2, [r3, #16]
 80060f6:	4b13      	ldr	r3, [pc, #76]	; (8006144 <LCD_Fill+0x114>)
 80060f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060fc:	615a      	str	r2, [r3, #20]
 80060fe:	4a12      	ldr	r2, [pc, #72]	; (8006148 <LCD_Fill+0x118>)
 8006100:	8c3b      	ldrh	r3, [r7, #32]
 8006102:	60d3      	str	r3, [r2, #12]
 8006104:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <LCD_Fill+0x114>)
 8006106:	2280      	movs	r2, #128	; 0x80
 8006108:	615a      	str	r2, [r3, #20]
 800610a:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <LCD_Fill+0x114>)
 800610c:	2280      	movs	r2, #128	; 0x80
 800610e:	611a      	str	r2, [r3, #16]
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <LCD_Fill+0x114>)
 8006112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006116:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8006118:	89bb      	ldrh	r3, [r7, #12]
 800611a:	3301      	adds	r3, #1
 800611c:	81bb      	strh	r3, [r7, #12]
 800611e:	89ba      	ldrh	r2, [r7, #12]
 8006120:	897b      	ldrh	r3, [r7, #10]
 8006122:	429a      	cmp	r2, r3
 8006124:	d3e3      	bcc.n	80060ee <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 8006126:	89fb      	ldrh	r3, [r7, #14]
 8006128:	3301      	adds	r3, #1
 800612a:	81fb      	strh	r3, [r7, #14]
 800612c:	89fa      	ldrh	r2, [r7, #14]
 800612e:	883b      	ldrh	r3, [r7, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d9d1      	bls.n	80060d8 <LCD_Fill+0xa8>
		}
	}
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	bd90      	pop	{r4, r7, pc}
 800613e:	bf00      	nop
 8006140:	20000030 	.word	0x20000030
 8006144:	40011000 	.word	0x40011000
 8006148:	40010c00 	.word	0x40010c00

0800614c <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 800614c:	b590      	push	{r4, r7, lr}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	4604      	mov	r4, r0
 8006154:	4608      	mov	r0, r1
 8006156:	4611      	mov	r1, r2
 8006158:	461a      	mov	r2, r3
 800615a:	4623      	mov	r3, r4
 800615c:	80fb      	strh	r3, [r7, #6]
 800615e:	4603      	mov	r3, r0
 8006160:	80bb      	strh	r3, [r7, #4]
 8006162:	460b      	mov	r3, r1
 8006164:	70fb      	strb	r3, [r7, #3]
 8006166:	4613      	mov	r3, r2
 8006168:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 800616a:	88bb      	ldrh	r3, [r7, #4]
 800616c:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 800616e:	78bb      	ldrb	r3, [r7, #2]
 8006170:	08db      	lsrs	r3, r3, #3
 8006172:	b2db      	uxtb	r3, r3
 8006174:	461a      	mov	r2, r3
 8006176:	78bb      	ldrb	r3, [r7, #2]
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	bf14      	ite	ne
 8006182:	2301      	movne	r3, #1
 8006184:	2300      	moveq	r3, #0
 8006186:	b2db      	uxtb	r3, r3
 8006188:	4413      	add	r3, r2
 800618a:	b2db      	uxtb	r3, r3
 800618c:	78ba      	ldrb	r2, [r7, #2]
 800618e:	0852      	lsrs	r2, r2, #1
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	fb02 f303 	mul.w	r3, r2, r3
 8006196:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	3b20      	subs	r3, #32
 800619c:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 800619e:	2300      	movs	r3, #0
 80061a0:	737b      	strb	r3, [r7, #13]
 80061a2:	e069      	b.n	8006278 <LCD_ShowChar+0x12c>
		if (size == 12)
 80061a4:	78bb      	ldrb	r3, [r7, #2]
 80061a6:	2b0c      	cmp	r3, #12
 80061a8:	d10b      	bne.n	80061c2 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 80061aa:	78fa      	ldrb	r2, [r7, #3]
 80061ac:	7b79      	ldrb	r1, [r7, #13]
 80061ae:	4838      	ldr	r0, [pc, #224]	; (8006290 <LCD_ShowChar+0x144>)
 80061b0:	4613      	mov	r3, r2
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4403      	add	r3, r0
 80061ba:	440b      	add	r3, r1
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	73fb      	strb	r3, [r7, #15]
 80061c0:	e019      	b.n	80061f6 <LCD_ShowChar+0xaa>
		else if (size == 16)
 80061c2:	78bb      	ldrb	r3, [r7, #2]
 80061c4:	2b10      	cmp	r3, #16
 80061c6:	d108      	bne.n	80061da <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 80061c8:	78fa      	ldrb	r2, [r7, #3]
 80061ca:	7b7b      	ldrb	r3, [r7, #13]
 80061cc:	4931      	ldr	r1, [pc, #196]	; (8006294 <LCD_ShowChar+0x148>)
 80061ce:	0112      	lsls	r2, r2, #4
 80061d0:	440a      	add	r2, r1
 80061d2:	4413      	add	r3, r2
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	73fb      	strb	r3, [r7, #15]
 80061d8:	e00d      	b.n	80061f6 <LCD_ShowChar+0xaa>
		else if (size == 24)
 80061da:	78bb      	ldrb	r3, [r7, #2]
 80061dc:	2b18      	cmp	r3, #24
 80061de:	d150      	bne.n	8006282 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 80061e0:	78fa      	ldrb	r2, [r7, #3]
 80061e2:	7b79      	ldrb	r1, [r7, #13]
 80061e4:	482c      	ldr	r0, [pc, #176]	; (8006298 <LCD_ShowChar+0x14c>)
 80061e6:	4613      	mov	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4403      	add	r3, r0
 80061f0:	440b      	add	r3, r1
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 80061f6:	2300      	movs	r3, #0
 80061f8:	73bb      	strb	r3, [r7, #14]
 80061fa:	e035      	b.n	8006268 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 80061fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006200:	2b00      	cmp	r3, #0
 8006202:	da07      	bge.n	8006214 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8006204:	4b25      	ldr	r3, [pc, #148]	; (800629c <LCD_ShowChar+0x150>)
 8006206:	881a      	ldrh	r2, [r3, #0]
 8006208:	88b9      	ldrh	r1, [r7, #4]
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	4618      	mov	r0, r3
 800620e:	f7fb fb37 	bl	8001880 <LCD_Fast_DrawPoint>
 8006212:	e00a      	b.n	800622a <LCD_ShowChar+0xde>
			else if (mode == 0)
 8006214:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d106      	bne.n	800622a <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 800621c:	4b20      	ldr	r3, [pc, #128]	; (80062a0 <LCD_ShowChar+0x154>)
 800621e:	881a      	ldrh	r2, [r3, #0]
 8006220:	88b9      	ldrh	r1, [r7, #4]
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	4618      	mov	r0, r3
 8006226:	f7fb fb2b 	bl	8001880 <LCD_Fast_DrawPoint>
			temp <<= 1;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
			y++;
 8006230:	88bb      	ldrh	r3, [r7, #4]
 8006232:	3301      	adds	r3, #1
 8006234:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8006236:	4b1b      	ldr	r3, [pc, #108]	; (80062a4 <LCD_ShowChar+0x158>)
 8006238:	885b      	ldrh	r3, [r3, #2]
 800623a:	88ba      	ldrh	r2, [r7, #4]
 800623c:	429a      	cmp	r2, r3
 800623e:	d222      	bcs.n	8006286 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8006240:	88ba      	ldrh	r2, [r7, #4]
 8006242:	897b      	ldrh	r3, [r7, #10]
 8006244:	1ad2      	subs	r2, r2, r3
 8006246:	78bb      	ldrb	r3, [r7, #2]
 8006248:	429a      	cmp	r2, r3
 800624a:	d10a      	bne.n	8006262 <LCD_ShowChar+0x116>
				y = y0;
 800624c:	897b      	ldrh	r3, [r7, #10]
 800624e:	80bb      	strh	r3, [r7, #4]
				x++;
 8006250:	88fb      	ldrh	r3, [r7, #6]
 8006252:	3301      	adds	r3, #1
 8006254:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8006256:	4b13      	ldr	r3, [pc, #76]	; (80062a4 <LCD_ShowChar+0x158>)
 8006258:	881b      	ldrh	r3, [r3, #0]
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	429a      	cmp	r2, r3
 800625e:	d307      	bcc.n	8006270 <LCD_ShowChar+0x124>
					return;	//超区域了
 8006260:	e012      	b.n	8006288 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8006262:	7bbb      	ldrb	r3, [r7, #14]
 8006264:	3301      	adds	r3, #1
 8006266:	73bb      	strb	r3, [r7, #14]
 8006268:	7bbb      	ldrb	r3, [r7, #14]
 800626a:	2b07      	cmp	r3, #7
 800626c:	d9c6      	bls.n	80061fc <LCD_ShowChar+0xb0>
 800626e:	e000      	b.n	8006272 <LCD_ShowChar+0x126>
				break;
 8006270:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8006272:	7b7b      	ldrb	r3, [r7, #13]
 8006274:	3301      	adds	r3, #1
 8006276:	737b      	strb	r3, [r7, #13]
 8006278:	7b7a      	ldrb	r2, [r7, #13]
 800627a:	7a7b      	ldrb	r3, [r7, #9]
 800627c:	429a      	cmp	r2, r3
 800627e:	d391      	bcc.n	80061a4 <LCD_ShowChar+0x58>
 8006280:	e002      	b.n	8006288 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8006282:	bf00      	nop
 8006284:	e000      	b.n	8006288 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8006286:	bf00      	nop
			}
		}
	}
}
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	bd90      	pop	{r4, r7, pc}
 800628e:	bf00      	nop
 8006290:	08008c18 	.word	0x08008c18
 8006294:	0800908c 	.word	0x0800908c
 8006298:	0800967c 	.word	0x0800967c
 800629c:	2000002c 	.word	0x2000002c
 80062a0:	20000000 	.word	0x20000000
 80062a4:	20000030 	.word	0x20000030

080062a8 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 80062a8:	b590      	push	{r4, r7, lr}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	4604      	mov	r4, r0
 80062b0:	4608      	mov	r0, r1
 80062b2:	4611      	mov	r1, r2
 80062b4:	461a      	mov	r2, r3
 80062b6:	4623      	mov	r3, r4
 80062b8:	80fb      	strh	r3, [r7, #6]
 80062ba:	4603      	mov	r3, r0
 80062bc:	80bb      	strh	r3, [r7, #4]
 80062be:	460b      	mov	r3, r1
 80062c0:	807b      	strh	r3, [r7, #2]
 80062c2:	4613      	mov	r3, r2
 80062c4:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	73fb      	strb	r3, [r7, #15]
	width += x;
 80062ca:	887a      	ldrh	r2, [r7, #2]
 80062cc:	88fb      	ldrh	r3, [r7, #6]
 80062ce:	4413      	add	r3, r2
 80062d0:	807b      	strh	r3, [r7, #2]
	height += y;
 80062d2:	883a      	ldrh	r2, [r7, #0]
 80062d4:	88bb      	ldrh	r3, [r7, #4]
 80062d6:	4413      	add	r3, r2
 80062d8:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80062da:	e024      	b.n	8006326 <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 80062dc:	88fa      	ldrh	r2, [r7, #6]
 80062de:	887b      	ldrh	r3, [r7, #2]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d307      	bcc.n	80062f4 <LCD_ShowString+0x4c>
			x = x0;
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	80fb      	strh	r3, [r7, #6]
			y += size;
 80062e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	88bb      	ldrh	r3, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 80062f4:	88ba      	ldrh	r2, [r7, #4]
 80062f6:	883b      	ldrh	r3, [r7, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d21d      	bcs.n	8006338 <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	781a      	ldrb	r2, [r3, #0]
 8006300:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006304:	88b9      	ldrh	r1, [r7, #4]
 8006306:	88f8      	ldrh	r0, [r7, #6]
 8006308:	2400      	movs	r4, #0
 800630a:	9400      	str	r4, [sp, #0]
 800630c:	f7ff ff1e 	bl	800614c <LCD_ShowChar>
		x += size / 2;
 8006310:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006314:	085b      	lsrs	r3, r3, #1
 8006316:	b2db      	uxtb	r3, r3
 8006318:	b29a      	uxth	r2, r3
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	4413      	add	r3, r2
 800631e:	80fb      	strh	r3, [r7, #6]
		p++;
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	3301      	adds	r3, #1
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b7e      	cmp	r3, #126	; 0x7e
 800632c:	d805      	bhi.n	800633a <LCD_ShowString+0x92>
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b1f      	cmp	r3, #31
 8006334:	d8d2      	bhi.n	80062dc <LCD_ShowString+0x34>
	}
}
 8006336:	e000      	b.n	800633a <LCD_ShowString+0x92>
			break;	//退出
 8006338:	bf00      	nop
}
 800633a:	bf00      	nop
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	bd90      	pop	{r4, r7, pc}
	...

08006344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006344:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006348:	b086      	sub	sp, #24
 800634a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800634c:	f000 fc86 	bl	8006c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006350:	f000 f950 	bl	80065f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006354:	f7fa fb38 	bl	80009c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8006358:	f000 fbdc 	bl	8006b14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1);
 800635c:	2201      	movs	r2, #1
 800635e:	4994      	ldr	r1, [pc, #592]	; (80065b0 <main+0x26c>)
 8006360:	4894      	ldr	r0, [pc, #592]	; (80065b4 <main+0x270>)
 8006362:	f001 fe10 	bl	8007f86 <HAL_UART_Receive_IT>

    uint16_t i = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	81fb      	strh	r3, [r7, #14]
    uint8_t datatemp[SIZE];
 800636a:	4893      	ldr	r0, [pc, #588]	; (80065b8 <main+0x274>)
 800636c:	f7f9 ff5c 	bl	8000228 <strlen>
 8006370:	4601      	mov	r1, r0
 8006372:	460b      	mov	r3, r1
 8006374:	3b01      	subs	r3, #1
 8006376:	60bb      	str	r3, [r7, #8]
 8006378:	2300      	movs	r3, #0
 800637a:	4688      	mov	r8, r1
 800637c:	4699      	mov	r9, r3
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800638a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800638e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006392:	2300      	movs	r3, #0
 8006394:	460c      	mov	r4, r1
 8006396:	461d      	mov	r5, r3
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	00eb      	lsls	r3, r5, #3
 80063a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063a6:	00e2      	lsls	r2, r4, #3
 80063a8:	1dcb      	adds	r3, r1, #7
 80063aa:	08db      	lsrs	r3, r3, #3
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	ebad 0d03 	sub.w	sp, sp, r3
 80063b2:	ab02      	add	r3, sp, #8
 80063b4:	3300      	adds	r3, #0
 80063b6:	607b      	str	r3, [r7, #4]
    LCD_Init();
 80063b8:	f7fb feaa 	bl	8002110 <LCD_Init>
    AT24CXX_Init();            //IIC初始�??
 80063bc:	f7fa fa42 	bl	8000844 <AT24CXX_Init>

    POINT_COLOR = RED;//设置字体为红�???
 80063c0:	4b7e      	ldr	r3, [pc, #504]	; (80065bc <main+0x278>)
 80063c2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80063c6:	801a      	strh	r2, [r3, #0]
    LCD_ShowString(40, 50, 200, 16, 16, "CS301");
 80063c8:	4b7d      	ldr	r3, [pc, #500]	; (80065c0 <main+0x27c>)
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	2310      	movs	r3, #16
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	2310      	movs	r3, #16
 80063d2:	22c8      	movs	r2, #200	; 0xc8
 80063d4:	2132      	movs	r1, #50	; 0x32
 80063d6:	2028      	movs	r0, #40	; 0x28
 80063d8:	f7ff ff66 	bl	80062a8 <LCD_ShowString>
    LCD_ShowString(40, 70, 200, 16, 16, "IIC TEST");
 80063dc:	4b79      	ldr	r3, [pc, #484]	; (80065c4 <main+0x280>)
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	2310      	movs	r3, #16
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	2310      	movs	r3, #16
 80063e6:	22c8      	movs	r2, #200	; 0xc8
 80063e8:	2146      	movs	r1, #70	; 0x46
 80063ea:	2028      	movs	r0, #40	; 0x28
 80063ec:	f7ff ff5c 	bl	80062a8 <LCD_ShowString>
    LCD_ShowString(40, 90, 200, 16, 16, "KEY1:Write  KEY0:Read");    //显示提示信息
 80063f0:	4b75      	ldr	r3, [pc, #468]	; (80065c8 <main+0x284>)
 80063f2:	9301      	str	r3, [sp, #4]
 80063f4:	2310      	movs	r3, #16
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	2310      	movs	r3, #16
 80063fa:	22c8      	movs	r2, #200	; 0xc8
 80063fc:	215a      	movs	r1, #90	; 0x5a
 80063fe:	2028      	movs	r0, #40	; 0x28
 8006400:	f7ff ff52 	bl	80062a8 <LCD_ShowString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (AT24CXX_Check()) {
 8006404:	e020      	b.n	8006448 <main+0x104>
        LCD_ShowString(40, 120, 200, 16, 16, "24C02 Check Failed!");
 8006406:	4b71      	ldr	r3, [pc, #452]	; (80065cc <main+0x288>)
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	2310      	movs	r3, #16
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	2310      	movs	r3, #16
 8006410:	22c8      	movs	r2, #200	; 0xc8
 8006412:	2178      	movs	r1, #120	; 0x78
 8006414:	2028      	movs	r0, #40	; 0x28
 8006416:	f7ff ff47 	bl	80062a8 <LCD_ShowString>
        HAL_Delay(500);
 800641a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800641e:	f000 fc7f 	bl	8006d20 <HAL_Delay>
        LCD_ShowString(40, 120, 200, 16, 16, "Please Check!      ");
 8006422:	4b6b      	ldr	r3, [pc, #428]	; (80065d0 <main+0x28c>)
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	2310      	movs	r3, #16
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	2310      	movs	r3, #16
 800642c:	22c8      	movs	r2, #200	; 0xc8
 800642e:	2178      	movs	r1, #120	; 0x78
 8006430:	2028      	movs	r0, #40	; 0x28
 8006432:	f7ff ff39 	bl	80062a8 <LCD_ShowString>
        HAL_Delay(500);
 8006436:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800643a:	f000 fc71 	bl	8006d20 <HAL_Delay>
        HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);//LED0闪烁
 800643e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006442:	4864      	ldr	r0, [pc, #400]	; (80065d4 <main+0x290>)
 8006444:	f001 f8a3 	bl	800758e <HAL_GPIO_TogglePin>
    while (AT24CXX_Check()) {
 8006448:	f7fa fa5f 	bl	800090a <AT24CXX_Check>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1d9      	bne.n	8006406 <main+0xc2>
    }

    LCD_ShowString(40, 120, 200, 16, 16, "24C02 Ready!");
 8006452:	4b61      	ldr	r3, [pc, #388]	; (80065d8 <main+0x294>)
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	2310      	movs	r3, #16
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	2310      	movs	r3, #16
 800645c:	22c8      	movs	r2, #200	; 0xc8
 800645e:	2178      	movs	r1, #120	; 0x78
 8006460:	2028      	movs	r0, #40	; 0x28
 8006462:	f7ff ff21 	bl	80062a8 <LCD_ShowString>
    POINT_COLOR = BLUE;//设置字体为蓝�??
 8006466:	4b55      	ldr	r3, [pc, #340]	; (80065bc <main+0x278>)
 8006468:	221f      	movs	r2, #31
 800646a:	801a      	strh	r2, [r3, #0]
    while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

        if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET)//KEY1按下,写入24C02
 800646c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006470:	4858      	ldr	r0, [pc, #352]	; (80065d4 <main+0x290>)
 8006472:	f001 f85d 	bl	8007530 <HAL_GPIO_ReadPin>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d131      	bne.n	80064e0 <main+0x19c>
        {
            LCD_Fill(0, 170, 239, 319, WHITE);//清除半屏
 800647c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	f240 133f 	movw	r3, #319	; 0x13f
 8006486:	22ef      	movs	r2, #239	; 0xef
 8006488:	21aa      	movs	r1, #170	; 0xaa
 800648a:	2000      	movs	r0, #0
 800648c:	f7ff fdd0 	bl	8006030 <LCD_Fill>
            LCD_ShowString(40, 170, 200, 16, 16, "Start Writing 24C02....");
 8006490:	4b52      	ldr	r3, [pc, #328]	; (80065dc <main+0x298>)
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	2310      	movs	r3, #16
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	2310      	movs	r3, #16
 800649a:	22c8      	movs	r2, #200	; 0xc8
 800649c:	21aa      	movs	r1, #170	; 0xaa
 800649e:	2028      	movs	r0, #40	; 0x28
 80064a0:	f7ff ff02 	bl	80062a8 <LCD_ShowString>
            AT24CXX_Write(0, (uint8_t *) uRx_Data, SIZE);
 80064a4:	4844      	ldr	r0, [pc, #272]	; (80065b8 <main+0x274>)
 80064a6:	f7f9 febf 	bl	8000228 <strlen>
 80064aa:	4603      	mov	r3, r0
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	461a      	mov	r2, r3
 80064b0:	4941      	ldr	r1, [pc, #260]	; (80065b8 <main+0x274>)
 80064b2:	2000      	movs	r0, #0
 80064b4:	f7fa fa68 	bl	8000988 <AT24CXX_Write>
            LCD_Fill(0, 170, 239, 319, WHITE);
 80064b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	f240 133f 	movw	r3, #319	; 0x13f
 80064c2:	22ef      	movs	r2, #239	; 0xef
 80064c4:	21aa      	movs	r1, #170	; 0xaa
 80064c6:	2000      	movs	r0, #0
 80064c8:	f7ff fdb2 	bl	8006030 <LCD_Fill>
            LCD_ShowString(40, 170, 200, 16, 16, "24C02 Write Finished!");//提示传�?�完�???
 80064cc:	4b44      	ldr	r3, [pc, #272]	; (80065e0 <main+0x29c>)
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	2310      	movs	r3, #16
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	2310      	movs	r3, #16
 80064d6:	22c8      	movs	r2, #200	; 0xc8
 80064d8:	21aa      	movs	r1, #170	; 0xaa
 80064da:	2028      	movs	r0, #40	; 0x28
 80064dc:	f7ff fee4 	bl	80062a8 <LCD_ShowString>
        }
        if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET)//KEY0按下,读取字符串并显示
 80064e0:	2120      	movs	r1, #32
 80064e2:	4840      	ldr	r0, [pc, #256]	; (80065e4 <main+0x2a0>)
 80064e4:	f001 f824 	bl	8007530 <HAL_GPIO_ReadPin>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d14d      	bne.n	800658a <main+0x246>
        {
            LCD_Fill(0, 170, 239, 319, WHITE);
 80064ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	f240 133f 	movw	r3, #319	; 0x13f
 80064f8:	22ef      	movs	r2, #239	; 0xef
 80064fa:	21aa      	movs	r1, #170	; 0xaa
 80064fc:	2000      	movs	r0, #0
 80064fe:	f7ff fd97 	bl	8006030 <LCD_Fill>
            LCD_ShowString(40, 170, 200, 16, 16, "Start Reading 24C02.... ");
 8006502:	4b39      	ldr	r3, [pc, #228]	; (80065e8 <main+0x2a4>)
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	2310      	movs	r3, #16
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	2310      	movs	r3, #16
 800650c:	22c8      	movs	r2, #200	; 0xc8
 800650e:	21aa      	movs	r1, #170	; 0xaa
 8006510:	2028      	movs	r0, #40	; 0x28
 8006512:	f7ff fec9 	bl	80062a8 <LCD_ShowString>
            AT24CXX_Read(0, datatemp, SIZE);
 8006516:	4828      	ldr	r0, [pc, #160]	; (80065b8 <main+0x274>)
 8006518:	f7f9 fe86 	bl	8000228 <strlen>
 800651c:	4603      	mov	r3, r0
 800651e:	b29b      	uxth	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	2000      	movs	r0, #0
 8006526:	f7fa fa10 	bl	800094a <AT24CXX_Read>
            LCD_Fill(0, 170, 239, 319, WHITE);
 800652a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	f240 133f 	movw	r3, #319	; 0x13f
 8006534:	22ef      	movs	r2, #239	; 0xef
 8006536:	21aa      	movs	r1, #170	; 0xaa
 8006538:	2000      	movs	r0, #0
 800653a:	f7ff fd79 	bl	8006030 <LCD_Fill>
            LCD_ShowString(40, 170, 200, 16, 16, "The Data Read Is:  ");//提示传�?�完�???
 800653e:	4b2b      	ldr	r3, [pc, #172]	; (80065ec <main+0x2a8>)
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	2310      	movs	r3, #16
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	2310      	movs	r3, #16
 8006548:	22c8      	movs	r2, #200	; 0xc8
 800654a:	21aa      	movs	r1, #170	; 0xaa
 800654c:	2028      	movs	r0, #40	; 0x28
 800654e:	f7ff feab 	bl	80062a8 <LCD_ShowString>
            LCD_ShowString(40, 190, 200, 16, 16, datatemp);//显示读到的字符串
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	9301      	str	r3, [sp, #4]
 8006556:	2310      	movs	r3, #16
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	2310      	movs	r3, #16
 800655c:	22c8      	movs	r2, #200	; 0xc8
 800655e:	21be      	movs	r1, #190	; 0xbe
 8006560:	2028      	movs	r0, #40	; 0x28
 8006562:	f7ff fea1 	bl	80062a8 <LCD_ShowString>
            HAL_UART_Transmit(&huart1, (uint8_t *) "The data read is:\n", strlen("The data read is:\n"), HAL_MAX_DELAY);
 8006566:	f04f 33ff 	mov.w	r3, #4294967295
 800656a:	2212      	movs	r2, #18
 800656c:	4920      	ldr	r1, [pc, #128]	; (80065f0 <main+0x2ac>)
 800656e:	4811      	ldr	r0, [pc, #68]	; (80065b4 <main+0x270>)
 8006570:	f001 fc86 	bl	8007e80 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, (uint8_t *) uRx_Data, SIZE, HAL_MAX_DELAY);
 8006574:	4810      	ldr	r0, [pc, #64]	; (80065b8 <main+0x274>)
 8006576:	f7f9 fe57 	bl	8000228 <strlen>
 800657a:	4603      	mov	r3, r0
 800657c:	b29a      	uxth	r2, r3
 800657e:	f04f 33ff 	mov.w	r3, #4294967295
 8006582:	490d      	ldr	r1, [pc, #52]	; (80065b8 <main+0x274>)
 8006584:	480b      	ldr	r0, [pc, #44]	; (80065b4 <main+0x270>)
 8006586:	f001 fc7b 	bl	8007e80 <HAL_UART_Transmit>
        }
        i++;
 800658a:	89fb      	ldrh	r3, [r7, #14]
 800658c:	3301      	adds	r3, #1
 800658e:	81fb      	strh	r3, [r7, #14]
        HAL_Delay(10);
 8006590:	200a      	movs	r0, #10
 8006592:	f000 fbc5 	bl	8006d20 <HAL_Delay>
        if (i == 20) {
 8006596:	89fb      	ldrh	r3, [r7, #14]
 8006598:	2b14      	cmp	r3, #20
 800659a:	f47f af67 	bne.w	800646c <main+0x128>
            HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);//提示系统正在运行
 800659e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065a2:	480c      	ldr	r0, [pc, #48]	; (80065d4 <main+0x290>)
 80065a4:	f000 fff3 	bl	800758e <HAL_GPIO_TogglePin>
            i = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	81fb      	strh	r3, [r7, #14]
        if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET)//KEY1按下,写入24C02
 80065ac:	e75e      	b.n	800646c <main+0x128>
 80065ae:	bf00      	nop
 80065b0:	20000040 	.word	0x20000040
 80065b4:	20000458 	.word	0x20000458
 80065b8:	20000054 	.word	0x20000054
 80065bc:	2000002c 	.word	0x2000002c
 80065c0:	08008b40 	.word	0x08008b40
 80065c4:	08008b48 	.word	0x08008b48
 80065c8:	08008b54 	.word	0x08008b54
 80065cc:	08008b6c 	.word	0x08008b6c
 80065d0:	08008b80 	.word	0x08008b80
 80065d4:	40010800 	.word	0x40010800
 80065d8:	08008b94 	.word	0x08008b94
 80065dc:	08008ba4 	.word	0x08008ba4
 80065e0:	08008bbc 	.word	0x08008bbc
 80065e4:	40011000 	.word	0x40011000
 80065e8:	08008bd4 	.word	0x08008bd4
 80065ec:	08008bf0 	.word	0x08008bf0
 80065f0:	08008c04 	.word	0x08008c04

080065f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b090      	sub	sp, #64	; 0x40
 80065f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065fa:	f107 0318 	add.w	r3, r7, #24
 80065fe:	2228      	movs	r2, #40	; 0x28
 8006600:	2100      	movs	r1, #0
 8006602:	4618      	mov	r0, r3
 8006604:	f002 fa64 	bl	8008ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006608:	1d3b      	adds	r3, r7, #4
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	605a      	str	r2, [r3, #4]
 8006610:	609a      	str	r2, [r3, #8]
 8006612:	60da      	str	r2, [r3, #12]
 8006614:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006616:	2301      	movs	r3, #1
 8006618:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800661a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800661e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006620:	2300      	movs	r3, #0
 8006622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006624:	2301      	movs	r3, #1
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006628:	2302      	movs	r3, #2
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800662c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006632:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006636:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006638:	f107 0318 	add.w	r3, r7, #24
 800663c:	4618      	mov	r0, r3
 800663e:	f000 ffbf 	bl	80075c0 <HAL_RCC_OscConfig>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006648:	f000 f819 	bl	800667e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800664c:	230f      	movs	r3, #15
 800664e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006650:	2302      	movs	r3, #2
 8006652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800665c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006662:	1d3b      	adds	r3, r7, #4
 8006664:	2102      	movs	r1, #2
 8006666:	4618      	mov	r0, r3
 8006668:	f001 fa2c 	bl	8007ac4 <HAL_RCC_ClockConfig>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006672:	f000 f804 	bl	800667e <Error_Handler>
  }
}
 8006676:	bf00      	nop
 8006678:	3740      	adds	r7, #64	; 0x40
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800667e:	b480      	push	{r7}
 8006680:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006682:	b672      	cpsid	i
}
 8006684:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8006686:	e7fe      	b.n	8006686 <Error_Handler+0x8>

08006688 <IIC_Init>:
//All rights reserved
////////////////////////////////////////////////////////////////////////////////// 	  

//初始化IIC
void IIC_Init(void)
{					     
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
	IIC_SCL(1);
 800668c:	2201      	movs	r2, #1
 800668e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006692:	4805      	ldr	r0, [pc, #20]	; (80066a8 <IIC_Init+0x20>)
 8006694:	f000 ff63 	bl	800755e <HAL_GPIO_WritePin>
	IIC_SDA(1);
 8006698:	2201      	movs	r2, #1
 800669a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800669e:	4802      	ldr	r0, [pc, #8]	; (80066a8 <IIC_Init+0x20>)
 80066a0:	f000 ff5d 	bl	800755e <HAL_GPIO_WritePin>

}
 80066a4:	bf00      	nop
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40011000 	.word	0x40011000

080066ac <IIC_Start>:
//产生IIC起始信号
void IIC_Start(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
	SDA_OUT();     //sda线输出
 80066b0:	4b15      	ldr	r3, [pc, #84]	; (8006708 <IIC_Start+0x5c>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	4a14      	ldr	r2, [pc, #80]	; (8006708 <IIC_Start+0x5c>)
 80066b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066ba:	6053      	str	r3, [r2, #4]
 80066bc:	4b12      	ldr	r3, [pc, #72]	; (8006708 <IIC_Start+0x5c>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	4a11      	ldr	r2, [pc, #68]	; (8006708 <IIC_Start+0x5c>)
 80066c2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80066c6:	6053      	str	r3, [r2, #4]
	IIC_SDA(1);
 80066c8:	2201      	movs	r2, #1
 80066ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066ce:	480e      	ldr	r0, [pc, #56]	; (8006708 <IIC_Start+0x5c>)
 80066d0:	f000 ff45 	bl	800755e <HAL_GPIO_WritePin>
	IIC_SCL(1);
 80066d4:	2201      	movs	r2, #1
 80066d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066da:	480b      	ldr	r0, [pc, #44]	; (8006708 <IIC_Start+0x5c>)
 80066dc:	f000 ff3f 	bl	800755e <HAL_GPIO_WritePin>
	delay_us(4);
 80066e0:	2004      	movs	r0, #4
 80066e2:	f7fa fa13 	bl	8000b0c <delay_us>
	IIC_SDA(0);//START:when CLK is high,DATA change form high to low
 80066e6:	2200      	movs	r2, #0
 80066e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066ec:	4806      	ldr	r0, [pc, #24]	; (8006708 <IIC_Start+0x5c>)
 80066ee:	f000 ff36 	bl	800755e <HAL_GPIO_WritePin>
	delay_us(4);
 80066f2:	2004      	movs	r0, #4
 80066f4:	f7fa fa0a 	bl	8000b0c <delay_us>
	IIC_SCL(0);//钳住I2C总线，准备发送或接收数据
 80066f8:	2200      	movs	r2, #0
 80066fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066fe:	4802      	ldr	r0, [pc, #8]	; (8006708 <IIC_Start+0x5c>)
 8006700:	f000 ff2d 	bl	800755e <HAL_GPIO_WritePin>
}	  
 8006704:	bf00      	nop
 8006706:	bd80      	pop	{r7, pc}
 8006708:	40011000 	.word	0x40011000

0800670c <IIC_Stop>:
//产生IIC停止信号
void IIC_Stop(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
	SDA_OUT();//sda线输出
 8006710:	4b15      	ldr	r3, [pc, #84]	; (8006768 <IIC_Stop+0x5c>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4a14      	ldr	r2, [pc, #80]	; (8006768 <IIC_Stop+0x5c>)
 8006716:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800671a:	6053      	str	r3, [r2, #4]
 800671c:	4b12      	ldr	r3, [pc, #72]	; (8006768 <IIC_Stop+0x5c>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4a11      	ldr	r2, [pc, #68]	; (8006768 <IIC_Stop+0x5c>)
 8006722:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006726:	6053      	str	r3, [r2, #4]
	IIC_SCL(0);
 8006728:	2200      	movs	r2, #0
 800672a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800672e:	480e      	ldr	r0, [pc, #56]	; (8006768 <IIC_Stop+0x5c>)
 8006730:	f000 ff15 	bl	800755e <HAL_GPIO_WritePin>
	IIC_SDA(0);//STOP:when CLK is high DATA change form low to high
 8006734:	2200      	movs	r2, #0
 8006736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800673a:	480b      	ldr	r0, [pc, #44]	; (8006768 <IIC_Stop+0x5c>)
 800673c:	f000 ff0f 	bl	800755e <HAL_GPIO_WritePin>
 	delay_us(4);
 8006740:	2004      	movs	r0, #4
 8006742:	f7fa f9e3 	bl	8000b0c <delay_us>
 	IIC_SCL(1);
 8006746:	2201      	movs	r2, #1
 8006748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800674c:	4806      	ldr	r0, [pc, #24]	; (8006768 <IIC_Stop+0x5c>)
 800674e:	f000 ff06 	bl	800755e <HAL_GPIO_WritePin>
	IIC_SDA(1);//发送I2C总线结束信号
 8006752:	2201      	movs	r2, #1
 8006754:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006758:	4803      	ldr	r0, [pc, #12]	; (8006768 <IIC_Stop+0x5c>)
 800675a:	f000 ff00 	bl	800755e <HAL_GPIO_WritePin>
	delay_us(4);							   	
 800675e:	2004      	movs	r0, #4
 8006760:	f7fa f9d4 	bl	8000b0c <delay_us>
}
 8006764:	bf00      	nop
 8006766:	bd80      	pop	{r7, pc}
 8006768:	40011000 	.word	0x40011000

0800676c <IIC_Wait_Ack>:
//等待应答信号到来
//返回值：1，接收应答失败
//        0，接收应答成功
uint8_t IIC_Wait_Ack(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
	uint8_t ucErrTime=0;
 8006772:	2300      	movs	r3, #0
 8006774:	71fb      	strb	r3, [r7, #7]
	SDA_IN();      //SDA设置为输入
 8006776:	4b1e      	ldr	r3, [pc, #120]	; (80067f0 <IIC_Wait_Ack+0x84>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	4a1d      	ldr	r2, [pc, #116]	; (80067f0 <IIC_Wait_Ack+0x84>)
 800677c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006780:	6053      	str	r3, [r2, #4]
 8006782:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <IIC_Wait_Ack+0x84>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	4a1a      	ldr	r2, [pc, #104]	; (80067f0 <IIC_Wait_Ack+0x84>)
 8006788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678c:	6053      	str	r3, [r2, #4]
	IIC_SDA(1);delay_us(1);
 800678e:	2201      	movs	r2, #1
 8006790:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006794:	4816      	ldr	r0, [pc, #88]	; (80067f0 <IIC_Wait_Ack+0x84>)
 8006796:	f000 fee2 	bl	800755e <HAL_GPIO_WritePin>
 800679a:	2001      	movs	r0, #1
 800679c:	f7fa f9b6 	bl	8000b0c <delay_us>
	IIC_SCL(1);delay_us(1);
 80067a0:	2201      	movs	r2, #1
 80067a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067a6:	4812      	ldr	r0, [pc, #72]	; (80067f0 <IIC_Wait_Ack+0x84>)
 80067a8:	f000 fed9 	bl	800755e <HAL_GPIO_WritePin>
 80067ac:	2001      	movs	r0, #1
 80067ae:	f7fa f9ad 	bl	8000b0c <delay_us>
	while(IIC_READ_SDA)
 80067b2:	e009      	b.n	80067c8 <IIC_Wait_Ack+0x5c>
	{
		ucErrTime++;
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	3301      	adds	r3, #1
 80067b8:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	2bfa      	cmp	r3, #250	; 0xfa
 80067be:	d903      	bls.n	80067c8 <IIC_Wait_Ack+0x5c>
		{
			IIC_Stop();
 80067c0:	f7ff ffa4 	bl	800670c <IIC_Stop>
			return 1;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e00e      	b.n	80067e6 <IIC_Wait_Ack+0x7a>
	while(IIC_READ_SDA)
 80067c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067cc:	4808      	ldr	r0, [pc, #32]	; (80067f0 <IIC_Wait_Ack+0x84>)
 80067ce:	f000 feaf 	bl	8007530 <HAL_GPIO_ReadPin>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1ed      	bne.n	80067b4 <IIC_Wait_Ack+0x48>
		}
	}
	IIC_SCL(0);//时钟输出0
 80067d8:	2200      	movs	r2, #0
 80067da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067de:	4804      	ldr	r0, [pc, #16]	; (80067f0 <IIC_Wait_Ack+0x84>)
 80067e0:	f000 febd 	bl	800755e <HAL_GPIO_WritePin>
	return 0;  
 80067e4:	2300      	movs	r3, #0
} 
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	40011000 	.word	0x40011000

080067f4 <IIC_Ack>:
//产生ACK应答
void IIC_Ack(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 80067f8:	2200      	movs	r2, #0
 80067fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067fe:	4814      	ldr	r0, [pc, #80]	; (8006850 <IIC_Ack+0x5c>)
 8006800:	f000 fead 	bl	800755e <HAL_GPIO_WritePin>
	SDA_OUT();
 8006804:	4b12      	ldr	r3, [pc, #72]	; (8006850 <IIC_Ack+0x5c>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	4a11      	ldr	r2, [pc, #68]	; (8006850 <IIC_Ack+0x5c>)
 800680a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800680e:	6053      	str	r3, [r2, #4]
 8006810:	4b0f      	ldr	r3, [pc, #60]	; (8006850 <IIC_Ack+0x5c>)
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	4a0e      	ldr	r2, [pc, #56]	; (8006850 <IIC_Ack+0x5c>)
 8006816:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800681a:	6053      	str	r3, [r2, #4]
	IIC_SDA(0);
 800681c:	2200      	movs	r2, #0
 800681e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006822:	480b      	ldr	r0, [pc, #44]	; (8006850 <IIC_Ack+0x5c>)
 8006824:	f000 fe9b 	bl	800755e <HAL_GPIO_WritePin>
	delay_us(2);
 8006828:	2002      	movs	r0, #2
 800682a:	f7fa f96f 	bl	8000b0c <delay_us>
	IIC_SCL(1);
 800682e:	2201      	movs	r2, #1
 8006830:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006834:	4806      	ldr	r0, [pc, #24]	; (8006850 <IIC_Ack+0x5c>)
 8006836:	f000 fe92 	bl	800755e <HAL_GPIO_WritePin>
	delay_us(2);
 800683a:	2002      	movs	r0, #2
 800683c:	f7fa f966 	bl	8000b0c <delay_us>
	IIC_SCL(0);
 8006840:	2200      	movs	r2, #0
 8006842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006846:	4802      	ldr	r0, [pc, #8]	; (8006850 <IIC_Ack+0x5c>)
 8006848:	f000 fe89 	bl	800755e <HAL_GPIO_WritePin>
}
 800684c:	bf00      	nop
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40011000 	.word	0x40011000

08006854 <IIC_NAck>:
//不产生ACK应答
void IIC_NAck(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 8006858:	2200      	movs	r2, #0
 800685a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800685e:	4814      	ldr	r0, [pc, #80]	; (80068b0 <IIC_NAck+0x5c>)
 8006860:	f000 fe7d 	bl	800755e <HAL_GPIO_WritePin>
	SDA_OUT();
 8006864:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <IIC_NAck+0x5c>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	4a11      	ldr	r2, [pc, #68]	; (80068b0 <IIC_NAck+0x5c>)
 800686a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800686e:	6053      	str	r3, [r2, #4]
 8006870:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <IIC_NAck+0x5c>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	4a0e      	ldr	r2, [pc, #56]	; (80068b0 <IIC_NAck+0x5c>)
 8006876:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800687a:	6053      	str	r3, [r2, #4]
	IIC_SDA(1);
 800687c:	2201      	movs	r2, #1
 800687e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006882:	480b      	ldr	r0, [pc, #44]	; (80068b0 <IIC_NAck+0x5c>)
 8006884:	f000 fe6b 	bl	800755e <HAL_GPIO_WritePin>
	delay_us(2);
 8006888:	2002      	movs	r0, #2
 800688a:	f7fa f93f 	bl	8000b0c <delay_us>
	IIC_SCL(1);
 800688e:	2201      	movs	r2, #1
 8006890:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006894:	4806      	ldr	r0, [pc, #24]	; (80068b0 <IIC_NAck+0x5c>)
 8006896:	f000 fe62 	bl	800755e <HAL_GPIO_WritePin>
	delay_us(2);
 800689a:	2002      	movs	r0, #2
 800689c:	f7fa f936 	bl	8000b0c <delay_us>
	IIC_SCL(0);
 80068a0:	2200      	movs	r2, #0
 80068a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068a6:	4802      	ldr	r0, [pc, #8]	; (80068b0 <IIC_NAck+0x5c>)
 80068a8:	f000 fe59 	bl	800755e <HAL_GPIO_WritePin>
}					 				     
 80068ac:	bf00      	nop
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40011000 	.word	0x40011000

080068b4 <IIC_Send_Byte>:
//IIC发送一个字节
//返回从机有无应答
//1，有应答
//0，无应答
void IIC_Send_Byte(uint8_t txd)
{                        
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	71fb      	strb	r3, [r7, #7]
	uint8_t t;
	SDA_OUT(); 	    
 80068be:	4b20      	ldr	r3, [pc, #128]	; (8006940 <IIC_Send_Byte+0x8c>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	4a1f      	ldr	r2, [pc, #124]	; (8006940 <IIC_Send_Byte+0x8c>)
 80068c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068c8:	6053      	str	r3, [r2, #4]
 80068ca:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <IIC_Send_Byte+0x8c>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	4a1c      	ldr	r2, [pc, #112]	; (8006940 <IIC_Send_Byte+0x8c>)
 80068d0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80068d4:	6053      	str	r3, [r2, #4]
	IIC_SCL(0);//拉低时钟开始数据传输
 80068d6:	2200      	movs	r2, #0
 80068d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068dc:	4818      	ldr	r0, [pc, #96]	; (8006940 <IIC_Send_Byte+0x8c>)
 80068de:	f000 fe3e 	bl	800755e <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
 80068e6:	e023      	b.n	8006930 <IIC_Send_Byte+0x7c>
    {              
    	HAL_GPIO_WritePin(IIC_SDA_GPIO_Port, IIC_SDA_Pin, (txd&0x80)>>7);
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	09db      	lsrs	r3, r3, #7
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068f4:	4812      	ldr	r0, [pc, #72]	; (8006940 <IIC_Send_Byte+0x8c>)
 80068f6:	f000 fe32 	bl	800755e <HAL_GPIO_WritePin>
        txd<<=1; 	  
 80068fa:	79fb      	ldrb	r3, [r7, #7]
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	71fb      	strb	r3, [r7, #7]
		delay_us(2);   //对TEA5767这三个延时都是必须的
 8006900:	2002      	movs	r0, #2
 8006902:	f7fa f903 	bl	8000b0c <delay_us>
		IIC_SCL(1);
 8006906:	2201      	movs	r2, #1
 8006908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800690c:	480c      	ldr	r0, [pc, #48]	; (8006940 <IIC_Send_Byte+0x8c>)
 800690e:	f000 fe26 	bl	800755e <HAL_GPIO_WritePin>
		delay_us(2); 
 8006912:	2002      	movs	r0, #2
 8006914:	f7fa f8fa 	bl	8000b0c <delay_us>
		IIC_SCL(0);
 8006918:	2200      	movs	r2, #0
 800691a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800691e:	4808      	ldr	r0, [pc, #32]	; (8006940 <IIC_Send_Byte+0x8c>)
 8006920:	f000 fe1d 	bl	800755e <HAL_GPIO_WritePin>
		delay_us(2);
 8006924:	2002      	movs	r0, #2
 8006926:	f7fa f8f1 	bl	8000b0c <delay_us>
    for(t=0;t<8;t++)
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	3301      	adds	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	2b07      	cmp	r3, #7
 8006934:	d9d8      	bls.n	80068e8 <IIC_Send_Byte+0x34>
    }	 
} 	    
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	40011000 	.word	0x40011000

08006944 <IIC_Read_Byte>:
//读1个字节，ack=1时，发送ACK，ack=0，发送nACK
uint8_t IIC_Read_Byte(unsigned char ack)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	71fb      	strb	r3, [r7, #7]
	unsigned char i,receive=0;
 800694e:	2300      	movs	r3, #0
 8006950:	73bb      	strb	r3, [r7, #14]
	SDA_IN();//SDA设置为输入
 8006952:	4b21      	ldr	r3, [pc, #132]	; (80069d8 <IIC_Read_Byte+0x94>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	4a20      	ldr	r2, [pc, #128]	; (80069d8 <IIC_Read_Byte+0x94>)
 8006958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800695c:	6053      	str	r3, [r2, #4]
 800695e:	4b1e      	ldr	r3, [pc, #120]	; (80069d8 <IIC_Read_Byte+0x94>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	4a1d      	ldr	r2, [pc, #116]	; (80069d8 <IIC_Read_Byte+0x94>)
 8006964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006968:	6053      	str	r3, [r2, #4]
    for(i=0;i<8;i++ )
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]
 800696e:	e022      	b.n	80069b6 <IIC_Read_Byte+0x72>
	{
    	IIC_SCL(0);
 8006970:	2200      	movs	r2, #0
 8006972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006976:	4818      	ldr	r0, [pc, #96]	; (80069d8 <IIC_Read_Byte+0x94>)
 8006978:	f000 fdf1 	bl	800755e <HAL_GPIO_WritePin>
        delay_us(2);
 800697c:	2002      	movs	r0, #2
 800697e:	f7fa f8c5 	bl	8000b0c <delay_us>
        IIC_SCL(1);
 8006982:	2201      	movs	r2, #1
 8006984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006988:	4813      	ldr	r0, [pc, #76]	; (80069d8 <IIC_Read_Byte+0x94>)
 800698a:	f000 fde8 	bl	800755e <HAL_GPIO_WritePin>
        receive<<=1;
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	73bb      	strb	r3, [r7, #14]
        if(IIC_READ_SDA)
 8006994:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006998:	480f      	ldr	r0, [pc, #60]	; (80069d8 <IIC_Read_Byte+0x94>)
 800699a:	f000 fdc9 	bl	8007530 <HAL_GPIO_ReadPin>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <IIC_Read_Byte+0x66>
        	receive++;
 80069a4:	7bbb      	ldrb	r3, [r7, #14]
 80069a6:	3301      	adds	r3, #1
 80069a8:	73bb      	strb	r3, [r7, #14]
		delay_us(1); 
 80069aa:	2001      	movs	r0, #1
 80069ac:	f7fa f8ae 	bl	8000b0c <delay_us>
    for(i=0;i<8;i++ )
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	3301      	adds	r3, #1
 80069b4:	73fb      	strb	r3, [r7, #15]
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	2b07      	cmp	r3, #7
 80069ba:	d9d9      	bls.n	8006970 <IIC_Read_Byte+0x2c>
    }					 
    if (!ack)
 80069bc:	79fb      	ldrb	r3, [r7, #7]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d102      	bne.n	80069c8 <IIC_Read_Byte+0x84>
        IIC_NAck();//发送nACK
 80069c2:	f7ff ff47 	bl	8006854 <IIC_NAck>
 80069c6:	e001      	b.n	80069cc <IIC_Read_Byte+0x88>
    else
        IIC_Ack(); //发送ACK
 80069c8:	f7ff ff14 	bl	80067f4 <IIC_Ack>
    return receive;
 80069cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	40011000 	.word	0x40011000

080069dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80069e2:	4b16      	ldr	r3, [pc, #88]	; (8006a3c <HAL_MspInit+0x60>)
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	4a15      	ldr	r2, [pc, #84]	; (8006a3c <HAL_MspInit+0x60>)
 80069e8:	f043 0301 	orr.w	r3, r3, #1
 80069ec:	6193      	str	r3, [r2, #24]
 80069ee:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <HAL_MspInit+0x60>)
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	60bb      	str	r3, [r7, #8]
 80069f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80069fa:	4b10      	ldr	r3, [pc, #64]	; (8006a3c <HAL_MspInit+0x60>)
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	4a0f      	ldr	r2, [pc, #60]	; (8006a3c <HAL_MspInit+0x60>)
 8006a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a04:	61d3      	str	r3, [r2, #28]
 8006a06:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <HAL_MspInit+0x60>)
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0e:	607b      	str	r3, [r7, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8006a12:	2005      	movs	r0, #5
 8006a14:	f000 fa74 	bl	8006f00 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006a18:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <HAL_MspInit+0x64>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	4a04      	ldr	r2, [pc, #16]	; (8006a40 <HAL_MspInit+0x64>)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a34:	bf00      	nop
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40021000 	.word	0x40021000
 8006a40:	40010000 	.word	0x40010000

08006a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8006a48:	e7fe      	b.n	8006a48 <NMI_Handler+0x4>

08006a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a4e:	e7fe      	b.n	8006a4e <HardFault_Handler+0x4>

08006a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a54:	e7fe      	b.n	8006a54 <MemManage_Handler+0x4>

08006a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a56:	b480      	push	{r7}
 8006a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a5a:	e7fe      	b.n	8006a5a <BusFault_Handler+0x4>

08006a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a60:	e7fe      	b.n	8006a60 <UsageFault_Handler+0x4>

08006a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006a62:	b480      	push	{r7}
 8006a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a66:	bf00      	nop
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr

08006a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a72:	bf00      	nop
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr

08006a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a7e:	bf00      	nop
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr

08006a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a8a:	f000 f92d 	bl	8006ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a8e:	bf00      	nop
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006a98:	4804      	ldr	r0, [pc, #16]	; (8006aac <USART1_IRQHandler+0x18>)
 8006a9a:	f001 fa99 	bl	8007fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
    HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1);
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	4903      	ldr	r1, [pc, #12]	; (8006ab0 <USART1_IRQHandler+0x1c>)
 8006aa2:	4802      	ldr	r0, [pc, #8]	; (8006aac <USART1_IRQHandler+0x18>)
 8006aa4:	f001 fa6f 	bl	8007f86 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8006aa8:	bf00      	nop
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20000458 	.word	0x20000458
 8006ab0:	20000040 	.word	0x20000040

08006ab4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a0d      	ldr	r2, [pc, #52]	; (8006af8 <HAL_UART_RxCpltCallback+0x44>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d112      	bne.n	8006aec <HAL_UART_RxCpltCallback+0x38>
        if (rxBuffer[0] == '\n') {
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <HAL_UART_RxCpltCallback+0x48>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b0a      	cmp	r3, #10
 8006acc:	d103      	bne.n	8006ad6 <HAL_UART_RxCpltCallback+0x22>
//            HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
            uLength = 0;
 8006ace:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <HAL_UART_RxCpltCallback+0x4c>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
        } else {
            uRx_Data[uLength] = rxBuffer[0];
            uLength++;
        }
    }
}
 8006ad4:	e00a      	b.n	8006aec <HAL_UART_RxCpltCallback+0x38>
            uRx_Data[uLength] = rxBuffer[0];
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <HAL_UART_RxCpltCallback+0x4c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a08      	ldr	r2, [pc, #32]	; (8006afc <HAL_UART_RxCpltCallback+0x48>)
 8006adc:	7811      	ldrb	r1, [r2, #0]
 8006ade:	4a09      	ldr	r2, [pc, #36]	; (8006b04 <HAL_UART_RxCpltCallback+0x50>)
 8006ae0:	54d1      	strb	r1, [r2, r3]
            uLength++;
 8006ae2:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <HAL_UART_RxCpltCallback+0x4c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	4a05      	ldr	r2, [pc, #20]	; (8006b00 <HAL_UART_RxCpltCallback+0x4c>)
 8006aea:	6013      	str	r3, [r2, #0]
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40013800 	.word	0x40013800
 8006afc:	20000040 	.word	0x20000040
 8006b00:	20000454 	.word	0x20000454
 8006b04:	20000054 	.word	0x20000054

08006b08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b0c:	bf00      	nop
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr

08006b14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006b18:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <MX_USART1_UART_Init+0x4c>)
 8006b1a:	4a12      	ldr	r2, [pc, #72]	; (8006b64 <MX_USART1_UART_Init+0x50>)
 8006b1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006b1e:	4b10      	ldr	r3, [pc, #64]	; (8006b60 <MX_USART1_UART_Init+0x4c>)
 8006b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006b26:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <MX_USART1_UART_Init+0x4c>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <MX_USART1_UART_Init+0x4c>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006b32:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <MX_USART1_UART_Init+0x4c>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006b38:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <MX_USART1_UART_Init+0x4c>)
 8006b3a:	220c      	movs	r2, #12
 8006b3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b3e:	4b08      	ldr	r3, [pc, #32]	; (8006b60 <MX_USART1_UART_Init+0x4c>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b44:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <MX_USART1_UART_Init+0x4c>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b4a:	4805      	ldr	r0, [pc, #20]	; (8006b60 <MX_USART1_UART_Init+0x4c>)
 8006b4c:	f001 f948 	bl	8007de0 <HAL_UART_Init>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006b56:	f7ff fd92 	bl	800667e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006b5a:	bf00      	nop
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000458 	.word	0x20000458
 8006b64:	40013800 	.word	0x40013800

08006b68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b70:	f107 0310 	add.w	r3, r7, #16
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	605a      	str	r2, [r3, #4]
 8006b7a:	609a      	str	r2, [r3, #8]
 8006b7c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a20      	ldr	r2, [pc, #128]	; (8006c04 <HAL_UART_MspInit+0x9c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d139      	bne.n	8006bfc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006b88:	4b1f      	ldr	r3, [pc, #124]	; (8006c08 <HAL_UART_MspInit+0xa0>)
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	4a1e      	ldr	r2, [pc, #120]	; (8006c08 <HAL_UART_MspInit+0xa0>)
 8006b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b92:	6193      	str	r3, [r2, #24]
 8006b94:	4b1c      	ldr	r3, [pc, #112]	; (8006c08 <HAL_UART_MspInit+0xa0>)
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b9c:	60fb      	str	r3, [r7, #12]
 8006b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ba0:	4b19      	ldr	r3, [pc, #100]	; (8006c08 <HAL_UART_MspInit+0xa0>)
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	4a18      	ldr	r2, [pc, #96]	; (8006c08 <HAL_UART_MspInit+0xa0>)
 8006ba6:	f043 0304 	orr.w	r3, r3, #4
 8006baa:	6193      	str	r3, [r2, #24]
 8006bac:	4b16      	ldr	r3, [pc, #88]	; (8006c08 <HAL_UART_MspInit+0xa0>)
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bc6:	f107 0310 	add.w	r3, r7, #16
 8006bca:	4619      	mov	r1, r3
 8006bcc:	480f      	ldr	r0, [pc, #60]	; (8006c0c <HAL_UART_MspInit+0xa4>)
 8006bce:	f000 fb1b 	bl	8007208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006be0:	f107 0310 	add.w	r3, r7, #16
 8006be4:	4619      	mov	r1, r3
 8006be6:	4809      	ldr	r0, [pc, #36]	; (8006c0c <HAL_UART_MspInit+0xa4>)
 8006be8:	f000 fb0e 	bl	8007208 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006bec:	2200      	movs	r2, #0
 8006bee:	2101      	movs	r1, #1
 8006bf0:	2025      	movs	r0, #37	; 0x25
 8006bf2:	f000 f990 	bl	8006f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006bf6:	2025      	movs	r0, #37	; 0x25
 8006bf8:	f000 f9a9 	bl	8006f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	3720      	adds	r7, #32
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40013800 	.word	0x40013800
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	40010800 	.word	0x40010800

08006c10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006c10:	f7ff ff7a 	bl	8006b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006c14:	480b      	ldr	r0, [pc, #44]	; (8006c44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006c16:	490c      	ldr	r1, [pc, #48]	; (8006c48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006c18:	4a0c      	ldr	r2, [pc, #48]	; (8006c4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8006c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c1c:	e002      	b.n	8006c24 <LoopCopyDataInit>

08006c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c22:	3304      	adds	r3, #4

08006c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c28:	d3f9      	bcc.n	8006c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c2a:	4a09      	ldr	r2, [pc, #36]	; (8006c50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006c2c:	4c09      	ldr	r4, [pc, #36]	; (8006c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c30:	e001      	b.n	8006c36 <LoopFillZerobss>

08006c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c34:	3204      	adds	r2, #4

08006c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c38:	d3fb      	bcc.n	8006c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006c3a:	f001 ff51 	bl	8008ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006c3e:	f7ff fb81 	bl	8006344 <main>
  bx lr
 8006c42:	4770      	bx	lr
  ldr r0, =_sdata
 8006c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c48:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8006c4c:	0800a40c 	.word	0x0800a40c
  ldr r2, =_sbss
 8006c50:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8006c54:	200004a4 	.word	0x200004a4

08006c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006c58:	e7fe      	b.n	8006c58 <ADC1_2_IRQHandler>
	...

08006c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c60:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <HAL_Init+0x28>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a07      	ldr	r2, [pc, #28]	; (8006c84 <HAL_Init+0x28>)
 8006c66:	f043 0310 	orr.w	r3, r3, #16
 8006c6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c6c:	2003      	movs	r0, #3
 8006c6e:	f000 f947 	bl	8006f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c72:	2000      	movs	r0, #0
 8006c74:	f000 f808 	bl	8006c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c78:	f7ff feb0 	bl	80069dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	40022000 	.word	0x40022000

08006c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c90:	4b12      	ldr	r3, [pc, #72]	; (8006cdc <HAL_InitTick+0x54>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b12      	ldr	r3, [pc, #72]	; (8006ce0 <HAL_InitTick+0x58>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 f95f 	bl	8006f6a <HAL_SYSTICK_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e00e      	b.n	8006cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b0f      	cmp	r3, #15
 8006cba:	d80a      	bhi.n	8006cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc4:	f000 f927 	bl	8006f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006cc8:	4a06      	ldr	r2, [pc, #24]	; (8006ce4 <HAL_InitTick+0x5c>)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e000      	b.n	8006cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	20000004 	.word	0x20000004
 8006ce0:	2000000c 	.word	0x2000000c
 8006ce4:	20000008 	.word	0x20000008

08006ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <HAL_IncTick+0x1c>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <HAL_IncTick+0x20>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	4a03      	ldr	r2, [pc, #12]	; (8006d08 <HAL_IncTick+0x20>)
 8006cfa:	6013      	str	r3, [r2, #0]
}
 8006cfc:	bf00      	nop
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr
 8006d04:	2000000c 	.word	0x2000000c
 8006d08:	200004a0 	.word	0x200004a0

08006d0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8006d10:	4b02      	ldr	r3, [pc, #8]	; (8006d1c <HAL_GetTick+0x10>)
 8006d12:	681b      	ldr	r3, [r3, #0]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc80      	pop	{r7}
 8006d1a:	4770      	bx	lr
 8006d1c:	200004a0 	.word	0x200004a0

08006d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d28:	f7ff fff0 	bl	8006d0c <HAL_GetTick>
 8006d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d38:	d005      	beq.n	8006d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <HAL_Delay+0x44>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d46:	bf00      	nop
 8006d48:	f7ff ffe0 	bl	8006d0c <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d8f7      	bhi.n	8006d48 <HAL_Delay+0x28>
  {
  }
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	2000000c 	.word	0x2000000c

08006d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <__NVIC_SetPriorityGrouping+0x44>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d84:	4013      	ands	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d9a:	4a04      	ldr	r2, [pc, #16]	; (8006dac <__NVIC_SetPriorityGrouping+0x44>)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	60d3      	str	r3, [r2, #12]
}
 8006da0:	bf00      	nop
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	e000ed00 	.word	0xe000ed00

08006db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006db4:	4b04      	ldr	r3, [pc, #16]	; (8006dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	f003 0307 	and.w	r3, r3, #7
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bc80      	pop	{r7}
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	e000ed00 	.word	0xe000ed00

08006dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	db0b      	blt.n	8006df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	f003 021f 	and.w	r2, r3, #31
 8006de4:	4906      	ldr	r1, [pc, #24]	; (8006e00 <__NVIC_EnableIRQ+0x34>)
 8006de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	2001      	movs	r0, #1
 8006dee:	fa00 f202 	lsl.w	r2, r0, r2
 8006df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr
 8006e00:	e000e100 	.word	0xe000e100

08006e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	6039      	str	r1, [r7, #0]
 8006e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	db0a      	blt.n	8006e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	490c      	ldr	r1, [pc, #48]	; (8006e50 <__NVIC_SetPriority+0x4c>)
 8006e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e22:	0112      	lsls	r2, r2, #4
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	440b      	add	r3, r1
 8006e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e2c:	e00a      	b.n	8006e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	4908      	ldr	r1, [pc, #32]	; (8006e54 <__NVIC_SetPriority+0x50>)
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	3b04      	subs	r3, #4
 8006e3c:	0112      	lsls	r2, r2, #4
 8006e3e:	b2d2      	uxtb	r2, r2
 8006e40:	440b      	add	r3, r1
 8006e42:	761a      	strb	r2, [r3, #24]
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	e000e100 	.word	0xe000e100
 8006e54:	e000ed00 	.word	0xe000ed00

08006e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b089      	sub	sp, #36	; 0x24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f1c3 0307 	rsb	r3, r3, #7
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	bf28      	it	cs
 8006e76:	2304      	movcs	r3, #4
 8006e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	2b06      	cmp	r3, #6
 8006e80:	d902      	bls.n	8006e88 <NVIC_EncodePriority+0x30>
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	3b03      	subs	r3, #3
 8006e86:	e000      	b.n	8006e8a <NVIC_EncodePriority+0x32>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	43da      	mvns	r2, r3
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	401a      	ands	r2, r3
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eaa:	43d9      	mvns	r1, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006eb0:	4313      	orrs	r3, r2
         );
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3724      	adds	r7, #36	; 0x24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ecc:	d301      	bcc.n	8006ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e00f      	b.n	8006ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ed2:	4a0a      	ldr	r2, [pc, #40]	; (8006efc <SysTick_Config+0x40>)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006eda:	210f      	movs	r1, #15
 8006edc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee0:	f7ff ff90 	bl	8006e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ee4:	4b05      	ldr	r3, [pc, #20]	; (8006efc <SysTick_Config+0x40>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006eea:	4b04      	ldr	r3, [pc, #16]	; (8006efc <SysTick_Config+0x40>)
 8006eec:	2207      	movs	r2, #7
 8006eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	e000e010 	.word	0xe000e010

08006f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff ff2d 	bl	8006d68 <__NVIC_SetPriorityGrouping>
}
 8006f0e:	bf00      	nop
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b086      	sub	sp, #24
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
 8006f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f28:	f7ff ff42 	bl	8006db0 <__NVIC_GetPriorityGrouping>
 8006f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	68b9      	ldr	r1, [r7, #8]
 8006f32:	6978      	ldr	r0, [r7, #20]
 8006f34:	f7ff ff90 	bl	8006e58 <NVIC_EncodePriority>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff ff5f 	bl	8006e04 <__NVIC_SetPriority>
}
 8006f46:	bf00      	nop
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	4603      	mov	r3, r0
 8006f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff ff35 	bl	8006dcc <__NVIC_EnableIRQ>
}
 8006f62:	bf00      	nop
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff ffa2 	bl	8006ebc <SysTick_Config>
 8006f78:	4603      	mov	r3, r0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b085      	sub	sp, #20
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d008      	beq.n	8006fac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2204      	movs	r2, #4
 8006f9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e020      	b.n	8006fee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 020e 	bic.w	r2, r2, #14
 8006fba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0201 	bic.w	r2, r2, #1
 8006fca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8006fda:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bc80      	pop	{r7}
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d005      	beq.n	800701c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2204      	movs	r2, #4
 8007014:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	73fb      	strb	r3, [r7, #15]
 800701a:	e0d6      	b.n	80071ca <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 020e 	bic.w	r2, r2, #14
 800702a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0201 	bic.w	r2, r2, #1
 800703a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	4b64      	ldr	r3, [pc, #400]	; (80071d4 <HAL_DMA_Abort_IT+0x1dc>)
 8007044:	429a      	cmp	r2, r3
 8007046:	d958      	bls.n	80070fa <HAL_DMA_Abort_IT+0x102>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a62      	ldr	r2, [pc, #392]	; (80071d8 <HAL_DMA_Abort_IT+0x1e0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d04f      	beq.n	80070f2 <HAL_DMA_Abort_IT+0xfa>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a61      	ldr	r2, [pc, #388]	; (80071dc <HAL_DMA_Abort_IT+0x1e4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d048      	beq.n	80070ee <HAL_DMA_Abort_IT+0xf6>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a5f      	ldr	r2, [pc, #380]	; (80071e0 <HAL_DMA_Abort_IT+0x1e8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d040      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xf0>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a5e      	ldr	r2, [pc, #376]	; (80071e4 <HAL_DMA_Abort_IT+0x1ec>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d038      	beq.n	80070e2 <HAL_DMA_Abort_IT+0xea>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a5c      	ldr	r2, [pc, #368]	; (80071e8 <HAL_DMA_Abort_IT+0x1f0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d030      	beq.n	80070dc <HAL_DMA_Abort_IT+0xe4>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a5b      	ldr	r2, [pc, #364]	; (80071ec <HAL_DMA_Abort_IT+0x1f4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d028      	beq.n	80070d6 <HAL_DMA_Abort_IT+0xde>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a52      	ldr	r2, [pc, #328]	; (80071d4 <HAL_DMA_Abort_IT+0x1dc>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d020      	beq.n	80070d0 <HAL_DMA_Abort_IT+0xd8>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a57      	ldr	r2, [pc, #348]	; (80071f0 <HAL_DMA_Abort_IT+0x1f8>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d019      	beq.n	80070cc <HAL_DMA_Abort_IT+0xd4>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a55      	ldr	r2, [pc, #340]	; (80071f4 <HAL_DMA_Abort_IT+0x1fc>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d012      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xd0>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a54      	ldr	r2, [pc, #336]	; (80071f8 <HAL_DMA_Abort_IT+0x200>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00a      	beq.n	80070c2 <HAL_DMA_Abort_IT+0xca>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a52      	ldr	r2, [pc, #328]	; (80071fc <HAL_DMA_Abort_IT+0x204>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d102      	bne.n	80070bc <HAL_DMA_Abort_IT+0xc4>
 80070b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070ba:	e01b      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070c0:	e018      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070c6:	e015      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070c8:	2310      	movs	r3, #16
 80070ca:	e013      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070cc:	2301      	movs	r3, #1
 80070ce:	e011      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070d4:	e00e      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80070da:	e00b      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070e0:	e008      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070e6:	e005      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070ec:	e002      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070ee:	2310      	movs	r3, #16
 80070f0:	e000      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4a42      	ldr	r2, [pc, #264]	; (8007200 <HAL_DMA_Abort_IT+0x208>)
 80070f6:	6053      	str	r3, [r2, #4]
 80070f8:	e057      	b.n	80071aa <HAL_DMA_Abort_IT+0x1b2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a36      	ldr	r2, [pc, #216]	; (80071d8 <HAL_DMA_Abort_IT+0x1e0>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d04f      	beq.n	80071a4 <HAL_DMA_Abort_IT+0x1ac>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a34      	ldr	r2, [pc, #208]	; (80071dc <HAL_DMA_Abort_IT+0x1e4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d048      	beq.n	80071a0 <HAL_DMA_Abort_IT+0x1a8>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a33      	ldr	r2, [pc, #204]	; (80071e0 <HAL_DMA_Abort_IT+0x1e8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d040      	beq.n	800719a <HAL_DMA_Abort_IT+0x1a2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a31      	ldr	r2, [pc, #196]	; (80071e4 <HAL_DMA_Abort_IT+0x1ec>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d038      	beq.n	8007194 <HAL_DMA_Abort_IT+0x19c>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a30      	ldr	r2, [pc, #192]	; (80071e8 <HAL_DMA_Abort_IT+0x1f0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d030      	beq.n	800718e <HAL_DMA_Abort_IT+0x196>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2e      	ldr	r2, [pc, #184]	; (80071ec <HAL_DMA_Abort_IT+0x1f4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d028      	beq.n	8007188 <HAL_DMA_Abort_IT+0x190>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a26      	ldr	r2, [pc, #152]	; (80071d4 <HAL_DMA_Abort_IT+0x1dc>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d020      	beq.n	8007182 <HAL_DMA_Abort_IT+0x18a>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a2a      	ldr	r2, [pc, #168]	; (80071f0 <HAL_DMA_Abort_IT+0x1f8>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d019      	beq.n	800717e <HAL_DMA_Abort_IT+0x186>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a29      	ldr	r2, [pc, #164]	; (80071f4 <HAL_DMA_Abort_IT+0x1fc>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d012      	beq.n	800717a <HAL_DMA_Abort_IT+0x182>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a27      	ldr	r2, [pc, #156]	; (80071f8 <HAL_DMA_Abort_IT+0x200>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00a      	beq.n	8007174 <HAL_DMA_Abort_IT+0x17c>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a26      	ldr	r2, [pc, #152]	; (80071fc <HAL_DMA_Abort_IT+0x204>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d102      	bne.n	800716e <HAL_DMA_Abort_IT+0x176>
 8007168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800716c:	e01b      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 800716e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007172:	e018      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 8007174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007178:	e015      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 800717a:	2310      	movs	r3, #16
 800717c:	e013      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 800717e:	2301      	movs	r3, #1
 8007180:	e011      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 8007182:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007186:	e00e      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 8007188:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800718c:	e00b      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 800718e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007192:	e008      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 8007194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007198:	e005      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 800719a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800719e:	e002      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 80071a0:	2310      	movs	r3, #16
 80071a2:	e000      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 80071a4:	2301      	movs	r3, #1
 80071a6:	4a17      	ldr	r2, [pc, #92]	; (8007204 <HAL_DMA_Abort_IT+0x20c>)
 80071a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
    } 
  }
  return status;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40020080 	.word	0x40020080
 80071d8:	40020008 	.word	0x40020008
 80071dc:	4002001c 	.word	0x4002001c
 80071e0:	40020030 	.word	0x40020030
 80071e4:	40020044 	.word	0x40020044
 80071e8:	40020058 	.word	0x40020058
 80071ec:	4002006c 	.word	0x4002006c
 80071f0:	40020408 	.word	0x40020408
 80071f4:	4002041c 	.word	0x4002041c
 80071f8:	40020430 	.word	0x40020430
 80071fc:	40020444 	.word	0x40020444
 8007200:	40020400 	.word	0x40020400
 8007204:	40020000 	.word	0x40020000

08007208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007208:	b480      	push	{r7}
 800720a:	b08b      	sub	sp, #44	; 0x2c
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007212:	2300      	movs	r3, #0
 8007214:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007216:	2300      	movs	r3, #0
 8007218:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800721a:	e179      	b.n	8007510 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800721c:	2201      	movs	r2, #1
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	fa02 f303 	lsl.w	r3, r2, r3
 8007224:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	4013      	ands	r3, r2
 800722e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	429a      	cmp	r2, r3
 8007236:	f040 8168 	bne.w	800750a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	4a96      	ldr	r2, [pc, #600]	; (8007498 <HAL_GPIO_Init+0x290>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d05e      	beq.n	8007302 <HAL_GPIO_Init+0xfa>
 8007244:	4a94      	ldr	r2, [pc, #592]	; (8007498 <HAL_GPIO_Init+0x290>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d875      	bhi.n	8007336 <HAL_GPIO_Init+0x12e>
 800724a:	4a94      	ldr	r2, [pc, #592]	; (800749c <HAL_GPIO_Init+0x294>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d058      	beq.n	8007302 <HAL_GPIO_Init+0xfa>
 8007250:	4a92      	ldr	r2, [pc, #584]	; (800749c <HAL_GPIO_Init+0x294>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d86f      	bhi.n	8007336 <HAL_GPIO_Init+0x12e>
 8007256:	4a92      	ldr	r2, [pc, #584]	; (80074a0 <HAL_GPIO_Init+0x298>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d052      	beq.n	8007302 <HAL_GPIO_Init+0xfa>
 800725c:	4a90      	ldr	r2, [pc, #576]	; (80074a0 <HAL_GPIO_Init+0x298>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d869      	bhi.n	8007336 <HAL_GPIO_Init+0x12e>
 8007262:	4a90      	ldr	r2, [pc, #576]	; (80074a4 <HAL_GPIO_Init+0x29c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d04c      	beq.n	8007302 <HAL_GPIO_Init+0xfa>
 8007268:	4a8e      	ldr	r2, [pc, #568]	; (80074a4 <HAL_GPIO_Init+0x29c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d863      	bhi.n	8007336 <HAL_GPIO_Init+0x12e>
 800726e:	4a8e      	ldr	r2, [pc, #568]	; (80074a8 <HAL_GPIO_Init+0x2a0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d046      	beq.n	8007302 <HAL_GPIO_Init+0xfa>
 8007274:	4a8c      	ldr	r2, [pc, #560]	; (80074a8 <HAL_GPIO_Init+0x2a0>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d85d      	bhi.n	8007336 <HAL_GPIO_Init+0x12e>
 800727a:	2b12      	cmp	r3, #18
 800727c:	d82a      	bhi.n	80072d4 <HAL_GPIO_Init+0xcc>
 800727e:	2b12      	cmp	r3, #18
 8007280:	d859      	bhi.n	8007336 <HAL_GPIO_Init+0x12e>
 8007282:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <HAL_GPIO_Init+0x80>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	08007303 	.word	0x08007303
 800728c:	080072dd 	.word	0x080072dd
 8007290:	080072ef 	.word	0x080072ef
 8007294:	08007331 	.word	0x08007331
 8007298:	08007337 	.word	0x08007337
 800729c:	08007337 	.word	0x08007337
 80072a0:	08007337 	.word	0x08007337
 80072a4:	08007337 	.word	0x08007337
 80072a8:	08007337 	.word	0x08007337
 80072ac:	08007337 	.word	0x08007337
 80072b0:	08007337 	.word	0x08007337
 80072b4:	08007337 	.word	0x08007337
 80072b8:	08007337 	.word	0x08007337
 80072bc:	08007337 	.word	0x08007337
 80072c0:	08007337 	.word	0x08007337
 80072c4:	08007337 	.word	0x08007337
 80072c8:	08007337 	.word	0x08007337
 80072cc:	080072e5 	.word	0x080072e5
 80072d0:	080072f9 	.word	0x080072f9
 80072d4:	4a75      	ldr	r2, [pc, #468]	; (80074ac <HAL_GPIO_Init+0x2a4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d013      	beq.n	8007302 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80072da:	e02c      	b.n	8007336 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	623b      	str	r3, [r7, #32]
          break;
 80072e2:	e029      	b.n	8007338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	3304      	adds	r3, #4
 80072ea:	623b      	str	r3, [r7, #32]
          break;
 80072ec:	e024      	b.n	8007338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	3308      	adds	r3, #8
 80072f4:	623b      	str	r3, [r7, #32]
          break;
 80072f6:	e01f      	b.n	8007338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	330c      	adds	r3, #12
 80072fe:	623b      	str	r3, [r7, #32]
          break;
 8007300:	e01a      	b.n	8007338 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d102      	bne.n	8007310 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800730a:	2304      	movs	r3, #4
 800730c:	623b      	str	r3, [r7, #32]
          break;
 800730e:	e013      	b.n	8007338 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d105      	bne.n	8007324 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007318:	2308      	movs	r3, #8
 800731a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	611a      	str	r2, [r3, #16]
          break;
 8007322:	e009      	b.n	8007338 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007324:	2308      	movs	r3, #8
 8007326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	615a      	str	r2, [r3, #20]
          break;
 800732e:	e003      	b.n	8007338 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007330:	2300      	movs	r3, #0
 8007332:	623b      	str	r3, [r7, #32]
          break;
 8007334:	e000      	b.n	8007338 <HAL_GPIO_Init+0x130>
          break;
 8007336:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	2bff      	cmp	r3, #255	; 0xff
 800733c:	d801      	bhi.n	8007342 <HAL_GPIO_Init+0x13a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	e001      	b.n	8007346 <HAL_GPIO_Init+0x13e>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3304      	adds	r3, #4
 8007346:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	2bff      	cmp	r3, #255	; 0xff
 800734c:	d802      	bhi.n	8007354 <HAL_GPIO_Init+0x14c>
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	e002      	b.n	800735a <HAL_GPIO_Init+0x152>
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	3b08      	subs	r3, #8
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	210f      	movs	r1, #15
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	fa01 f303 	lsl.w	r3, r1, r3
 8007368:	43db      	mvns	r3, r3
 800736a:	401a      	ands	r2, r3
 800736c:	6a39      	ldr	r1, [r7, #32]
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	fa01 f303 	lsl.w	r3, r1, r3
 8007374:	431a      	orrs	r2, r3
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 80c1 	beq.w	800750a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007388:	4b49      	ldr	r3, [pc, #292]	; (80074b0 <HAL_GPIO_Init+0x2a8>)
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	4a48      	ldr	r2, [pc, #288]	; (80074b0 <HAL_GPIO_Init+0x2a8>)
 800738e:	f043 0301 	orr.w	r3, r3, #1
 8007392:	6193      	str	r3, [r2, #24]
 8007394:	4b46      	ldr	r3, [pc, #280]	; (80074b0 <HAL_GPIO_Init+0x2a8>)
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	60bb      	str	r3, [r7, #8]
 800739e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80073a0:	4a44      	ldr	r2, [pc, #272]	; (80074b4 <HAL_GPIO_Init+0x2ac>)
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	089b      	lsrs	r3, r3, #2
 80073a6:	3302      	adds	r3, #2
 80073a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	f003 0303 	and.w	r3, r3, #3
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	220f      	movs	r2, #15
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	43db      	mvns	r3, r3
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	4013      	ands	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a3c      	ldr	r2, [pc, #240]	; (80074b8 <HAL_GPIO_Init+0x2b0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d01f      	beq.n	800740c <HAL_GPIO_Init+0x204>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a3b      	ldr	r2, [pc, #236]	; (80074bc <HAL_GPIO_Init+0x2b4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d019      	beq.n	8007408 <HAL_GPIO_Init+0x200>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a3a      	ldr	r2, [pc, #232]	; (80074c0 <HAL_GPIO_Init+0x2b8>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d013      	beq.n	8007404 <HAL_GPIO_Init+0x1fc>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a39      	ldr	r2, [pc, #228]	; (80074c4 <HAL_GPIO_Init+0x2bc>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d00d      	beq.n	8007400 <HAL_GPIO_Init+0x1f8>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a38      	ldr	r2, [pc, #224]	; (80074c8 <HAL_GPIO_Init+0x2c0>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d007      	beq.n	80073fc <HAL_GPIO_Init+0x1f4>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a37      	ldr	r2, [pc, #220]	; (80074cc <HAL_GPIO_Init+0x2c4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d101      	bne.n	80073f8 <HAL_GPIO_Init+0x1f0>
 80073f4:	2305      	movs	r3, #5
 80073f6:	e00a      	b.n	800740e <HAL_GPIO_Init+0x206>
 80073f8:	2306      	movs	r3, #6
 80073fa:	e008      	b.n	800740e <HAL_GPIO_Init+0x206>
 80073fc:	2304      	movs	r3, #4
 80073fe:	e006      	b.n	800740e <HAL_GPIO_Init+0x206>
 8007400:	2303      	movs	r3, #3
 8007402:	e004      	b.n	800740e <HAL_GPIO_Init+0x206>
 8007404:	2302      	movs	r3, #2
 8007406:	e002      	b.n	800740e <HAL_GPIO_Init+0x206>
 8007408:	2301      	movs	r3, #1
 800740a:	e000      	b.n	800740e <HAL_GPIO_Init+0x206>
 800740c:	2300      	movs	r3, #0
 800740e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007410:	f002 0203 	and.w	r2, r2, #3
 8007414:	0092      	lsls	r2, r2, #2
 8007416:	4093      	lsls	r3, r2
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800741e:	4925      	ldr	r1, [pc, #148]	; (80074b4 <HAL_GPIO_Init+0x2ac>)
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	089b      	lsrs	r3, r3, #2
 8007424:	3302      	adds	r3, #2
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d006      	beq.n	8007446 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007438:	4b25      	ldr	r3, [pc, #148]	; (80074d0 <HAL_GPIO_Init+0x2c8>)
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	4924      	ldr	r1, [pc, #144]	; (80074d0 <HAL_GPIO_Init+0x2c8>)
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	4313      	orrs	r3, r2
 8007442:	608b      	str	r3, [r1, #8]
 8007444:	e006      	b.n	8007454 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007446:	4b22      	ldr	r3, [pc, #136]	; (80074d0 <HAL_GPIO_Init+0x2c8>)
 8007448:	689a      	ldr	r2, [r3, #8]
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	43db      	mvns	r3, r3
 800744e:	4920      	ldr	r1, [pc, #128]	; (80074d0 <HAL_GPIO_Init+0x2c8>)
 8007450:	4013      	ands	r3, r2
 8007452:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d006      	beq.n	800746e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007460:	4b1b      	ldr	r3, [pc, #108]	; (80074d0 <HAL_GPIO_Init+0x2c8>)
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	491a      	ldr	r1, [pc, #104]	; (80074d0 <HAL_GPIO_Init+0x2c8>)
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	4313      	orrs	r3, r2
 800746a:	60cb      	str	r3, [r1, #12]
 800746c:	e006      	b.n	800747c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800746e:	4b18      	ldr	r3, [pc, #96]	; (80074d0 <HAL_GPIO_Init+0x2c8>)
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	43db      	mvns	r3, r3
 8007476:	4916      	ldr	r1, [pc, #88]	; (80074d0 <HAL_GPIO_Init+0x2c8>)
 8007478:	4013      	ands	r3, r2
 800747a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d025      	beq.n	80074d4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007488:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <HAL_GPIO_Init+0x2c8>)
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	4910      	ldr	r1, [pc, #64]	; (80074d0 <HAL_GPIO_Init+0x2c8>)
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	4313      	orrs	r3, r2
 8007492:	604b      	str	r3, [r1, #4]
 8007494:	e025      	b.n	80074e2 <HAL_GPIO_Init+0x2da>
 8007496:	bf00      	nop
 8007498:	10320000 	.word	0x10320000
 800749c:	10310000 	.word	0x10310000
 80074a0:	10220000 	.word	0x10220000
 80074a4:	10210000 	.word	0x10210000
 80074a8:	10120000 	.word	0x10120000
 80074ac:	10110000 	.word	0x10110000
 80074b0:	40021000 	.word	0x40021000
 80074b4:	40010000 	.word	0x40010000
 80074b8:	40010800 	.word	0x40010800
 80074bc:	40010c00 	.word	0x40010c00
 80074c0:	40011000 	.word	0x40011000
 80074c4:	40011400 	.word	0x40011400
 80074c8:	40011800 	.word	0x40011800
 80074cc:	40011c00 	.word	0x40011c00
 80074d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80074d4:	4b15      	ldr	r3, [pc, #84]	; (800752c <HAL_GPIO_Init+0x324>)
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	43db      	mvns	r3, r3
 80074dc:	4913      	ldr	r1, [pc, #76]	; (800752c <HAL_GPIO_Init+0x324>)
 80074de:	4013      	ands	r3, r2
 80074e0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d006      	beq.n	80074fc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80074ee:	4b0f      	ldr	r3, [pc, #60]	; (800752c <HAL_GPIO_Init+0x324>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	490e      	ldr	r1, [pc, #56]	; (800752c <HAL_GPIO_Init+0x324>)
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	600b      	str	r3, [r1, #0]
 80074fa:	e006      	b.n	800750a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80074fc:	4b0b      	ldr	r3, [pc, #44]	; (800752c <HAL_GPIO_Init+0x324>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	43db      	mvns	r3, r3
 8007504:	4909      	ldr	r1, [pc, #36]	; (800752c <HAL_GPIO_Init+0x324>)
 8007506:	4013      	ands	r3, r2
 8007508:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	3301      	adds	r3, #1
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	fa22 f303 	lsr.w	r3, r2, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	f47f ae7e 	bne.w	800721c <HAL_GPIO_Init+0x14>
  }
}
 8007520:	bf00      	nop
 8007522:	bf00      	nop
 8007524:	372c      	adds	r7, #44	; 0x2c
 8007526:	46bd      	mov	sp, r7
 8007528:	bc80      	pop	{r7}
 800752a:	4770      	bx	lr
 800752c:	40010400 	.word	0x40010400

08007530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	887b      	ldrh	r3, [r7, #2]
 8007542:	4013      	ands	r3, r2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007548:	2301      	movs	r3, #1
 800754a:	73fb      	strb	r3, [r7, #15]
 800754c:	e001      	b.n	8007552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800754e:	2300      	movs	r3, #0
 8007550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007552:	7bfb      	ldrb	r3, [r7, #15]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	bc80      	pop	{r7}
 800755c:	4770      	bx	lr

0800755e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	460b      	mov	r3, r1
 8007568:	807b      	strh	r3, [r7, #2]
 800756a:	4613      	mov	r3, r2
 800756c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800756e:	787b      	ldrb	r3, [r7, #1]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007574:	887a      	ldrh	r2, [r7, #2]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800757a:	e003      	b.n	8007584 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800757c:	887b      	ldrh	r3, [r7, #2]
 800757e:	041a      	lsls	r2, r3, #16
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	611a      	str	r2, [r3, #16]
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	bc80      	pop	{r7}
 800758c:	4770      	bx	lr

0800758e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800758e:	b480      	push	{r7}
 8007590:	b085      	sub	sp, #20
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80075a0:	887a      	ldrh	r2, [r7, #2]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4013      	ands	r3, r2
 80075a6:	041a      	lsls	r2, r3, #16
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	43d9      	mvns	r1, r3
 80075ac:	887b      	ldrh	r3, [r7, #2]
 80075ae:	400b      	ands	r3, r1
 80075b0:	431a      	orrs	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	611a      	str	r2, [r3, #16]
}
 80075b6:	bf00      	nop
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bc80      	pop	{r7}
 80075be:	4770      	bx	lr

080075c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e272      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f000 8087 	beq.w	80076ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80075e0:	4b92      	ldr	r3, [pc, #584]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f003 030c 	and.w	r3, r3, #12
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d00c      	beq.n	8007606 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80075ec:	4b8f      	ldr	r3, [pc, #572]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f003 030c 	and.w	r3, r3, #12
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d112      	bne.n	800761e <HAL_RCC_OscConfig+0x5e>
 80075f8:	4b8c      	ldr	r3, [pc, #560]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007604:	d10b      	bne.n	800761e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007606:	4b89      	ldr	r3, [pc, #548]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d06c      	beq.n	80076ec <HAL_RCC_OscConfig+0x12c>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d168      	bne.n	80076ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e24c      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007626:	d106      	bne.n	8007636 <HAL_RCC_OscConfig+0x76>
 8007628:	4b80      	ldr	r3, [pc, #512]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a7f      	ldr	r2, [pc, #508]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 800762e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	e02e      	b.n	8007694 <HAL_RCC_OscConfig+0xd4>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10c      	bne.n	8007658 <HAL_RCC_OscConfig+0x98>
 800763e:	4b7b      	ldr	r3, [pc, #492]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a7a      	ldr	r2, [pc, #488]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	4b78      	ldr	r3, [pc, #480]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a77      	ldr	r2, [pc, #476]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	e01d      	b.n	8007694 <HAL_RCC_OscConfig+0xd4>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007660:	d10c      	bne.n	800767c <HAL_RCC_OscConfig+0xbc>
 8007662:	4b72      	ldr	r3, [pc, #456]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a71      	ldr	r2, [pc, #452]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	4b6f      	ldr	r3, [pc, #444]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a6e      	ldr	r2, [pc, #440]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	e00b      	b.n	8007694 <HAL_RCC_OscConfig+0xd4>
 800767c:	4b6b      	ldr	r3, [pc, #428]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a6a      	ldr	r2, [pc, #424]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	4b68      	ldr	r3, [pc, #416]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a67      	ldr	r2, [pc, #412]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 800768e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007692:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d013      	beq.n	80076c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800769c:	f7ff fb36 	bl	8006d0c <HAL_GetTick>
 80076a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076a2:	e008      	b.n	80076b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076a4:	f7ff fb32 	bl	8006d0c <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b64      	cmp	r3, #100	; 0x64
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e200      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076b6:	4b5d      	ldr	r3, [pc, #372]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0f0      	beq.n	80076a4 <HAL_RCC_OscConfig+0xe4>
 80076c2:	e014      	b.n	80076ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076c4:	f7ff fb22 	bl	8006d0c <HAL_GetTick>
 80076c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076ca:	e008      	b.n	80076de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076cc:	f7ff fb1e 	bl	8006d0c <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b64      	cmp	r3, #100	; 0x64
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e1ec      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076de:	4b53      	ldr	r3, [pc, #332]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f0      	bne.n	80076cc <HAL_RCC_OscConfig+0x10c>
 80076ea:	e000      	b.n	80076ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d063      	beq.n	80077c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80076fa:	4b4c      	ldr	r3, [pc, #304]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f003 030c 	and.w	r3, r3, #12
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007706:	4b49      	ldr	r3, [pc, #292]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f003 030c 	and.w	r3, r3, #12
 800770e:	2b08      	cmp	r3, #8
 8007710:	d11c      	bne.n	800774c <HAL_RCC_OscConfig+0x18c>
 8007712:	4b46      	ldr	r3, [pc, #280]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d116      	bne.n	800774c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800771e:	4b43      	ldr	r3, [pc, #268]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <HAL_RCC_OscConfig+0x176>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d001      	beq.n	8007736 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e1c0      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007736:	4b3d      	ldr	r3, [pc, #244]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	4939      	ldr	r1, [pc, #228]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007746:	4313      	orrs	r3, r2
 8007748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800774a:	e03a      	b.n	80077c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d020      	beq.n	8007796 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007754:	4b36      	ldr	r3, [pc, #216]	; (8007830 <HAL_RCC_OscConfig+0x270>)
 8007756:	2201      	movs	r2, #1
 8007758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800775a:	f7ff fad7 	bl	8006d0c <HAL_GetTick>
 800775e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007760:	e008      	b.n	8007774 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007762:	f7ff fad3 	bl	8006d0c <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d901      	bls.n	8007774 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e1a1      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007774:	4b2d      	ldr	r3, [pc, #180]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0f0      	beq.n	8007762 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007780:	4b2a      	ldr	r3, [pc, #168]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	4927      	ldr	r1, [pc, #156]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 8007790:	4313      	orrs	r3, r2
 8007792:	600b      	str	r3, [r1, #0]
 8007794:	e015      	b.n	80077c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007796:	4b26      	ldr	r3, [pc, #152]	; (8007830 <HAL_RCC_OscConfig+0x270>)
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800779c:	f7ff fab6 	bl	8006d0c <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077a2:	e008      	b.n	80077b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077a4:	f7ff fab2 	bl	8006d0c <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e180      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077b6:	4b1d      	ldr	r3, [pc, #116]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f0      	bne.n	80077a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d03a      	beq.n	8007844 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d019      	beq.n	800780a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077d6:	4b17      	ldr	r3, [pc, #92]	; (8007834 <HAL_RCC_OscConfig+0x274>)
 80077d8:	2201      	movs	r2, #1
 80077da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077dc:	f7ff fa96 	bl	8006d0c <HAL_GetTick>
 80077e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077e4:	f7ff fa92 	bl	8006d0c <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e160      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077f6:	4b0d      	ldr	r3, [pc, #52]	; (800782c <HAL_RCC_OscConfig+0x26c>)
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0f0      	beq.n	80077e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007802:	2001      	movs	r0, #1
 8007804:	f000 face 	bl	8007da4 <RCC_Delay>
 8007808:	e01c      	b.n	8007844 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800780a:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <HAL_RCC_OscConfig+0x274>)
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007810:	f7ff fa7c 	bl	8006d0c <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007816:	e00f      	b.n	8007838 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007818:	f7ff fa78 	bl	8006d0c <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d908      	bls.n	8007838 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e146      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
 800782a:	bf00      	nop
 800782c:	40021000 	.word	0x40021000
 8007830:	42420000 	.word	0x42420000
 8007834:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007838:	4b92      	ldr	r3, [pc, #584]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e9      	bne.n	8007818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 80a6 	beq.w	800799e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007852:	2300      	movs	r3, #0
 8007854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007856:	4b8b      	ldr	r3, [pc, #556]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10d      	bne.n	800787e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007862:	4b88      	ldr	r3, [pc, #544]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	4a87      	ldr	r2, [pc, #540]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800786c:	61d3      	str	r3, [r2, #28]
 800786e:	4b85      	ldr	r3, [pc, #532]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007876:	60bb      	str	r3, [r7, #8]
 8007878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800787a:	2301      	movs	r3, #1
 800787c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800787e:	4b82      	ldr	r3, [pc, #520]	; (8007a88 <HAL_RCC_OscConfig+0x4c8>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007886:	2b00      	cmp	r3, #0
 8007888:	d118      	bne.n	80078bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800788a:	4b7f      	ldr	r3, [pc, #508]	; (8007a88 <HAL_RCC_OscConfig+0x4c8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a7e      	ldr	r2, [pc, #504]	; (8007a88 <HAL_RCC_OscConfig+0x4c8>)
 8007890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007896:	f7ff fa39 	bl	8006d0c <HAL_GetTick>
 800789a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800789c:	e008      	b.n	80078b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800789e:	f7ff fa35 	bl	8006d0c <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b64      	cmp	r3, #100	; 0x64
 80078aa:	d901      	bls.n	80078b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e103      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b0:	4b75      	ldr	r3, [pc, #468]	; (8007a88 <HAL_RCC_OscConfig+0x4c8>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0f0      	beq.n	800789e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d106      	bne.n	80078d2 <HAL_RCC_OscConfig+0x312>
 80078c4:	4b6f      	ldr	r3, [pc, #444]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	4a6e      	ldr	r2, [pc, #440]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 80078ca:	f043 0301 	orr.w	r3, r3, #1
 80078ce:	6213      	str	r3, [r2, #32]
 80078d0:	e02d      	b.n	800792e <HAL_RCC_OscConfig+0x36e>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10c      	bne.n	80078f4 <HAL_RCC_OscConfig+0x334>
 80078da:	4b6a      	ldr	r3, [pc, #424]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	4a69      	ldr	r2, [pc, #420]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 80078e0:	f023 0301 	bic.w	r3, r3, #1
 80078e4:	6213      	str	r3, [r2, #32]
 80078e6:	4b67      	ldr	r3, [pc, #412]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	4a66      	ldr	r2, [pc, #408]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 80078ec:	f023 0304 	bic.w	r3, r3, #4
 80078f0:	6213      	str	r3, [r2, #32]
 80078f2:	e01c      	b.n	800792e <HAL_RCC_OscConfig+0x36e>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	2b05      	cmp	r3, #5
 80078fa:	d10c      	bne.n	8007916 <HAL_RCC_OscConfig+0x356>
 80078fc:	4b61      	ldr	r3, [pc, #388]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	4a60      	ldr	r2, [pc, #384]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007902:	f043 0304 	orr.w	r3, r3, #4
 8007906:	6213      	str	r3, [r2, #32]
 8007908:	4b5e      	ldr	r3, [pc, #376]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	4a5d      	ldr	r2, [pc, #372]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 800790e:	f043 0301 	orr.w	r3, r3, #1
 8007912:	6213      	str	r3, [r2, #32]
 8007914:	e00b      	b.n	800792e <HAL_RCC_OscConfig+0x36e>
 8007916:	4b5b      	ldr	r3, [pc, #364]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	4a5a      	ldr	r2, [pc, #360]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 800791c:	f023 0301 	bic.w	r3, r3, #1
 8007920:	6213      	str	r3, [r2, #32]
 8007922:	4b58      	ldr	r3, [pc, #352]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	4a57      	ldr	r2, [pc, #348]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007928:	f023 0304 	bic.w	r3, r3, #4
 800792c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d015      	beq.n	8007962 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007936:	f7ff f9e9 	bl	8006d0c <HAL_GetTick>
 800793a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800793c:	e00a      	b.n	8007954 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800793e:	f7ff f9e5 	bl	8006d0c <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	f241 3288 	movw	r2, #5000	; 0x1388
 800794c:	4293      	cmp	r3, r2
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e0b1      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007954:	4b4b      	ldr	r3, [pc, #300]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0ee      	beq.n	800793e <HAL_RCC_OscConfig+0x37e>
 8007960:	e014      	b.n	800798c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007962:	f7ff f9d3 	bl	8006d0c <HAL_GetTick>
 8007966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007968:	e00a      	b.n	8007980 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800796a:	f7ff f9cf 	bl	8006d0c <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	f241 3288 	movw	r2, #5000	; 0x1388
 8007978:	4293      	cmp	r3, r2
 800797a:	d901      	bls.n	8007980 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e09b      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007980:	4b40      	ldr	r3, [pc, #256]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1ee      	bne.n	800796a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800798c:	7dfb      	ldrb	r3, [r7, #23]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d105      	bne.n	800799e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007992:	4b3c      	ldr	r3, [pc, #240]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	4a3b      	ldr	r2, [pc, #236]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800799c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 8087 	beq.w	8007ab6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079a8:	4b36      	ldr	r3, [pc, #216]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f003 030c 	and.w	r3, r3, #12
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d061      	beq.n	8007a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d146      	bne.n	8007a4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079bc:	4b33      	ldr	r3, [pc, #204]	; (8007a8c <HAL_RCC_OscConfig+0x4cc>)
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079c2:	f7ff f9a3 	bl	8006d0c <HAL_GetTick>
 80079c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079c8:	e008      	b.n	80079dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079ca:	f7ff f99f 	bl	8006d0c <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d901      	bls.n	80079dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e06d      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079dc:	4b29      	ldr	r3, [pc, #164]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1f0      	bne.n	80079ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f0:	d108      	bne.n	8007a04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80079f2:	4b24      	ldr	r3, [pc, #144]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	4921      	ldr	r1, [pc, #132]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a04:	4b1f      	ldr	r3, [pc, #124]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a19      	ldr	r1, [r3, #32]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	430b      	orrs	r3, r1
 8007a16:	491b      	ldr	r1, [pc, #108]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a1c:	4b1b      	ldr	r3, [pc, #108]	; (8007a8c <HAL_RCC_OscConfig+0x4cc>)
 8007a1e:	2201      	movs	r2, #1
 8007a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a22:	f7ff f973 	bl	8006d0c <HAL_GetTick>
 8007a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a28:	e008      	b.n	8007a3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a2a:	f7ff f96f 	bl	8006d0c <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d901      	bls.n	8007a3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e03d      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a3c:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0f0      	beq.n	8007a2a <HAL_RCC_OscConfig+0x46a>
 8007a48:	e035      	b.n	8007ab6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a4a:	4b10      	ldr	r3, [pc, #64]	; (8007a8c <HAL_RCC_OscConfig+0x4cc>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a50:	f7ff f95c 	bl	8006d0c <HAL_GetTick>
 8007a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a56:	e008      	b.n	8007a6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a58:	f7ff f958 	bl	8006d0c <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e026      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a6a:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <HAL_RCC_OscConfig+0x4c4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1f0      	bne.n	8007a58 <HAL_RCC_OscConfig+0x498>
 8007a76:	e01e      	b.n	8007ab6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d107      	bne.n	8007a90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e019      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
 8007a84:	40021000 	.word	0x40021000
 8007a88:	40007000 	.word	0x40007000
 8007a8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007a90:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <HAL_RCC_OscConfig+0x500>)
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d106      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d001      	beq.n	8007ab6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e000      	b.n	8007ab8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	40021000 	.word	0x40021000

08007ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e0d0      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ad8:	4b6a      	ldr	r3, [pc, #424]	; (8007c84 <HAL_RCC_ClockConfig+0x1c0>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0307 	and.w	r3, r3, #7
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d910      	bls.n	8007b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ae6:	4b67      	ldr	r3, [pc, #412]	; (8007c84 <HAL_RCC_ClockConfig+0x1c0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f023 0207 	bic.w	r2, r3, #7
 8007aee:	4965      	ldr	r1, [pc, #404]	; (8007c84 <HAL_RCC_ClockConfig+0x1c0>)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007af6:	4b63      	ldr	r3, [pc, #396]	; (8007c84 <HAL_RCC_ClockConfig+0x1c0>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0307 	and.w	r3, r3, #7
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d001      	beq.n	8007b08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e0b8      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d020      	beq.n	8007b56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d005      	beq.n	8007b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b20:	4b59      	ldr	r3, [pc, #356]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	4a58      	ldr	r2, [pc, #352]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0308 	and.w	r3, r3, #8
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b38:	4b53      	ldr	r3, [pc, #332]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	4a52      	ldr	r2, [pc, #328]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007b42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b44:	4b50      	ldr	r3, [pc, #320]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	494d      	ldr	r1, [pc, #308]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d040      	beq.n	8007be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d107      	bne.n	8007b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b6a:	4b47      	ldr	r3, [pc, #284]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d115      	bne.n	8007ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e07f      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d107      	bne.n	8007b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b82:	4b41      	ldr	r3, [pc, #260]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d109      	bne.n	8007ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e073      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b92:	4b3d      	ldr	r3, [pc, #244]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e06b      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ba2:	4b39      	ldr	r3, [pc, #228]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f023 0203 	bic.w	r2, r3, #3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	4936      	ldr	r1, [pc, #216]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bb4:	f7ff f8aa 	bl	8006d0c <HAL_GetTick>
 8007bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bba:	e00a      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bbc:	f7ff f8a6 	bl	8006d0c <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d901      	bls.n	8007bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e053      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bd2:	4b2d      	ldr	r3, [pc, #180]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f003 020c 	and.w	r2, r3, #12
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d1eb      	bne.n	8007bbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007be4:	4b27      	ldr	r3, [pc, #156]	; (8007c84 <HAL_RCC_ClockConfig+0x1c0>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d210      	bcs.n	8007c14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bf2:	4b24      	ldr	r3, [pc, #144]	; (8007c84 <HAL_RCC_ClockConfig+0x1c0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f023 0207 	bic.w	r2, r3, #7
 8007bfa:	4922      	ldr	r1, [pc, #136]	; (8007c84 <HAL_RCC_ClockConfig+0x1c0>)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c02:	4b20      	ldr	r3, [pc, #128]	; (8007c84 <HAL_RCC_ClockConfig+0x1c0>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d001      	beq.n	8007c14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e032      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0304 	and.w	r3, r3, #4
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d008      	beq.n	8007c32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c20:	4b19      	ldr	r3, [pc, #100]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	4916      	ldr	r1, [pc, #88]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0308 	and.w	r3, r3, #8
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d009      	beq.n	8007c52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c3e:	4b12      	ldr	r3, [pc, #72]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	490e      	ldr	r1, [pc, #56]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c52:	f000 f821 	bl	8007c98 <HAL_RCC_GetSysClockFreq>
 8007c56:	4602      	mov	r2, r0
 8007c58:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <HAL_RCC_ClockConfig+0x1c4>)
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	091b      	lsrs	r3, r3, #4
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	490a      	ldr	r1, [pc, #40]	; (8007c8c <HAL_RCC_ClockConfig+0x1c8>)
 8007c64:	5ccb      	ldrb	r3, [r1, r3]
 8007c66:	fa22 f303 	lsr.w	r3, r2, r3
 8007c6a:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <HAL_RCC_ClockConfig+0x1cc>)
 8007c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c6e:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <HAL_RCC_ClockConfig+0x1d0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff f808 	bl	8006c88 <HAL_InitTick>

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	40022000 	.word	0x40022000
 8007c88:	40021000 	.word	0x40021000
 8007c8c:	0800a3d8 	.word	0x0800a3d8
 8007c90:	20000004 	.word	0x20000004
 8007c94:	20000008 	.word	0x20000008

08007c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60fb      	str	r3, [r7, #12]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60bb      	str	r3, [r7, #8]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	617b      	str	r3, [r7, #20]
 8007caa:	2300      	movs	r3, #0
 8007cac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007cb2:	4b1e      	ldr	r3, [pc, #120]	; (8007d2c <HAL_RCC_GetSysClockFreq+0x94>)
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f003 030c 	and.w	r3, r3, #12
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	d002      	beq.n	8007cc8 <HAL_RCC_GetSysClockFreq+0x30>
 8007cc2:	2b08      	cmp	r3, #8
 8007cc4:	d003      	beq.n	8007cce <HAL_RCC_GetSysClockFreq+0x36>
 8007cc6:	e027      	b.n	8007d18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007cc8:	4b19      	ldr	r3, [pc, #100]	; (8007d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8007cca:	613b      	str	r3, [r7, #16]
      break;
 8007ccc:	e027      	b.n	8007d1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	0c9b      	lsrs	r3, r3, #18
 8007cd2:	f003 030f 	and.w	r3, r3, #15
 8007cd6:	4a17      	ldr	r2, [pc, #92]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007cd8:	5cd3      	ldrb	r3, [r2, r3]
 8007cda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d010      	beq.n	8007d08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007ce6:	4b11      	ldr	r3, [pc, #68]	; (8007d2c <HAL_RCC_GetSysClockFreq+0x94>)
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	0c5b      	lsrs	r3, r3, #17
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	4a11      	ldr	r2, [pc, #68]	; (8007d38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007cf2:	5cd3      	ldrb	r3, [r2, r3]
 8007cf4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a0d      	ldr	r2, [pc, #52]	; (8007d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8007cfa:	fb03 f202 	mul.w	r2, r3, r2
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	e004      	b.n	8007d12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a0c      	ldr	r2, [pc, #48]	; (8007d3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8007d0c:	fb02 f303 	mul.w	r3, r2, r3
 8007d10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	613b      	str	r3, [r7, #16]
      break;
 8007d16:	e002      	b.n	8007d1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007d18:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8007d1a:	613b      	str	r3, [r7, #16]
      break;
 8007d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d1e:	693b      	ldr	r3, [r7, #16]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	371c      	adds	r7, #28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bc80      	pop	{r7}
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	40021000 	.word	0x40021000
 8007d30:	007a1200 	.word	0x007a1200
 8007d34:	0800a3f0 	.word	0x0800a3f0
 8007d38:	0800a400 	.word	0x0800a400
 8007d3c:	003d0900 	.word	0x003d0900

08007d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d44:	4b02      	ldr	r3, [pc, #8]	; (8007d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8007d46:	681b      	ldr	r3, [r3, #0]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr
 8007d50:	20000004 	.word	0x20000004

08007d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d58:	f7ff fff2 	bl	8007d40 <HAL_RCC_GetHCLKFreq>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	0a1b      	lsrs	r3, r3, #8
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	4903      	ldr	r1, [pc, #12]	; (8007d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d6a:	5ccb      	ldrb	r3, [r1, r3]
 8007d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	40021000 	.word	0x40021000
 8007d78:	0800a3e8 	.word	0x0800a3e8

08007d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d80:	f7ff ffde 	bl	8007d40 <HAL_RCC_GetHCLKFreq>
 8007d84:	4602      	mov	r2, r0
 8007d86:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	0adb      	lsrs	r3, r3, #11
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	4903      	ldr	r1, [pc, #12]	; (8007da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d92:	5ccb      	ldrb	r3, [r1, r3]
 8007d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	40021000 	.word	0x40021000
 8007da0:	0800a3e8 	.word	0x0800a3e8

08007da4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007dac:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <RCC_Delay+0x34>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a0a      	ldr	r2, [pc, #40]	; (8007ddc <RCC_Delay+0x38>)
 8007db2:	fba2 2303 	umull	r2, r3, r2, r3
 8007db6:	0a5b      	lsrs	r3, r3, #9
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	fb02 f303 	mul.w	r3, r2, r3
 8007dbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007dc0:	bf00      	nop
  }
  while (Delay --);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1e5a      	subs	r2, r3, #1
 8007dc6:	60fa      	str	r2, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1f9      	bne.n	8007dc0 <RCC_Delay+0x1c>
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr
 8007dd8:	20000004 	.word	0x20000004
 8007ddc:	10624dd3 	.word	0x10624dd3

08007de0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e042      	b.n	8007e78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d106      	bne.n	8007e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7fe feae 	bl	8006b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2224      	movs	r2, #36	; 0x24
 8007e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fdc5 	bl	80089b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	691a      	ldr	r2, [r3, #16]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	695a      	ldr	r2, [r3, #20]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68da      	ldr	r2, [r3, #12]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08a      	sub	sp, #40	; 0x28
 8007e84:	af02      	add	r7, sp, #8
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b20      	cmp	r3, #32
 8007e9e:	d16d      	bne.n	8007f7c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d002      	beq.n	8007eac <HAL_UART_Transmit+0x2c>
 8007ea6:	88fb      	ldrh	r3, [r7, #6]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e066      	b.n	8007f7e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2221      	movs	r2, #33	; 0x21
 8007eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ebe:	f7fe ff25 	bl	8006d0c <HAL_GetTick>
 8007ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	88fa      	ldrh	r2, [r7, #6]
 8007ec8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	88fa      	ldrh	r2, [r7, #6]
 8007ece:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ed8:	d108      	bne.n	8007eec <HAL_UART_Transmit+0x6c>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d104      	bne.n	8007eec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	61bb      	str	r3, [r7, #24]
 8007eea:	e003      	b.n	8007ef4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ef4:	e02a      	b.n	8007f4c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2200      	movs	r2, #0
 8007efe:	2180      	movs	r1, #128	; 0x80
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 fb14 	bl	800852e <UART_WaitOnFlagUntilTimeout>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e036      	b.n	8007f7e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10b      	bne.n	8007f2e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	3302      	adds	r3, #2
 8007f2a:	61bb      	str	r3, [r7, #24]
 8007f2c:	e007      	b.n	8007f3e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	781a      	ldrb	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	3b01      	subs	r3, #1
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1cf      	bne.n	8007ef6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2140      	movs	r1, #64	; 0x40
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 fae4 	bl	800852e <UART_WaitOnFlagUntilTimeout>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e006      	b.n	8007f7e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e000      	b.n	8007f7e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007f7c:	2302      	movs	r3, #2
  }
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3720      	adds	r7, #32
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	4613      	mov	r3, r2
 8007f92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b20      	cmp	r3, #32
 8007f9e:	d112      	bne.n	8007fc6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <HAL_UART_Receive_IT+0x26>
 8007fa6:	88fb      	ldrh	r3, [r7, #6]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e00b      	b.n	8007fc8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fb6:	88fb      	ldrh	r3, [r7, #6]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	68b9      	ldr	r1, [r7, #8]
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 fb24 	bl	800860a <UART_Start_Receive_IT>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	e000      	b.n	8007fc8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007fc6:	2302      	movs	r3, #2
  }
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b0ba      	sub	sp, #232	; 0xe8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008006:	f003 030f 	and.w	r3, r3, #15
 800800a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800800e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10f      	bne.n	8008036 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d009      	beq.n	8008036 <HAL_UART_IRQHandler+0x66>
 8008022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fc01 	bl	8008836 <UART_Receive_IT>
      return;
 8008034:	e25b      	b.n	80084ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008036:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 80de 	beq.w	80081fc <HAL_UART_IRQHandler+0x22c>
 8008040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d106      	bne.n	800805a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800804c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008050:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 80d1 	beq.w	80081fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800805a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00b      	beq.n	800807e <HAL_UART_IRQHandler+0xae>
 8008066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008076:	f043 0201 	orr.w	r2, r3, #1
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800807e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008082:	f003 0304 	and.w	r3, r3, #4
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00b      	beq.n	80080a2 <HAL_UART_IRQHandler+0xd2>
 800808a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d005      	beq.n	80080a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809a:	f043 0202 	orr.w	r2, r3, #2
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00b      	beq.n	80080c6 <HAL_UART_IRQHandler+0xf6>
 80080ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d005      	beq.n	80080c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080be:	f043 0204 	orr.w	r2, r3, #4
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80080c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d011      	beq.n	80080f6 <HAL_UART_IRQHandler+0x126>
 80080d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080d6:	f003 0320 	and.w	r3, r3, #32
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d105      	bne.n	80080ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80080de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ee:	f043 0208 	orr.w	r2, r3, #8
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 81f2 	beq.w	80084e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008104:	f003 0320 	and.w	r3, r3, #32
 8008108:	2b00      	cmp	r3, #0
 800810a:	d008      	beq.n	800811e <HAL_UART_IRQHandler+0x14e>
 800810c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008110:	f003 0320 	and.w	r3, r3, #32
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fb8c 	bl	8008836 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008128:	2b00      	cmp	r3, #0
 800812a:	bf14      	ite	ne
 800812c:	2301      	movne	r3, #1
 800812e:	2300      	moveq	r3, #0
 8008130:	b2db      	uxtb	r3, r3
 8008132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800813a:	f003 0308 	and.w	r3, r3, #8
 800813e:	2b00      	cmp	r3, #0
 8008140:	d103      	bne.n	800814a <HAL_UART_IRQHandler+0x17a>
 8008142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008146:	2b00      	cmp	r3, #0
 8008148:	d04f      	beq.n	80081ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa96 	bl	800867c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	d041      	beq.n	80081e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3314      	adds	r3, #20
 8008164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800817c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3314      	adds	r3, #20
 8008186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800818a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800818e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80081a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1d9      	bne.n	800815e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d013      	beq.n	80081da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b6:	4a7e      	ldr	r2, [pc, #504]	; (80083b0 <HAL_UART_IRQHandler+0x3e0>)
 80081b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe ff1a 	bl	8006ff8 <HAL_DMA_Abort_IT>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d016      	beq.n	80081f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d8:	e00e      	b.n	80081f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f993 	bl	8008506 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e0:	e00a      	b.n	80081f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f98f 	bl	8008506 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e8:	e006      	b.n	80081f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f98b 	bl	8008506 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80081f6:	e175      	b.n	80084e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f8:	bf00      	nop
    return;
 80081fa:	e173      	b.n	80084e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008200:	2b01      	cmp	r3, #1
 8008202:	f040 814f 	bne.w	80084a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800820a:	f003 0310 	and.w	r3, r3, #16
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 8148 	beq.w	80084a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8141 	beq.w	80084a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008222:	2300      	movs	r3, #0
 8008224:	60bb      	str	r3, [r7, #8]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	60bb      	str	r3, [r7, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	60bb      	str	r3, [r7, #8]
 8008236:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 80b6 	beq.w	80083b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008254:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 8145 	beq.w	80084e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008266:	429a      	cmp	r2, r3
 8008268:	f080 813e 	bcs.w	80084e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008272:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	2b20      	cmp	r3, #32
 800827c:	f000 8088 	beq.w	8008390 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	330c      	adds	r3, #12
 8008286:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008296:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800829a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800829e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	330c      	adds	r3, #12
 80082a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80082ac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80082c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1d9      	bne.n	8008280 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3314      	adds	r3, #20
 80082d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082d6:	e853 3f00 	ldrex	r3, [r3]
 80082da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082de:	f023 0301 	bic.w	r3, r3, #1
 80082e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3314      	adds	r3, #20
 80082ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e1      	bne.n	80082cc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3314      	adds	r3, #20
 800830e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800831a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800831e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3314      	adds	r3, #20
 8008328:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800832c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800832e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008330:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008332:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008334:	e841 2300 	strex	r3, r2, [r1]
 8008338:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800833a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e3      	bne.n	8008308 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	330c      	adds	r3, #12
 8008354:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008358:	e853 3f00 	ldrex	r3, [r3]
 800835c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800835e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008360:	f023 0310 	bic.w	r3, r3, #16
 8008364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	330c      	adds	r3, #12
 800836e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008372:	65ba      	str	r2, [r7, #88]	; 0x58
 8008374:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008378:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e3      	bne.n	800834e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fdf9 	bl	8006f82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800839e:	b29b      	uxth	r3, r3
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f8b6 	bl	8008518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083ac:	e09c      	b.n	80084e8 <HAL_UART_IRQHandler+0x518>
 80083ae:	bf00      	nop
 80083b0:	08008741 	.word	0x08008741
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083bc:	b29b      	uxth	r3, r3
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 808e 	beq.w	80084ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80083d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 8089 	beq.w	80084ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	330c      	adds	r3, #12
 80083e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	330c      	adds	r3, #12
 80083fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80083fe:	647a      	str	r2, [r7, #68]	; 0x44
 8008400:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800840c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e3      	bne.n	80083da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3314      	adds	r3, #20
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	623b      	str	r3, [r7, #32]
   return(result);
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	f023 0301 	bic.w	r3, r3, #1
 8008428:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3314      	adds	r3, #20
 8008432:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008436:	633a      	str	r2, [r7, #48]	; 0x30
 8008438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800843c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e3      	bne.n	8008412 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2220      	movs	r2, #32
 800844e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	330c      	adds	r3, #12
 800845e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	e853 3f00 	ldrex	r3, [r3]
 8008466:	60fb      	str	r3, [r7, #12]
   return(result);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f023 0310 	bic.w	r3, r3, #16
 800846e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	330c      	adds	r3, #12
 8008478:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800847c:	61fa      	str	r2, [r7, #28]
 800847e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	69b9      	ldr	r1, [r7, #24]
 8008482:	69fa      	ldr	r2, [r7, #28]
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	617b      	str	r3, [r7, #20]
   return(result);
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e3      	bne.n	8008458 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008496:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f83b 	bl	8008518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084a2:	e023      	b.n	80084ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d009      	beq.n	80084c4 <HAL_UART_IRQHandler+0x4f4>
 80084b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f953 	bl	8008768 <UART_Transmit_IT>
    return;
 80084c2:	e014      	b.n	80084ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00e      	beq.n	80084ee <HAL_UART_IRQHandler+0x51e>
 80084d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d008      	beq.n	80084ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f992 	bl	8008806 <UART_EndTransmit_IT>
    return;
 80084e2:	e004      	b.n	80084ee <HAL_UART_IRQHandler+0x51e>
    return;
 80084e4:	bf00      	nop
 80084e6:	e002      	b.n	80084ee <HAL_UART_IRQHandler+0x51e>
      return;
 80084e8:	bf00      	nop
 80084ea:	e000      	b.n	80084ee <HAL_UART_IRQHandler+0x51e>
      return;
 80084ec:	bf00      	nop
  }
}
 80084ee:	37e8      	adds	r7, #232	; 0xe8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	bc80      	pop	{r7}
 8008504:	4770      	bx	lr

08008506 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	bc80      	pop	{r7}
 8008516:	4770      	bx	lr

08008518 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	bc80      	pop	{r7}
 800852c:	4770      	bx	lr

0800852e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b090      	sub	sp, #64	; 0x40
 8008532:	af00      	add	r7, sp, #0
 8008534:	60f8      	str	r0, [r7, #12]
 8008536:	60b9      	str	r1, [r7, #8]
 8008538:	603b      	str	r3, [r7, #0]
 800853a:	4613      	mov	r3, r2
 800853c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800853e:	e050      	b.n	80085e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008546:	d04c      	beq.n	80085e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800854a:	2b00      	cmp	r3, #0
 800854c:	d007      	beq.n	800855e <UART_WaitOnFlagUntilTimeout+0x30>
 800854e:	f7fe fbdd 	bl	8006d0c <HAL_GetTick>
 8008552:	4602      	mov	r2, r0
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800855a:	429a      	cmp	r2, r3
 800855c:	d241      	bcs.n	80085e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	330c      	adds	r3, #12
 8008564:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	330c      	adds	r3, #12
 800857c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800857e:	637a      	str	r2, [r7, #52]	; 0x34
 8008580:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e5      	bne.n	800855e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3314      	adds	r3, #20
 8008598:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	613b      	str	r3, [r7, #16]
   return(result);
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3314      	adds	r3, #20
 80085b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b2:	623a      	str	r2, [r7, #32]
 80085b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	69f9      	ldr	r1, [r7, #28]
 80085b8:	6a3a      	ldr	r2, [r7, #32]
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	61bb      	str	r3, [r7, #24]
   return(result);
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e5      	bne.n	8008592 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e00f      	b.n	8008602 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	4013      	ands	r3, r2
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	bf0c      	ite	eq
 80085f2:	2301      	moveq	r3, #1
 80085f4:	2300      	movne	r3, #0
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	461a      	mov	r2, r3
 80085fa:	79fb      	ldrb	r3, [r7, #7]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d09f      	beq.n	8008540 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3740      	adds	r7, #64	; 0x40
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800860a:	b480      	push	{r7}
 800860c:	b085      	sub	sp, #20
 800860e:	af00      	add	r7, sp, #0
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	4613      	mov	r3, r2
 8008616:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	88fa      	ldrh	r2, [r7, #6]
 8008622:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	88fa      	ldrh	r2, [r7, #6]
 8008628:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2222      	movs	r2, #34	; 0x22
 8008634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d007      	beq.n	8008650 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68da      	ldr	r2, [r3, #12]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800864e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	695a      	ldr	r2, [r3, #20]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0201 	orr.w	r2, r2, #1
 800865e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0220 	orr.w	r2, r2, #32
 800866e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr

0800867c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800867c:	b480      	push	{r7}
 800867e:	b095      	sub	sp, #84	; 0x54
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	330c      	adds	r3, #12
 800868a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800869a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	330c      	adds	r3, #12
 80086a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086a4:	643a      	str	r2, [r7, #64]	; 0x40
 80086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e5      	bne.n	8008684 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3314      	adds	r3, #20
 80086be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	f023 0301 	bic.w	r3, r3, #1
 80086ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3314      	adds	r3, #20
 80086d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e5      	bne.n	80086b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d119      	bne.n	8008728 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	330c      	adds	r3, #12
 80086fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	e853 3f00 	ldrex	r3, [r3]
 8008702:	60bb      	str	r3, [r7, #8]
   return(result);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f023 0310 	bic.w	r3, r3, #16
 800870a:	647b      	str	r3, [r7, #68]	; 0x44
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	330c      	adds	r3, #12
 8008712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008714:	61ba      	str	r2, [r7, #24]
 8008716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008718:	6979      	ldr	r1, [r7, #20]
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	e841 2300 	strex	r3, r2, [r1]
 8008720:	613b      	str	r3, [r7, #16]
   return(result);
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1e5      	bne.n	80086f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2220      	movs	r2, #32
 800872c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008736:	bf00      	nop
 8008738:	3754      	adds	r7, #84	; 0x54
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr

08008740 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f7ff fed3 	bl	8008506 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008760:	bf00      	nop
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b21      	cmp	r3, #33	; 0x21
 800877a:	d13e      	bne.n	80087fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008784:	d114      	bne.n	80087b0 <UART_Transmit_IT+0x48>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d110      	bne.n	80087b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	461a      	mov	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	1c9a      	adds	r2, r3, #2
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	621a      	str	r2, [r3, #32]
 80087ae:	e008      	b.n	80087c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	1c59      	adds	r1, r3, #1
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	6211      	str	r1, [r2, #32]
 80087ba:	781a      	ldrb	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	3b01      	subs	r3, #1
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	4619      	mov	r1, r3
 80087d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10f      	bne.n	80087f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68da      	ldr	r2, [r3, #12]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68da      	ldr	r2, [r3, #12]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	e000      	b.n	80087fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80087fa:	2302      	movs	r3, #2
  }
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	bc80      	pop	{r7}
 8008804:	4770      	bx	lr

08008806 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68da      	ldr	r2, [r3, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800881c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2220      	movs	r2, #32
 8008822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff fe64 	bl	80084f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b08c      	sub	sp, #48	; 0x30
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b22      	cmp	r3, #34	; 0x22
 8008848:	f040 80ae 	bne.w	80089a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008854:	d117      	bne.n	8008886 <UART_Receive_IT+0x50>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d113      	bne.n	8008886 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800885e:	2300      	movs	r3, #0
 8008860:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	b29b      	uxth	r3, r3
 8008870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008874:	b29a      	uxth	r2, r3
 8008876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008878:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887e:	1c9a      	adds	r2, r3, #2
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	629a      	str	r2, [r3, #40]	; 0x28
 8008884:	e026      	b.n	80088d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800888c:	2300      	movs	r3, #0
 800888e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008898:	d007      	beq.n	80088aa <UART_Receive_IT+0x74>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10a      	bne.n	80088b8 <UART_Receive_IT+0x82>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d106      	bne.n	80088b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b4:	701a      	strb	r2, [r3, #0]
 80088b6:	e008      	b.n	80088ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088d8:	b29b      	uxth	r3, r3
 80088da:	3b01      	subs	r3, #1
 80088dc:	b29b      	uxth	r3, r3
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	4619      	mov	r1, r3
 80088e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d15d      	bne.n	80089a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 0220 	bic.w	r2, r2, #32
 80088f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008906:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	695a      	ldr	r2, [r3, #20]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0201 	bic.w	r2, r2, #1
 8008916:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892a:	2b01      	cmp	r3, #1
 800892c:	d135      	bne.n	800899a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	330c      	adds	r3, #12
 800893a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	613b      	str	r3, [r7, #16]
   return(result);
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f023 0310 	bic.w	r3, r3, #16
 800894a:	627b      	str	r3, [r7, #36]	; 0x24
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	330c      	adds	r3, #12
 8008952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008954:	623a      	str	r2, [r7, #32]
 8008956:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	69f9      	ldr	r1, [r7, #28]
 800895a:	6a3a      	ldr	r2, [r7, #32]
 800895c:	e841 2300 	strex	r3, r2, [r1]
 8008960:	61bb      	str	r3, [r7, #24]
   return(result);
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e5      	bne.n	8008934 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0310 	and.w	r3, r3, #16
 8008972:	2b10      	cmp	r3, #16
 8008974:	d10a      	bne.n	800898c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008976:	2300      	movs	r3, #0
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7ff fdc0 	bl	8008518 <HAL_UARTEx_RxEventCallback>
 8008998:	e002      	b.n	80089a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7fe f88a 	bl	8006ab4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	e002      	b.n	80089aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	e000      	b.n	80089aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80089a8:	2302      	movs	r3, #2
  }
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3730      	adds	r7, #48	; 0x30
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	689a      	ldr	r2, [r3, #8]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	431a      	orrs	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80089ee:	f023 030c 	bic.w	r3, r3, #12
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	6812      	ldr	r2, [r2, #0]
 80089f6:	68b9      	ldr	r1, [r7, #8]
 80089f8:	430b      	orrs	r3, r1
 80089fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	699a      	ldr	r2, [r3, #24]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a2c      	ldr	r2, [pc, #176]	; (8008ac8 <UART_SetConfig+0x114>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d103      	bne.n	8008a24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008a1c:	f7ff f9ae 	bl	8007d7c <HAL_RCC_GetPCLK2Freq>
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	e002      	b.n	8008a2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008a24:	f7ff f996 	bl	8007d54 <HAL_RCC_GetPCLK1Freq>
 8008a28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	009a      	lsls	r2, r3, #2
 8008a34:	441a      	add	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a40:	4a22      	ldr	r2, [pc, #136]	; (8008acc <UART_SetConfig+0x118>)
 8008a42:	fba2 2303 	umull	r2, r3, r2, r3
 8008a46:	095b      	lsrs	r3, r3, #5
 8008a48:	0119      	lsls	r1, r3, #4
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	009a      	lsls	r2, r3, #2
 8008a54:	441a      	add	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a60:	4b1a      	ldr	r3, [pc, #104]	; (8008acc <UART_SetConfig+0x118>)
 8008a62:	fba3 0302 	umull	r0, r3, r3, r2
 8008a66:	095b      	lsrs	r3, r3, #5
 8008a68:	2064      	movs	r0, #100	; 0x64
 8008a6a:	fb00 f303 	mul.w	r3, r0, r3
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	011b      	lsls	r3, r3, #4
 8008a72:	3332      	adds	r3, #50	; 0x32
 8008a74:	4a15      	ldr	r2, [pc, #84]	; (8008acc <UART_SetConfig+0x118>)
 8008a76:	fba2 2303 	umull	r2, r3, r2, r3
 8008a7a:	095b      	lsrs	r3, r3, #5
 8008a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a80:	4419      	add	r1, r3
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	009a      	lsls	r2, r3, #2
 8008a8c:	441a      	add	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a98:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <UART_SetConfig+0x118>)
 8008a9a:	fba3 0302 	umull	r0, r3, r3, r2
 8008a9e:	095b      	lsrs	r3, r3, #5
 8008aa0:	2064      	movs	r0, #100	; 0x64
 8008aa2:	fb00 f303 	mul.w	r3, r0, r3
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	011b      	lsls	r3, r3, #4
 8008aaa:	3332      	adds	r3, #50	; 0x32
 8008aac:	4a07      	ldr	r2, [pc, #28]	; (8008acc <UART_SetConfig+0x118>)
 8008aae:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab2:	095b      	lsrs	r3, r3, #5
 8008ab4:	f003 020f 	and.w	r2, r3, #15
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	440a      	add	r2, r1
 8008abe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008ac0:	bf00      	nop
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	40013800 	.word	0x40013800
 8008acc:	51eb851f 	.word	0x51eb851f

08008ad0 <memset>:
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	4402      	add	r2, r0
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d100      	bne.n	8008ada <memset+0xa>
 8008ad8:	4770      	bx	lr
 8008ada:	f803 1b01 	strb.w	r1, [r3], #1
 8008ade:	e7f9      	b.n	8008ad4 <memset+0x4>

08008ae0 <__libc_init_array>:
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	2600      	movs	r6, #0
 8008ae4:	4d0c      	ldr	r5, [pc, #48]	; (8008b18 <__libc_init_array+0x38>)
 8008ae6:	4c0d      	ldr	r4, [pc, #52]	; (8008b1c <__libc_init_array+0x3c>)
 8008ae8:	1b64      	subs	r4, r4, r5
 8008aea:	10a4      	asrs	r4, r4, #2
 8008aec:	42a6      	cmp	r6, r4
 8008aee:	d109      	bne.n	8008b04 <__libc_init_array+0x24>
 8008af0:	f000 f81a 	bl	8008b28 <_init>
 8008af4:	2600      	movs	r6, #0
 8008af6:	4d0a      	ldr	r5, [pc, #40]	; (8008b20 <__libc_init_array+0x40>)
 8008af8:	4c0a      	ldr	r4, [pc, #40]	; (8008b24 <__libc_init_array+0x44>)
 8008afa:	1b64      	subs	r4, r4, r5
 8008afc:	10a4      	asrs	r4, r4, #2
 8008afe:	42a6      	cmp	r6, r4
 8008b00:	d105      	bne.n	8008b0e <__libc_init_array+0x2e>
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b08:	4798      	blx	r3
 8008b0a:	3601      	adds	r6, #1
 8008b0c:	e7ee      	b.n	8008aec <__libc_init_array+0xc>
 8008b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b12:	4798      	blx	r3
 8008b14:	3601      	adds	r6, #1
 8008b16:	e7f2      	b.n	8008afe <__libc_init_array+0x1e>
 8008b18:	0800a404 	.word	0x0800a404
 8008b1c:	0800a404 	.word	0x0800a404
 8008b20:	0800a404 	.word	0x0800a404
 8008b24:	0800a408 	.word	0x0800a408

08008b28 <_init>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	bf00      	nop
 8008b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b2e:	bc08      	pop	{r3}
 8008b30:	469e      	mov	lr, r3
 8008b32:	4770      	bx	lr

08008b34 <_fini>:
 8008b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b36:	bf00      	nop
 8008b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3a:	bc08      	pop	{r3}
 8008b3c:	469e      	mov	lr, r3
 8008b3e:	4770      	bx	lr
