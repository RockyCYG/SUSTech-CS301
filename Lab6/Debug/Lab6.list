
Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000806c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001814  08008254  08008254  00018254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a68  08009a68  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009a68  08009a68  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a68  08009a68  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a68  08009a68  00019a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a6c  08009a6c  00019a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000010  08009a80  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08009a80  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008086  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aaa  00000000  00000000  00028102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  00029bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000603  00000000  00000000  0002a390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001965f  00000000  00000000  0002a993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb8d  00000000  00000000  00043ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000908ab  00000000  00000000  0004fb7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f70  00000000  00000000  000e042c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000e239c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	0800823c 	.word	0x0800823c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	0800823c 	.word	0x0800823c

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000848:	4b28      	ldr	r3, [pc, #160]	; (80008ec <MX_GPIO_Init+0xb8>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a27      	ldr	r2, [pc, #156]	; (80008ec <MX_GPIO_Init+0xb8>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b25      	ldr	r3, [pc, #148]	; (80008ec <MX_GPIO_Init+0xb8>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <MX_GPIO_Init+0xb8>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a21      	ldr	r2, [pc, #132]	; (80008ec <MX_GPIO_Init+0xb8>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_GPIO_Init+0xb8>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0310 	and.w	r3, r3, #16
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_GPIO_Init+0xb8>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <MX_GPIO_Init+0xb8>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_GPIO_Init+0xb8>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8000890:	2320      	movs	r3, #32
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_GPIO_Init+0xbc>)
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	4814      	ldr	r0, [pc, #80]	; (80008f4 <MX_GPIO_Init+0xc0>)
 80008a4:	f006 f86a 	bl	800697c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_GPIO_Init+0xbc>)
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	4619      	mov	r1, r3
 80008bc:	480e      	ldr	r0, [pc, #56]	; (80008f8 <MX_GPIO_Init+0xc4>)
 80008be:	f006 f85d 	bl	800697c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2101      	movs	r1, #1
 80008c6:	2017      	movs	r0, #23
 80008c8:	f005 fedf 	bl	800668a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008cc:	2017      	movs	r0, #23
 80008ce:	f005 fef8 	bl	80066c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2101      	movs	r1, #1
 80008d6:	2028      	movs	r0, #40	; 0x28
 80008d8:	f005 fed7 	bl	800668a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008dc:	2028      	movs	r0, #40	; 0x28
 80008de:	f005 fef0 	bl	80066c2 <HAL_NVIC_EnableIRQ>

}
 80008e2:	bf00      	nop
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000
 80008f0:	10210000 	.word	0x10210000
 80008f4:	40011000 	.word	0x40011000
 80008f8:	40010800 	.word	0x40010800

080008fc <LCD_WR_REG>:
//榛樿涓虹珫灞�
_lcd_dev lcddev;

//鍐欏瘎瀛樺櫒鍑芥暟
//data:瀵勫瓨鍣ㄥ€�
void LCD_WR_REG(uint16_t data) {
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
    LCD_RS_CLR;  //鍐欏湴鍧€
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <LCD_WR_REG+0x40>)
 8000908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090c:	615a      	str	r2, [r3, #20]
    LCD_CS_CLR;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <LCD_WR_REG+0x40>)
 8000910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000914:	615a      	str	r2, [r3, #20]
    DATAOUT(data);
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <LCD_WR_REG+0x44>)
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	60d3      	str	r3, [r2, #12]
    LCD_WR_CLR;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <LCD_WR_REG+0x40>)
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	615a      	str	r2, [r3, #20]
    LCD_WR_SET;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <LCD_WR_REG+0x40>)
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	611a      	str	r2, [r3, #16]
    LCD_CS_SET;
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <LCD_WR_REG+0x40>)
 800092a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092e:	611a      	str	r2, [r3, #16]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40011000 	.word	0x40011000
 8000940:	40010c00 	.word	0x40010c00

08000944 <LCD_WR_DATAX>:
//鍐欐暟鎹嚱鏁�
//鍙互鏇夸唬LCD_WR_DATAX瀹�,鎷挎椂闂存崲绌洪棿.
//data:瀵勫瓨鍣ㄥ€�
void LCD_WR_DATAX(uint16_t data) {
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	80fb      	strh	r3, [r7, #6]
    LCD_RS_SET;
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <LCD_WR_DATAX+0x40>)
 8000950:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000954:	611a      	str	r2, [r3, #16]
    LCD_CS_CLR;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <LCD_WR_DATAX+0x40>)
 8000958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095c:	615a      	str	r2, [r3, #20]
    DATAOUT(data);
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <LCD_WR_DATAX+0x44>)
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	60d3      	str	r3, [r2, #12]
    LCD_WR_CLR;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <LCD_WR_DATAX+0x40>)
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	615a      	str	r2, [r3, #20]
    LCD_WR_SET;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <LCD_WR_DATAX+0x40>)
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	611a      	str	r2, [r3, #16]
    LCD_CS_SET;
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <LCD_WR_DATAX+0x40>)
 8000972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000976:	611a      	str	r2, [r3, #16]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40011000 	.word	0x40011000
 8000988:	40010c00 	.word	0x40010c00

0800098c <LCD_RD_DATA>:
//璇籐CD鏁版嵁
//杩斿洖鍊�:璇诲埌鐨勫€�
uint16_t LCD_RD_DATA(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
    uint16_t t;
    GPIOB->CRL = 0X88888888; //PB0-7  涓婃媺杈撳叆
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <LCD_RD_DATA+0x7c>)
 8000994:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000998:	601a      	str	r2, [r3, #0]
    GPIOB->CRH = 0X88888888; //PB8-15 涓婃媺杈撳叆
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <LCD_RD_DATA+0x7c>)
 800099c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80009a0:	605a      	str	r2, [r3, #4]
    GPIOB->ODR = 0X0000;     //鍏ㄩ儴杈撳嚭0
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <LCD_RD_DATA+0x7c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]

    LCD_RS_SET;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <LCD_RD_DATA+0x80>)
 80009aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ae:	611a      	str	r2, [r3, #16]
    LCD_CS_CLR;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <LCD_RD_DATA+0x80>)
 80009b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b6:	615a      	str	r2, [r3, #20]
    //璇诲彇鏁版嵁(璇诲瘎瀛樺櫒鏃�,骞朵笉闇€瑕佽2娆�)
    LCD_RD_CLR;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <LCD_RD_DATA+0x80>)
 80009ba:	2240      	movs	r2, #64	; 0x40
 80009bc:	615a      	str	r2, [r3, #20]
    if (lcddev.id == 0X8989)
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <LCD_RD_DATA+0x84>)
 80009c0:	889b      	ldrh	r3, [r3, #4]
 80009c2:	f648 1289 	movw	r2, #35209	; 0x8989
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d102      	bne.n	80009d0 <LCD_RD_DATA+0x44>
        HAL_Delay(1); // delay_us(2);//FOR 8989,寤舵椂2us
 80009ca:	2001      	movs	r0, #1
 80009cc:	f005 fd62 	bl	8006494 <HAL_Delay>
    t = DATAIN
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <LCD_RD_DATA+0x7c>)
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	80fb      	strh	r3, [r7, #6]
    ;
    LCD_RD_SET;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <LCD_RD_DATA+0x80>)
 80009d8:	2240      	movs	r2, #64	; 0x40
 80009da:	611a      	str	r2, [r3, #16]
    LCD_CS_SET;
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <LCD_RD_DATA+0x80>)
 80009de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e2:	611a      	str	r2, [r3, #16]

    GPIOB->CRL = 0X33333333; //PB0-7  涓婃媺杈撳嚭
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <LCD_RD_DATA+0x7c>)
 80009e6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80009ea:	601a      	str	r2, [r3, #0]
    GPIOB->CRH = 0X33333333; //PB8-15 涓婃媺杈撳嚭
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <LCD_RD_DATA+0x7c>)
 80009ee:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80009f2:	605a      	str	r2, [r3, #4]
    GPIOB->ODR = 0XFFFF;    //鍏ㄩ儴杈撳嚭楂�
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <LCD_RD_DATA+0x7c>)
 80009f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009fa:	60da      	str	r2, [r3, #12]
    return t;
 80009fc:	88fb      	ldrh	r3, [r7, #6]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40010c00 	.word	0x40010c00
 8000a0c:	40011000 	.word	0x40011000
 8000a10:	20000030 	.word	0x20000030

08000a14 <LCD_WriteReg>:
//鍐欏瘎瀛樺櫒
//LCD_Reg:瀵勫瓨鍣ㄧ紪鍙�
//LCD_RegValue:瑕佸啓鍏ョ殑鍊�
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	460a      	mov	r2, r1
 8000a1e:	80fb      	strh	r3, [r7, #6]
 8000a20:	4613      	mov	r3, r2
 8000a22:	80bb      	strh	r3, [r7, #4]
    LCD_WR_REG(LCD_Reg);
 8000a24:	88fb      	ldrh	r3, [r7, #6]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ff68 	bl	80008fc <LCD_WR_REG>
    LCD_WR_DATA(LCD_RegValue);
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <LCD_WriteReg+0x4c>)
 8000a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a32:	611a      	str	r2, [r3, #16]
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <LCD_WriteReg+0x4c>)
 8000a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3a:	615a      	str	r2, [r3, #20]
 8000a3c:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <LCD_WriteReg+0x50>)
 8000a3e:	88bb      	ldrh	r3, [r7, #4]
 8000a40:	60d3      	str	r3, [r2, #12]
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <LCD_WriteReg+0x4c>)
 8000a44:	2280      	movs	r2, #128	; 0x80
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <LCD_WriteReg+0x4c>)
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <LCD_WriteReg+0x4c>)
 8000a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a54:	611a      	str	r2, [r3, #16]
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40011000 	.word	0x40011000
 8000a64:	40010c00 	.word	0x40010c00

08000a68 <LCD_ReadReg>:
//璇诲瘎瀛樺櫒
//LCD_Reg:瀵勫瓨鍣ㄧ紪鍙�
//杩斿洖鍊�:璇诲埌鐨勫€�
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80fb      	strh	r3, [r7, #6]
    LCD_WR_REG(LCD_Reg);  //鍐欏叆瑕佽鐨勫瘎瀛樺櫒鍙�
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff41 	bl	80008fc <LCD_WR_REG>
    return LCD_RD_DATA();
 8000a7a:	f7ff ff87 	bl	800098c <LCD_RD_DATA>
 8000a7e:	4603      	mov	r3, r0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <LCD_WriteRAM_Prepare>:
//寮€濮嬪啓GRAM
void LCD_WriteRAM_Prepare(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    LCD_WR_REG(lcddev.wramcmd);
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <LCD_WriteRAM_Prepare+0x14>)
 8000a8e:	891b      	ldrh	r3, [r3, #8]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff33 	bl	80008fc <LCD_WR_REG>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000030 	.word	0x20000030

08000aa0 <LCD_SetCursor>:
        LCD_WriteReg(0X07, 0x0);	//鍏抽棴鏄剧ず
}
//璁剧疆鍏夋爣浣嶇疆
//Xpos:妯潗鏍�
//Ypos:绾靛潗鏍�
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	460a      	mov	r2, r1
 8000aaa:	80fb      	strh	r3, [r7, #6]
 8000aac:	4613      	mov	r3, r2
 8000aae:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000ab0:	4b73      	ldr	r3, [pc, #460]	; (8000c80 <LCD_SetCursor+0x1e0>)
 8000ab2:	889b      	ldrh	r3, [r3, #4]
 8000ab4:	f249 3241 	movw	r2, #37697	; 0x9341
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d005      	beq.n	8000ac8 <LCD_SetCursor+0x28>
 8000abc:	4b70      	ldr	r3, [pc, #448]	; (8000c80 <LCD_SetCursor+0x1e0>)
 8000abe:	889b      	ldrh	r3, [r3, #4]
 8000ac0:	f245 3210 	movw	r2, #21264	; 0x5310
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d164      	bne.n	8000b92 <LCD_SetCursor+0xf2>
        LCD_WR_REG(lcddev.setxcmd);
 8000ac8:	4b6d      	ldr	r3, [pc, #436]	; (8000c80 <LCD_SetCursor+0x1e0>)
 8000aca:	895b      	ldrh	r3, [r3, #10]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff15 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(Xpos >> 8);
 8000ad2:	4b6c      	ldr	r3, [pc, #432]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ad8:	611a      	str	r2, [r3, #16]
 8000ada:	4b6a      	ldr	r3, [pc, #424]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae0:	615a      	str	r2, [r3, #20]
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b67      	ldr	r3, [pc, #412]	; (8000c88 <LCD_SetCursor+0x1e8>)
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	4b65      	ldr	r3, [pc, #404]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	4b64      	ldr	r3, [pc, #400]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000af4:	2280      	movs	r2, #128	; 0x80
 8000af6:	611a      	str	r2, [r3, #16]
 8000af8:	4b62      	ldr	r3, [pc, #392]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afe:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(Xpos & 0XFF);
 8000b00:	4b60      	ldr	r3, [pc, #384]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	4b5e      	ldr	r3, [pc, #376]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b0e:	615a      	str	r2, [r3, #20]
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	4a5d      	ldr	r2, [pc, #372]	; (8000c88 <LCD_SetCursor+0x1e8>)
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	60d3      	str	r3, [r2, #12]
 8000b18:	4b5a      	ldr	r3, [pc, #360]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	611a      	str	r2, [r3, #16]
 8000b24:	4b57      	ldr	r3, [pc, #348]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b2a:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(lcddev.setycmd);
 8000b2c:	4b54      	ldr	r3, [pc, #336]	; (8000c80 <LCD_SetCursor+0x1e0>)
 8000b2e:	899b      	ldrh	r3, [r3, #12]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fee3 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(Ypos >> 8);
 8000b36:	4b53      	ldr	r3, [pc, #332]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b3c:	611a      	str	r2, [r3, #16]
 8000b3e:	4b51      	ldr	r3, [pc, #324]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b4e      	ldr	r3, [pc, #312]	; (8000c88 <LCD_SetCursor+0x1e8>)
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	4b4c      	ldr	r3, [pc, #304]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	4b4b      	ldr	r3, [pc, #300]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	4b49      	ldr	r3, [pc, #292]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b62:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(Ypos & 0XFF);
 8000b64:	4b47      	ldr	r3, [pc, #284]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	4b45      	ldr	r3, [pc, #276]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b72:	615a      	str	r2, [r3, #20]
 8000b74:	88bb      	ldrh	r3, [r7, #4]
 8000b76:	4a44      	ldr	r2, [pc, #272]	; (8000c88 <LCD_SetCursor+0x1e8>)
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	60d3      	str	r3, [r2, #12]
 8000b7c:	4b41      	ldr	r3, [pc, #260]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	615a      	str	r2, [r3, #20]
 8000b82:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8e:	611a      	str	r2, [r3, #16]
        if (lcddev.dir == 1)
            Xpos = lcddev.width - 1 - Xpos;	//妯睆鍏跺疄灏辨槸璋冭浆x,y鍧愭爣
        LCD_WriteReg(lcddev.setxcmd, Xpos);
        LCD_WriteReg(lcddev.setycmd, Ypos);
    }
}
 8000b90:	e248      	b.n	8001024 <LCD_SetCursor+0x584>
    } else if (lcddev.id == 0X6804) {
 8000b92:	4b3b      	ldr	r3, [pc, #236]	; (8000c80 <LCD_SetCursor+0x1e0>)
 8000b94:	889b      	ldrh	r3, [r3, #4]
 8000b96:	f646 0204 	movw	r2, #26628	; 0x6804
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d176      	bne.n	8000c8c <LCD_SetCursor+0x1ec>
        if (lcddev.dir == 1)
 8000b9e:	4b38      	ldr	r3, [pc, #224]	; (8000c80 <LCD_SetCursor+0x1e0>)
 8000ba0:	799b      	ldrb	r3, [r3, #6]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d106      	bne.n	8000bb4 <LCD_SetCursor+0x114>
            Xpos = lcddev.width - 1 - Xpos;	//妯睆鏃跺鐞�
 8000ba6:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <LCD_SetCursor+0x1e0>)
 8000ba8:	881a      	ldrh	r2, [r3, #0]
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	80fb      	strh	r3, [r7, #6]
        LCD_WR_REG(lcddev.setxcmd);
 8000bb4:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <LCD_SetCursor+0x1e0>)
 8000bb6:	895b      	ldrh	r3, [r3, #10]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fe9f 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(Xpos >> 8);
 8000bbe:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc4:	611a      	str	r2, [r3, #16]
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <LCD_SetCursor+0x1e8>)
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	615a      	str	r2, [r3, #20]
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000be0:	2280      	movs	r2, #128	; 0x80
 8000be2:	611a      	str	r2, [r3, #16]
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bea:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(Xpos & 0XFF);
 8000bec:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf2:	611a      	str	r2, [r3, #16]
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <LCD_SetCursor+0x1e8>)
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	60d3      	str	r3, [r2, #12]
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c16:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(lcddev.setycmd);
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <LCD_SetCursor+0x1e0>)
 8000c1a:	899b      	ldrh	r3, [r3, #12]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fe6d 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(Ypos >> 8);
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c28:	611a      	str	r2, [r3, #16]
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c30:	615a      	str	r2, [r3, #20]
 8000c32:	88bb      	ldrh	r3, [r7, #4]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <LCD_SetCursor+0x1e8>)
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000c3e:	2280      	movs	r2, #128	; 0x80
 8000c40:	615a      	str	r2, [r3, #20]
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4e:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(Ypos & 0XFF);
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	88bb      	ldrh	r3, [r7, #4]
 8000c62:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <LCD_SetCursor+0x1e8>)
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	60d3      	str	r3, [r2, #12]
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <LCD_SetCursor+0x1e4>)
 8000c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7a:	611a      	str	r2, [r3, #16]
}
 8000c7c:	e1d2      	b.n	8001024 <LCD_SetCursor+0x584>
 8000c7e:	bf00      	nop
 8000c80:	20000030 	.word	0x20000030
 8000c84:	40011000 	.word	0x40011000
 8000c88:	40010c00 	.word	0x40010c00
    } else if (lcddev.id == 0X1963) {
 8000c8c:	4b99      	ldr	r3, [pc, #612]	; (8000ef4 <LCD_SetCursor+0x454>)
 8000c8e:	889b      	ldrh	r3, [r3, #4]
 8000c90:	f641 1263 	movw	r2, #6499	; 0x1963
 8000c94:	4293      	cmp	r3, r2
 8000c96:	f040 8133 	bne.w	8000f00 <LCD_SetCursor+0x460>
        if (lcddev.dir == 0)	//x鍧愭爣闇€瑕佸彉鎹�
 8000c9a:	4b96      	ldr	r3, [pc, #600]	; (8000ef4 <LCD_SetCursor+0x454>)
 8000c9c:	799b      	ldrb	r3, [r3, #6]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d163      	bne.n	8000d6a <LCD_SetCursor+0x2ca>
            Xpos = lcddev.width - 1 - Xpos;
 8000ca2:	4b94      	ldr	r3, [pc, #592]	; (8000ef4 <LCD_SetCursor+0x454>)
 8000ca4:	881a      	ldrh	r2, [r3, #0]
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	3b01      	subs	r3, #1
 8000cae:	80fb      	strh	r3, [r7, #6]
            LCD_WR_REG(lcddev.setxcmd);
 8000cb0:	4b90      	ldr	r3, [pc, #576]	; (8000ef4 <LCD_SetCursor+0x454>)
 8000cb2:	895b      	ldrh	r3, [r3, #10]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fe21 	bl	80008fc <LCD_WR_REG>
            LCD_WR_DATA(0);
 8000cba:	4b8f      	ldr	r3, [pc, #572]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc0:	611a      	str	r2, [r3, #16]
 8000cc2:	4b8d      	ldr	r3, [pc, #564]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc8:	615a      	str	r2, [r3, #20]
 8000cca:	4b8c      	ldr	r3, [pc, #560]	; (8000efc <LCD_SetCursor+0x45c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	4b89      	ldr	r3, [pc, #548]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	615a      	str	r2, [r3, #20]
 8000cd6:	4b88      	ldr	r3, [pc, #544]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	4b86      	ldr	r3, [pc, #536]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce2:	611a      	str	r2, [r3, #16]
            LCD_WR_DATA(0);
 8000ce4:	4b84      	ldr	r3, [pc, #528]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cea:	611a      	str	r2, [r3, #16]
 8000cec:	4b82      	ldr	r3, [pc, #520]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf2:	615a      	str	r2, [r3, #20]
 8000cf4:	4b81      	ldr	r3, [pc, #516]	; (8000efc <LCD_SetCursor+0x45c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	4b7f      	ldr	r3, [pc, #508]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	615a      	str	r2, [r3, #20]
 8000d00:	4b7d      	ldr	r3, [pc, #500]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	611a      	str	r2, [r3, #16]
 8000d06:	4b7c      	ldr	r3, [pc, #496]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0c:	611a      	str	r2, [r3, #16]
            LCD_WR_DATA(Xpos >> 8);
 8000d0e:	4b7a      	ldr	r3, [pc, #488]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	4b78      	ldr	r3, [pc, #480]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1c:	615a      	str	r2, [r3, #20]
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b75      	ldr	r3, [pc, #468]	; (8000efc <LCD_SetCursor+0x45c>)
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	4b73      	ldr	r3, [pc, #460]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	4b72      	ldr	r3, [pc, #456]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	611a      	str	r2, [r3, #16]
 8000d34:	4b70      	ldr	r3, [pc, #448]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3a:	611a      	str	r2, [r3, #16]
            LCD_WR_DATA(Xpos & 0XFF);
 8000d3c:	4b6e      	ldr	r3, [pc, #440]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	4b6c      	ldr	r3, [pc, #432]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d4a:	615a      	str	r2, [r3, #20]
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	4a6b      	ldr	r2, [pc, #428]	; (8000efc <LCD_SetCursor+0x45c>)
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	60d3      	str	r3, [r2, #12]
 8000d54:	4b68      	ldr	r3, [pc, #416]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	4b67      	ldr	r3, [pc, #412]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	611a      	str	r2, [r3, #16]
 8000d60:	4b65      	ldr	r3, [pc, #404]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	e061      	b.n	8000e2e <LCD_SetCursor+0x38e>
            LCD_WR_REG(lcddev.setxcmd);
 8000d6a:	4b62      	ldr	r3, [pc, #392]	; (8000ef4 <LCD_SetCursor+0x454>)
 8000d6c:	895b      	ldrh	r3, [r3, #10]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fdc4 	bl	80008fc <LCD_WR_REG>
            LCD_WR_DATA(Xpos >> 8);
 8000d74:	4b60      	ldr	r3, [pc, #384]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	4b5e      	ldr	r3, [pc, #376]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	0a1b      	lsrs	r3, r3, #8
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	4b5c      	ldr	r3, [pc, #368]	; (8000efc <LCD_SetCursor+0x45c>)
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	4b5a      	ldr	r3, [pc, #360]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	615a      	str	r2, [r3, #20]
 8000d94:	4b58      	ldr	r3, [pc, #352]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d96:	2280      	movs	r2, #128	; 0x80
 8000d98:	611a      	str	r2, [r3, #16]
 8000d9a:	4b57      	ldr	r3, [pc, #348]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da0:	611a      	str	r2, [r3, #16]
            LCD_WR_DATA(Xpos & 0XFF);
 8000da2:	4b55      	ldr	r3, [pc, #340]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000da4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da8:	611a      	str	r2, [r3, #16]
 8000daa:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db0:	615a      	str	r2, [r3, #20]
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	4a51      	ldr	r2, [pc, #324]	; (8000efc <LCD_SetCursor+0x45c>)
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	60d3      	str	r3, [r2, #12]
 8000dba:	4b4f      	ldr	r3, [pc, #316]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	615a      	str	r2, [r3, #20]
 8000dc0:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	611a      	str	r2, [r3, #16]
 8000dc6:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dcc:	611a      	str	r2, [r3, #16]
            LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000dce:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	4b48      	ldr	r3, [pc, #288]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ddc:	615a      	str	r2, [r3, #20]
 8000dde:	4b45      	ldr	r3, [pc, #276]	; (8000ef4 <LCD_SetCursor+0x454>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	121a      	asrs	r2, r3, #8
 8000de6:	4b45      	ldr	r3, [pc, #276]	; (8000efc <LCD_SetCursor+0x45c>)
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	4b43      	ldr	r3, [pc, #268]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	615a      	str	r2, [r3, #20]
 8000df0:	4b41      	ldr	r3, [pc, #260]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	4b40      	ldr	r3, [pc, #256]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfc:	611a      	str	r2, [r3, #16]
            LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000dfe:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	4b3c      	ldr	r3, [pc, #240]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0c:	615a      	str	r2, [r3, #20]
 8000e0e:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <LCD_SetCursor+0x454>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	4a39      	ldr	r2, [pc, #228]	; (8000efc <LCD_SetCursor+0x45c>)
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	60d3      	str	r3, [r2, #12]
 8000e1a:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e1c:	2280      	movs	r2, #128	; 0x80
 8000e1e:	615a      	str	r2, [r3, #20]
 8000e20:	4b35      	ldr	r3, [pc, #212]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	611a      	str	r2, [r3, #16]
 8000e26:	4b34      	ldr	r3, [pc, #208]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2c:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(lcddev.setycmd);
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <LCD_SetCursor+0x454>)
 8000e30:	899b      	ldrh	r3, [r3, #12]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fd62 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(Ypos >> 8);
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e3e:	611a      	str	r2, [r3, #16]
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	88bb      	ldrh	r3, [r7, #4]
 8000e4a:	0a1b      	lsrs	r3, r3, #8
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <LCD_SetCursor+0x45c>)
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	615a      	str	r2, [r3, #20]
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	611a      	str	r2, [r3, #16]
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e64:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(Ypos & 0XFF);
 8000e66:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e74:	615a      	str	r2, [r3, #20]
 8000e76:	88bb      	ldrh	r3, [r7, #4]
 8000e78:	4a20      	ldr	r2, [pc, #128]	; (8000efc <LCD_SetCursor+0x45c>)
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	60d3      	str	r3, [r2, #12]
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e90:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <LCD_SetCursor+0x454>)
 8000ea4:	885b      	ldrh	r3, [r3, #2]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	121a      	asrs	r2, r3, #8
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <LCD_SetCursor+0x45c>)
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	615a      	str	r2, [r3, #20]
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000eb6:	2280      	movs	r2, #128	; 0x80
 8000eb8:	611a      	str	r2, [r3, #16]
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec0:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec8:	611a      	str	r2, [r3, #16]
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed0:	615a      	str	r2, [r3, #20]
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <LCD_SetCursor+0x454>)
 8000ed4:	885b      	ldrh	r3, [r3, #2]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	4a08      	ldr	r2, [pc, #32]	; (8000efc <LCD_SetCursor+0x45c>)
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	60d3      	str	r3, [r2, #12]
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	611a      	str	r2, [r3, #16]
 8000eea:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <LCD_SetCursor+0x458>)
 8000eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef0:	611a      	str	r2, [r3, #16]
}
 8000ef2:	e097      	b.n	8001024 <LCD_SetCursor+0x584>
 8000ef4:	20000030 	.word	0x20000030
 8000ef8:	40011000 	.word	0x40011000
 8000efc:	40010c00 	.word	0x40010c00
    } else if (lcddev.id == 0X5510) {
 8000f00:	4b4a      	ldr	r3, [pc, #296]	; (800102c <LCD_SetCursor+0x58c>)
 8000f02:	889b      	ldrh	r3, [r3, #4]
 8000f04:	f245 5210 	movw	r2, #21776	; 0x5510
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d172      	bne.n	8000ff2 <LCD_SetCursor+0x552>
        LCD_WR_REG(lcddev.setxcmd);
 8000f0c:	4b47      	ldr	r3, [pc, #284]	; (800102c <LCD_SetCursor+0x58c>)
 8000f0e:	895b      	ldrh	r3, [r3, #10]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fcf3 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(Xpos >> 8);
 8000f16:	4b46      	ldr	r3, [pc, #280]	; (8001030 <LCD_SetCursor+0x590>)
 8000f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1c:	611a      	str	r2, [r3, #16]
 8000f1e:	4b44      	ldr	r3, [pc, #272]	; (8001030 <LCD_SetCursor+0x590>)
 8000f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	4b41      	ldr	r3, [pc, #260]	; (8001034 <LCD_SetCursor+0x594>)
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <LCD_SetCursor+0x590>)
 8000f32:	2280      	movs	r2, #128	; 0x80
 8000f34:	615a      	str	r2, [r3, #20]
 8000f36:	4b3e      	ldr	r3, [pc, #248]	; (8001030 <LCD_SetCursor+0x590>)
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	4b3c      	ldr	r3, [pc, #240]	; (8001030 <LCD_SetCursor+0x590>)
 8000f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f42:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(lcddev.setxcmd + 1);
 8000f44:	4b39      	ldr	r3, [pc, #228]	; (800102c <LCD_SetCursor+0x58c>)
 8000f46:	895b      	ldrh	r3, [r3, #10]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fcd5 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(Xpos & 0XFF);
 8000f52:	4b37      	ldr	r3, [pc, #220]	; (8001030 <LCD_SetCursor+0x590>)
 8000f54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <LCD_SetCursor+0x590>)
 8000f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	4a33      	ldr	r2, [pc, #204]	; (8001034 <LCD_SetCursor+0x594>)
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	60d3      	str	r3, [r2, #12]
 8000f6a:	4b31      	ldr	r3, [pc, #196]	; (8001030 <LCD_SetCursor+0x590>)
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <LCD_SetCursor+0x590>)
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <LCD_SetCursor+0x590>)
 8000f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7c:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(lcddev.setycmd);
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <LCD_SetCursor+0x58c>)
 8000f80:	899b      	ldrh	r3, [r3, #12]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fcba 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(Ypos >> 8);
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <LCD_SetCursor+0x590>)
 8000f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <LCD_SetCursor+0x590>)
 8000f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f96:	615a      	str	r2, [r3, #20]
 8000f98:	88bb      	ldrh	r3, [r7, #4]
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b25      	ldr	r3, [pc, #148]	; (8001034 <LCD_SetCursor+0x594>)
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	4b23      	ldr	r3, [pc, #140]	; (8001030 <LCD_SetCursor+0x590>)
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <LCD_SetCursor+0x590>)
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	611a      	str	r2, [r3, #16]
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <LCD_SetCursor+0x590>)
 8000fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb4:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(lcddev.setycmd + 1);
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <LCD_SetCursor+0x58c>)
 8000fb8:	899b      	ldrh	r3, [r3, #12]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fc9c 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(Ypos & 0XFF);
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <LCD_SetCursor+0x590>)
 8000fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <LCD_SetCursor+0x590>)
 8000fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd2:	615a      	str	r2, [r3, #20]
 8000fd4:	88bb      	ldrh	r3, [r7, #4]
 8000fd6:	4a17      	ldr	r2, [pc, #92]	; (8001034 <LCD_SetCursor+0x594>)
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	60d3      	str	r3, [r2, #12]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <LCD_SetCursor+0x590>)
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	615a      	str	r2, [r3, #20]
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <LCD_SetCursor+0x590>)
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <LCD_SetCursor+0x590>)
 8000fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fee:	611a      	str	r2, [r3, #16]
}
 8000ff0:	e018      	b.n	8001024 <LCD_SetCursor+0x584>
        if (lcddev.dir == 1)
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <LCD_SetCursor+0x58c>)
 8000ff4:	799b      	ldrb	r3, [r3, #6]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d106      	bne.n	8001008 <LCD_SetCursor+0x568>
            Xpos = lcddev.width - 1 - Xpos;	//妯睆鍏跺疄灏辨槸璋冭浆x,y鍧愭爣
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <LCD_SetCursor+0x58c>)
 8000ffc:	881a      	ldrh	r2, [r3, #0]
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	b29b      	uxth	r3, r3
 8001004:	3b01      	subs	r3, #1
 8001006:	80fb      	strh	r3, [r7, #6]
        LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <LCD_SetCursor+0x58c>)
 800100a:	895b      	ldrh	r3, [r3, #10]
 800100c:	88fa      	ldrh	r2, [r7, #6]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fcff 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(lcddev.setycmd, Ypos);
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <LCD_SetCursor+0x58c>)
 8001018:	899b      	ldrh	r3, [r3, #12]
 800101a:	88ba      	ldrh	r2, [r7, #4]
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fcf8 	bl	8000a14 <LCD_WriteReg>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000030 	.word	0x20000030
 8001030:	40011000 	.word	0x40011000
 8001034:	40010c00 	.word	0x40010c00

08001038 <LCD_Scan_Dir>:
//璁剧疆LCD鐨勮嚜鍔ㄦ壂鎻忔柟鍚�
//娉ㄦ剰:鍏朵粬鍑芥暟鍙兘浼氬彈鍒版鍑芥暟璁剧疆鐨勫奖鍝�(灏ゅ叾鏄�9341/6804杩欎袱涓钁�),
//鎵€浠�,涓€鑸缃负L2R_U2D鍗冲彲,濡傛灉璁剧疆涓哄叾浠栨壂鎻忔柟寮�,鍙兘瀵艰嚧鏄剧ず涓嶆甯�.
//dir:0~7,浠ｈ〃8涓柟鍚�(鍏蜂綋瀹氫箟瑙乴cd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963绛塈C宸茬粡瀹為檯娴嬭瘯
void LCD_Scan_Dir(uint8_t dir) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	81fb      	strh	r3, [r7, #14]
    uint16_t dirreg = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	81bb      	strh	r3, [r7, #12]
    uint16_t temp;
    if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 800104a:	4b78      	ldr	r3, [pc, #480]	; (800122c <LCD_Scan_Dir+0x1f4>)
 800104c:	799b      	ldrb	r3, [r3, #6]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d10b      	bne.n	800106a <LCD_Scan_Dir+0x32>
 8001052:	4b76      	ldr	r3, [pc, #472]	; (800122c <LCD_Scan_Dir+0x1f4>)
 8001054:	889b      	ldrh	r3, [r3, #4]
 8001056:	f646 0204 	movw	r2, #26628	; 0x6804
 800105a:	4293      	cmp	r3, r2
 800105c:	d005      	beq.n	800106a <LCD_Scan_Dir+0x32>
 800105e:	4b73      	ldr	r3, [pc, #460]	; (800122c <LCD_Scan_Dir+0x1f4>)
 8001060:	889b      	ldrh	r3, [r3, #4]
 8001062:	f641 1263 	movw	r2, #6499	; 0x1963
 8001066:	4293      	cmp	r3, r2
 8001068:	d109      	bne.n	800107e <LCD_Scan_Dir+0x46>
        || (lcddev.dir == 0 && lcddev.id == 0X1963))//妯睆鏃讹紝瀵�6804鍜�1963涓嶆敼鍙樻壂鎻忔柟鍚戯紒绔栧睆鏃�1963鏀瑰彉鏂瑰悜
 800106a:	4b70      	ldr	r3, [pc, #448]	; (800122c <LCD_Scan_Dir+0x1f4>)
 800106c:	799b      	ldrb	r3, [r3, #6]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d134      	bne.n	80010dc <LCD_Scan_Dir+0xa4>
 8001072:	4b6e      	ldr	r3, [pc, #440]	; (800122c <LCD_Scan_Dir+0x1f4>)
 8001074:	889b      	ldrh	r3, [r3, #4]
 8001076:	f641 1263 	movw	r2, #6499	; 0x1963
 800107a:	4293      	cmp	r3, r2
 800107c:	d12e      	bne.n	80010dc <LCD_Scan_Dir+0xa4>
    {
        switch (dir)	//鏂瑰悜杞崲
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b07      	cmp	r3, #7
 8001082:	d82b      	bhi.n	80010dc <LCD_Scan_Dir+0xa4>
 8001084:	a201      	add	r2, pc, #4	; (adr r2, 800108c <LCD_Scan_Dir+0x54>)
 8001086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108a:	bf00      	nop
 800108c:	080010ad 	.word	0x080010ad
 8001090:	080010b3 	.word	0x080010b3
 8001094:	080010b9 	.word	0x080010b9
 8001098:	080010bf 	.word	0x080010bf
 800109c:	080010c5 	.word	0x080010c5
 80010a0:	080010cb 	.word	0x080010cb
 80010a4:	080010d1 	.word	0x080010d1
 80010a8:	080010d7 	.word	0x080010d7
        {
            case 0:
                dir = 6;
 80010ac:	2306      	movs	r3, #6
 80010ae:	71fb      	strb	r3, [r7, #7]
                break;
 80010b0:	e014      	b.n	80010dc <LCD_Scan_Dir+0xa4>
            case 1:
                dir = 7;
 80010b2:	2307      	movs	r3, #7
 80010b4:	71fb      	strb	r3, [r7, #7]
                break;
 80010b6:	e011      	b.n	80010dc <LCD_Scan_Dir+0xa4>
            case 2:
                dir = 4;
 80010b8:	2304      	movs	r3, #4
 80010ba:	71fb      	strb	r3, [r7, #7]
                break;
 80010bc:	e00e      	b.n	80010dc <LCD_Scan_Dir+0xa4>
            case 3:
                dir = 5;
 80010be:	2305      	movs	r3, #5
 80010c0:	71fb      	strb	r3, [r7, #7]
                break;
 80010c2:	e00b      	b.n	80010dc <LCD_Scan_Dir+0xa4>
            case 4:
                dir = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	71fb      	strb	r3, [r7, #7]
                break;
 80010c8:	e008      	b.n	80010dc <LCD_Scan_Dir+0xa4>
            case 5:
                dir = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	71fb      	strb	r3, [r7, #7]
                break;
 80010ce:	e005      	b.n	80010dc <LCD_Scan_Dir+0xa4>
            case 6:
                dir = 3;
 80010d0:	2303      	movs	r3, #3
 80010d2:	71fb      	strb	r3, [r7, #7]
                break;
 80010d4:	e002      	b.n	80010dc <LCD_Scan_Dir+0xa4>
            case 7:
                dir = 2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	71fb      	strb	r3, [r7, #7]
                break;
 80010da:	bf00      	nop
        }
    }
    if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 80010dc:	4b53      	ldr	r3, [pc, #332]	; (800122c <LCD_Scan_Dir+0x1f4>)
 80010de:	889b      	ldrh	r3, [r3, #4]
 80010e0:	f249 3241 	movw	r2, #37697	; 0x9341
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d018      	beq.n	800111a <LCD_Scan_Dir+0xe2>
 80010e8:	4b50      	ldr	r3, [pc, #320]	; (800122c <LCD_Scan_Dir+0x1f4>)
 80010ea:	889b      	ldrh	r3, [r3, #4]
 80010ec:	f646 0204 	movw	r2, #26628	; 0x6804
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d012      	beq.n	800111a <LCD_Scan_Dir+0xe2>
 80010f4:	4b4d      	ldr	r3, [pc, #308]	; (800122c <LCD_Scan_Dir+0x1f4>)
 80010f6:	889b      	ldrh	r3, [r3, #4]
 80010f8:	f245 3210 	movw	r2, #21264	; 0x5310
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d00c      	beq.n	800111a <LCD_Scan_Dir+0xe2>
        || lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,鐗规畩澶勭悊
 8001100:	4b4a      	ldr	r3, [pc, #296]	; (800122c <LCD_Scan_Dir+0x1f4>)
 8001102:	889b      	ldrh	r3, [r3, #4]
 8001104:	f245 5210 	movw	r2, #21776	; 0x5510
 8001108:	4293      	cmp	r3, r2
 800110a:	d006      	beq.n	800111a <LCD_Scan_Dir+0xe2>
 800110c:	4b47      	ldr	r3, [pc, #284]	; (800122c <LCD_Scan_Dir+0x1f4>)
 800110e:	889b      	ldrh	r3, [r3, #4]
 8001110:	f641 1263 	movw	r2, #6499	; 0x1963
 8001114:	4293      	cmp	r3, r2
 8001116:	f040 8250 	bne.w	80015ba <LCD_Scan_Dir+0x582>
    {
        switch (dir) {
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b07      	cmp	r3, #7
 800111e:	d836      	bhi.n	800118e <LCD_Scan_Dir+0x156>
 8001120:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <LCD_Scan_Dir+0xf0>)
 8001122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001126:	bf00      	nop
 8001128:	0800118f 	.word	0x0800118f
 800112c:	08001149 	.word	0x08001149
 8001130:	08001153 	.word	0x08001153
 8001134:	0800115d 	.word	0x0800115d
 8001138:	08001167 	.word	0x08001167
 800113c:	08001171 	.word	0x08001171
 8001140:	0800117b 	.word	0x0800117b
 8001144:	08001185 	.word	0x08001185
            case L2R_U2D:	//浠庡乏鍒板彸,浠庝笂鍒颁笅
                regval |= (0 << 7) | (0 << 6) | (0 << 5);
                break;
            case L2R_D2U:	//浠庡乏鍒板彸,浠庝笅鍒颁笂
                regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001148:	89fb      	ldrh	r3, [r7, #14]
 800114a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800114e:	81fb      	strh	r3, [r7, #14]
                break;
 8001150:	e01d      	b.n	800118e <LCD_Scan_Dir+0x156>
            case R2L_U2D:	//浠庡彸鍒板乏,浠庝笂鍒颁笅
                regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001158:	81fb      	strh	r3, [r7, #14]
                break;
 800115a:	e018      	b.n	800118e <LCD_Scan_Dir+0x156>
            case R2L_D2U:	//浠庡彸鍒板乏,浠庝笅鍒颁笂
                regval |= (1 << 7) | (1 << 6) | (0 << 5);
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001162:	81fb      	strh	r3, [r7, #14]
                break;
 8001164:	e013      	b.n	800118e <LCD_Scan_Dir+0x156>
            case U2D_L2R:	//浠庝笂鍒颁笅,浠庡乏鍒板彸
                regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8001166:	89fb      	ldrh	r3, [r7, #14]
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	81fb      	strh	r3, [r7, #14]
                break;
 800116e:	e00e      	b.n	800118e <LCD_Scan_Dir+0x156>
            case U2D_R2L:	//浠庝笂鍒颁笅,浠庡彸鍒板乏
                regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001170:	89fb      	ldrh	r3, [r7, #14]
 8001172:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001176:	81fb      	strh	r3, [r7, #14]
                break;
 8001178:	e009      	b.n	800118e <LCD_Scan_Dir+0x156>
            case D2U_L2R:	//浠庝笅鍒颁笂,浠庡乏鍒板彸
                regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001180:	81fb      	strh	r3, [r7, #14]
                break;
 8001182:	e004      	b.n	800118e <LCD_Scan_Dir+0x156>
            case D2U_R2L:	//浠庝笅鍒颁笂,浠庡彸鍒板乏
                regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800118a:	81fb      	strh	r3, [r7, #14]
                break;
 800118c:	bf00      	nop
        }
        if (lcddev.id == 0X5510)
 800118e:	4b27      	ldr	r3, [pc, #156]	; (800122c <LCD_Scan_Dir+0x1f4>)
 8001190:	889b      	ldrh	r3, [r3, #4]
 8001192:	f245 5210 	movw	r2, #21776	; 0x5510
 8001196:	4293      	cmp	r3, r2
 8001198:	d103      	bne.n	80011a2 <LCD_Scan_Dir+0x16a>
            dirreg = 0X3600;
 800119a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800119e:	81bb      	strh	r3, [r7, #12]
 80011a0:	e001      	b.n	80011a6 <LCD_Scan_Dir+0x16e>
        else
            dirreg = 0X36;
 80011a2:	2336      	movs	r3, #54	; 0x36
 80011a4:	81bb      	strh	r3, [r7, #12]
        if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <LCD_Scan_Dir+0x1f4>)
 80011a8:	889b      	ldrh	r3, [r3, #4]
 80011aa:	f245 3210 	movw	r2, #21264	; 0x5310
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00f      	beq.n	80011d2 <LCD_Scan_Dir+0x19a>
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <LCD_Scan_Dir+0x1f4>)
 80011b4:	889b      	ldrh	r3, [r3, #4]
 80011b6:	f245 5210 	movw	r2, #21776	; 0x5510
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d009      	beq.n	80011d2 <LCD_Scan_Dir+0x19a>
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <LCD_Scan_Dir+0x1f4>)
 80011c0:	889b      	ldrh	r3, [r3, #4]
 80011c2:	f641 1263 	movw	r2, #6499	; 0x1963
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d003      	beq.n	80011d2 <LCD_Scan_Dir+0x19a>
            regval |= 0X08;	//5310/5510/1963涓嶉渶瑕丅GR
 80011ca:	89fb      	ldrh	r3, [r7, #14]
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	81fb      	strh	r3, [r7, #14]
        if (lcddev.id == 0X6804)
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <LCD_Scan_Dir+0x1f4>)
 80011d4:	889b      	ldrh	r3, [r3, #4]
 80011d6:	f646 0204 	movw	r2, #26628	; 0x6804
 80011da:	4293      	cmp	r3, r2
 80011dc:	d103      	bne.n	80011e6 <LCD_Scan_Dir+0x1ae>
            regval |= 0x02;	//6804鐨凚IT6鍜�9341鐨勫弽浜�
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	81fb      	strh	r3, [r7, #14]
        LCD_WriteReg(dirreg, regval);
 80011e6:	89fa      	ldrh	r2, [r7, #14]
 80011e8:	89bb      	ldrh	r3, [r7, #12]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fc11 	bl	8000a14 <LCD_WriteReg>
        if (lcddev.id != 0X1963)	//1963涓嶅仛鍧愭爣澶勭悊
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <LCD_Scan_Dir+0x1f4>)
 80011f4:	889b      	ldrh	r3, [r3, #4]
 80011f6:	f641 1263 	movw	r2, #6499	; 0x1963
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d028      	beq.n	8001250 <LCD_Scan_Dir+0x218>
        {
            if (regval & 0X20) {
 80011fe:	89fb      	ldrh	r3, [r7, #14]
 8001200:	f003 0320 	and.w	r3, r3, #32
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <LCD_Scan_Dir+0x1f8>
                if (lcddev.width < lcddev.height)	//浜ゆ崲X,Y
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <LCD_Scan_Dir+0x1f4>)
 800120a:	881a      	ldrh	r2, [r3, #0]
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <LCD_Scan_Dir+0x1f4>)
 800120e:	885b      	ldrh	r3, [r3, #2]
 8001210:	429a      	cmp	r2, r3
 8001212:	d21d      	bcs.n	8001250 <LCD_Scan_Dir+0x218>
                {
                    temp = lcddev.width;
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <LCD_Scan_Dir+0x1f4>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	817b      	strh	r3, [r7, #10]
                    lcddev.width = lcddev.height;
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <LCD_Scan_Dir+0x1f4>)
 800121c:	885a      	ldrh	r2, [r3, #2]
 800121e:	4b03      	ldr	r3, [pc, #12]	; (800122c <LCD_Scan_Dir+0x1f4>)
 8001220:	801a      	strh	r2, [r3, #0]
                    lcddev.height = temp;
 8001222:	4a02      	ldr	r2, [pc, #8]	; (800122c <LCD_Scan_Dir+0x1f4>)
 8001224:	897b      	ldrh	r3, [r7, #10]
 8001226:	8053      	strh	r3, [r2, #2]
 8001228:	e012      	b.n	8001250 <LCD_Scan_Dir+0x218>
 800122a:	bf00      	nop
 800122c:	20000030 	.word	0x20000030
                }
            } else {
                if (lcddev.width > lcddev.height)	//浜ゆ崲X,Y
 8001230:	4b7f      	ldr	r3, [pc, #508]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 8001232:	881a      	ldrh	r2, [r3, #0]
 8001234:	4b7e      	ldr	r3, [pc, #504]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 8001236:	885b      	ldrh	r3, [r3, #2]
 8001238:	429a      	cmp	r2, r3
 800123a:	d909      	bls.n	8001250 <LCD_Scan_Dir+0x218>
                {
                    temp = lcddev.width;
 800123c:	4b7c      	ldr	r3, [pc, #496]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	817b      	strh	r3, [r7, #10]
                    lcddev.width = lcddev.height;
 8001242:	4b7b      	ldr	r3, [pc, #492]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 8001244:	885a      	ldrh	r2, [r3, #2]
 8001246:	4b7a      	ldr	r3, [pc, #488]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 8001248:	801a      	strh	r2, [r3, #0]
                    lcddev.height = temp;
 800124a:	4a79      	ldr	r2, [pc, #484]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 800124c:	897b      	ldrh	r3, [r7, #10]
 800124e:	8053      	strh	r3, [r2, #2]
                }
            }
        }
        if (lcddev.id == 0X5510) {
 8001250:	4b77      	ldr	r3, [pc, #476]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	f245 5210 	movw	r2, #21776	; 0x5510
 8001258:	4293      	cmp	r3, r2
 800125a:	f040 80ef 	bne.w	800143c <LCD_Scan_Dir+0x404>
            LCD_WR_REG(lcddev.setxcmd);
 800125e:	4b74      	ldr	r3, [pc, #464]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 8001260:	895b      	ldrh	r3, [r3, #10]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fb4a 	bl	80008fc <LCD_WR_REG>
            LCD_WR_DATA(0);
 8001268:	4b72      	ldr	r3, [pc, #456]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 800126a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	4b70      	ldr	r3, [pc, #448]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <LCD_Scan_Dir+0x400>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	4b6d      	ldr	r3, [pc, #436]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	4b6b      	ldr	r3, [pc, #428]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	611a      	str	r2, [r3, #16]
 800128a:	4b6a      	ldr	r3, [pc, #424]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 800128c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001290:	611a      	str	r2, [r3, #16]
            LCD_WR_REG(lcddev.setxcmd + 1);
 8001292:	4b67      	ldr	r3, [pc, #412]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 8001294:	895b      	ldrh	r3, [r3, #10]
 8001296:	3301      	adds	r3, #1
 8001298:	b29b      	uxth	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fb2e 	bl	80008fc <LCD_WR_REG>
            LCD_WR_DATA(0);
 80012a0:	4b64      	ldr	r3, [pc, #400]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80012a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	4b62      	ldr	r3, [pc, #392]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80012aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	4b61      	ldr	r3, [pc, #388]	; (8001438 <LCD_Scan_Dir+0x400>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	615a      	str	r2, [r3, #20]
 80012bc:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	611a      	str	r2, [r3, #16]
 80012c2:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80012c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c8:	611a      	str	r2, [r3, #16]
            LCD_WR_REG(lcddev.setxcmd + 2);
 80012ca:	4b59      	ldr	r3, [pc, #356]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 80012cc:	895b      	ldrh	r3, [r3, #10]
 80012ce:	3302      	adds	r3, #2
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fb12 	bl	80008fc <LCD_WR_REG>
            LCD_WR_DATA((lcddev.width - 1) >> 8);
 80012d8:	4b56      	ldr	r3, [pc, #344]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80012da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	4b54      	ldr	r3, [pc, #336]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80012e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	4b51      	ldr	r3, [pc, #324]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	121a      	asrs	r2, r3, #8
 80012f0:	4b51      	ldr	r3, [pc, #324]	; (8001438 <LCD_Scan_Dir+0x400>)
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80012f6:	2280      	movs	r2, #128	; 0x80
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	4b4e      	ldr	r3, [pc, #312]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	4b4c      	ldr	r3, [pc, #304]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001306:	611a      	str	r2, [r3, #16]
            LCD_WR_REG(lcddev.setxcmd + 3);
 8001308:	4b49      	ldr	r3, [pc, #292]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 800130a:	895b      	ldrh	r3, [r3, #10]
 800130c:	3303      	adds	r3, #3
 800130e:	b29b      	uxth	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff faf3 	bl	80008fc <LCD_WR_REG>
            LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001316:	4b47      	ldr	r3, [pc, #284]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001318:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131c:	611a      	str	r2, [r3, #16]
 800131e:	4b45      	ldr	r3, [pc, #276]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001324:	615a      	str	r2, [r3, #20]
 8001326:	4b42      	ldr	r3, [pc, #264]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	3b01      	subs	r3, #1
 800132c:	4a42      	ldr	r2, [pc, #264]	; (8001438 <LCD_Scan_Dir+0x400>)
 800132e:	b2db      	uxtb	r3, r3
 8001330:	60d3      	str	r3, [r2, #12]
 8001332:	4b40      	ldr	r3, [pc, #256]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001334:	2280      	movs	r2, #128	; 0x80
 8001336:	615a      	str	r2, [r3, #20]
 8001338:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	611a      	str	r2, [r3, #16]
 800133e:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001344:	611a      	str	r2, [r3, #16]
            LCD_WR_REG(lcddev.setycmd);
 8001346:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 8001348:	899b      	ldrh	r3, [r3, #12]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fad6 	bl	80008fc <LCD_WR_REG>
            LCD_WR_DATA(0);
 8001350:	4b38      	ldr	r3, [pc, #224]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	4b36      	ldr	r3, [pc, #216]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 800135a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135e:	615a      	str	r2, [r3, #20]
 8001360:	4b35      	ldr	r3, [pc, #212]	; (8001438 <LCD_Scan_Dir+0x400>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	4b33      	ldr	r3, [pc, #204]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	615a      	str	r2, [r3, #20]
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 800136e:	2280      	movs	r2, #128	; 0x80
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	4b30      	ldr	r3, [pc, #192]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001378:	611a      	str	r2, [r3, #16]
            LCD_WR_REG(lcddev.setycmd + 1);
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 800137c:	899b      	ldrh	r3, [r3, #12]
 800137e:	3301      	adds	r3, #1
 8001380:	b29b      	uxth	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff faba 	bl	80008fc <LCD_WR_REG>
            LCD_WR_DATA(0);
 8001388:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 800138a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	4b27      	ldr	r3, [pc, #156]	; (8001438 <LCD_Scan_Dir+0x400>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	615a      	str	r2, [r3, #20]
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	611a      	str	r2, [r3, #16]
 80013aa:	4b22      	ldr	r3, [pc, #136]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80013ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b0:	611a      	str	r2, [r3, #16]
            LCD_WR_REG(lcddev.setycmd + 2);
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 80013b4:	899b      	ldrh	r3, [r3, #12]
 80013b6:	3302      	adds	r3, #2
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fa9e 	bl	80008fc <LCD_WR_REG>
            LCD_WR_DATA((lcddev.height - 1) >> 8);
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80013c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80013ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ce:	615a      	str	r2, [r3, #20]
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 80013d2:	885b      	ldrh	r3, [r3, #2]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	121a      	asrs	r2, r3, #8
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <LCD_Scan_Dir+0x400>)
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	615a      	str	r2, [r3, #20]
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 80013ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ee:	611a      	str	r2, [r3, #16]
            LCD_WR_REG(lcddev.setycmd + 3);
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 80013f2:	899b      	ldrh	r3, [r3, #12]
 80013f4:	3303      	adds	r3, #3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fa7f 	bl	80008fc <LCD_WR_REG>
            LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001404:	611a      	str	r2, [r3, #16]
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800140c:	615a      	str	r2, [r3, #20]
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <LCD_Scan_Dir+0x3f8>)
 8001410:	885b      	ldrh	r3, [r3, #2]
 8001412:	3b01      	subs	r3, #1
 8001414:	4a08      	ldr	r2, [pc, #32]	; (8001438 <LCD_Scan_Dir+0x400>)
 8001416:	b2db      	uxtb	r3, r3
 8001418:	60d3      	str	r3, [r2, #12]
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001422:	2280      	movs	r2, #128	; 0x80
 8001424:	611a      	str	r2, [r3, #16]
 8001426:	4b03      	ldr	r3, [pc, #12]	; (8001434 <LCD_Scan_Dir+0x3fc>)
 8001428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800142c:	611a      	str	r2, [r3, #16]
        if (lcddev.id == 0X5510) {
 800142e:	e10b      	b.n	8001648 <LCD_Scan_Dir+0x610>
 8001430:	20000030 	.word	0x20000030
 8001434:	40011000 	.word	0x40011000
 8001438:	40010c00 	.word	0x40010c00
        } else {
            LCD_WR_REG(lcddev.setxcmd);
 800143c:	4b84      	ldr	r3, [pc, #528]	; (8001650 <LCD_Scan_Dir+0x618>)
 800143e:	895b      	ldrh	r3, [r3, #10]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fa5b 	bl	80008fc <LCD_WR_REG>
            LCD_WR_DATA(0);
 8001446:	4b83      	ldr	r3, [pc, #524]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001448:	f44f 7280 	mov.w	r2, #256	; 0x100
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	4b81      	ldr	r3, [pc, #516]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	4b80      	ldr	r3, [pc, #512]	; (8001658 <LCD_Scan_Dir+0x620>)
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	4b7d      	ldr	r3, [pc, #500]	; (8001654 <LCD_Scan_Dir+0x61c>)
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	4b7a      	ldr	r3, [pc, #488]	; (8001654 <LCD_Scan_Dir+0x61c>)
 800146a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146e:	611a      	str	r2, [r3, #16]
            LCD_WR_DATA(0);
 8001470:	4b78      	ldr	r3, [pc, #480]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	4b76      	ldr	r3, [pc, #472]	; (8001654 <LCD_Scan_Dir+0x61c>)
 800147a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147e:	615a      	str	r2, [r3, #20]
 8001480:	4b75      	ldr	r3, [pc, #468]	; (8001658 <LCD_Scan_Dir+0x620>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	4b73      	ldr	r3, [pc, #460]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	615a      	str	r2, [r3, #20]
 800148c:	4b71      	ldr	r3, [pc, #452]	; (8001654 <LCD_Scan_Dir+0x61c>)
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	4b70      	ldr	r3, [pc, #448]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001498:	611a      	str	r2, [r3, #16]
            LCD_WR_DATA((lcddev.width - 1) >> 8);
 800149a:	4b6e      	ldr	r3, [pc, #440]	; (8001654 <LCD_Scan_Dir+0x61c>)
 800149c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	4b6c      	ldr	r3, [pc, #432]	; (8001654 <LCD_Scan_Dir+0x61c>)
 80014a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a8:	615a      	str	r2, [r3, #20]
 80014aa:	4b69      	ldr	r3, [pc, #420]	; (8001650 <LCD_Scan_Dir+0x618>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	121a      	asrs	r2, r3, #8
 80014b2:	4b69      	ldr	r3, [pc, #420]	; (8001658 <LCD_Scan_Dir+0x620>)
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	4b67      	ldr	r3, [pc, #412]	; (8001654 <LCD_Scan_Dir+0x61c>)
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	4b65      	ldr	r3, [pc, #404]	; (8001654 <LCD_Scan_Dir+0x61c>)
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	4b64      	ldr	r3, [pc, #400]	; (8001654 <LCD_Scan_Dir+0x61c>)
 80014c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c8:	611a      	str	r2, [r3, #16]
            LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80014ca:	4b62      	ldr	r3, [pc, #392]	; (8001654 <LCD_Scan_Dir+0x61c>)
 80014cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d0:	611a      	str	r2, [r3, #16]
 80014d2:	4b60      	ldr	r3, [pc, #384]	; (8001654 <LCD_Scan_Dir+0x61c>)
 80014d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d8:	615a      	str	r2, [r3, #20]
 80014da:	4b5d      	ldr	r3, [pc, #372]	; (8001650 <LCD_Scan_Dir+0x618>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	3b01      	subs	r3, #1
 80014e0:	4a5d      	ldr	r2, [pc, #372]	; (8001658 <LCD_Scan_Dir+0x620>)
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	60d3      	str	r3, [r2, #12]
 80014e6:	4b5b      	ldr	r3, [pc, #364]	; (8001654 <LCD_Scan_Dir+0x61c>)
 80014e8:	2280      	movs	r2, #128	; 0x80
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	4b59      	ldr	r3, [pc, #356]	; (8001654 <LCD_Scan_Dir+0x61c>)
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	611a      	str	r2, [r3, #16]
 80014f2:	4b58      	ldr	r3, [pc, #352]	; (8001654 <LCD_Scan_Dir+0x61c>)
 80014f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f8:	611a      	str	r2, [r3, #16]
            LCD_WR_REG(lcddev.setycmd);
 80014fa:	4b55      	ldr	r3, [pc, #340]	; (8001650 <LCD_Scan_Dir+0x618>)
 80014fc:	899b      	ldrh	r3, [r3, #12]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f9fc 	bl	80008fc <LCD_WR_REG>
            LCD_WR_DATA(0);
 8001504:	4b53      	ldr	r3, [pc, #332]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	4b51      	ldr	r3, [pc, #324]	; (8001654 <LCD_Scan_Dir+0x61c>)
 800150e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001512:	615a      	str	r2, [r3, #20]
 8001514:	4b50      	ldr	r3, [pc, #320]	; (8001658 <LCD_Scan_Dir+0x620>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	4b4e      	ldr	r3, [pc, #312]	; (8001654 <LCD_Scan_Dir+0x61c>)
 800151c:	2280      	movs	r2, #128	; 0x80
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	611a      	str	r2, [r3, #16]
 8001526:	4b4b      	ldr	r3, [pc, #300]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152c:	611a      	str	r2, [r3, #16]
            LCD_WR_DATA(0);
 800152e:	4b49      	ldr	r3, [pc, #292]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	4b47      	ldr	r3, [pc, #284]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153c:	615a      	str	r2, [r3, #20]
 800153e:	4b46      	ldr	r3, [pc, #280]	; (8001658 <LCD_Scan_Dir+0x620>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	4b43      	ldr	r3, [pc, #268]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	4b42      	ldr	r3, [pc, #264]	; (8001654 <LCD_Scan_Dir+0x61c>)
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	4b40      	ldr	r3, [pc, #256]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001556:	611a      	str	r2, [r3, #16]
            LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001558:	4b3e      	ldr	r3, [pc, #248]	; (8001654 <LCD_Scan_Dir+0x61c>)
 800155a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	4b3c      	ldr	r3, [pc, #240]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	4b39      	ldr	r3, [pc, #228]	; (8001650 <LCD_Scan_Dir+0x618>)
 800156a:	885b      	ldrh	r3, [r3, #2]
 800156c:	3b01      	subs	r3, #1
 800156e:	121a      	asrs	r2, r3, #8
 8001570:	4b39      	ldr	r3, [pc, #228]	; (8001658 <LCD_Scan_Dir+0x620>)
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	4b37      	ldr	r3, [pc, #220]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	615a      	str	r2, [r3, #20]
 800157a:	4b36      	ldr	r3, [pc, #216]	; (8001654 <LCD_Scan_Dir+0x61c>)
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	4b34      	ldr	r3, [pc, #208]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001586:	611a      	str	r2, [r3, #16]
            LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001588:	4b32      	ldr	r3, [pc, #200]	; (8001654 <LCD_Scan_Dir+0x61c>)
 800158a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800158e:	611a      	str	r2, [r3, #16]
 8001590:	4b30      	ldr	r3, [pc, #192]	; (8001654 <LCD_Scan_Dir+0x61c>)
 8001592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001596:	615a      	str	r2, [r3, #20]
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <LCD_Scan_Dir+0x618>)
 800159a:	885b      	ldrh	r3, [r3, #2]
 800159c:	3b01      	subs	r3, #1
 800159e:	4a2e      	ldr	r2, [pc, #184]	; (8001658 <LCD_Scan_Dir+0x620>)
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	60d3      	str	r3, [r2, #12]
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <LCD_Scan_Dir+0x61c>)
 80015a6:	2280      	movs	r2, #128	; 0x80
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <LCD_Scan_Dir+0x61c>)
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <LCD_Scan_Dir+0x61c>)
 80015b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b6:	611a      	str	r2, [r3, #16]
        if (lcddev.id == 0X5510) {
 80015b8:	e046      	b.n	8001648 <LCD_Scan_Dir+0x610>
        }
    } else {
        switch (dir) {
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b07      	cmp	r3, #7
 80015be:	d836      	bhi.n	800162e <LCD_Scan_Dir+0x5f6>
 80015c0:	a201      	add	r2, pc, #4	; (adr r2, 80015c8 <LCD_Scan_Dir+0x590>)
 80015c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c6:	bf00      	nop
 80015c8:	080015e9 	.word	0x080015e9
 80015cc:	080015f3 	.word	0x080015f3
 80015d0:	080015fd 	.word	0x080015fd
 80015d4:	0800162f 	.word	0x0800162f
 80015d8:	08001607 	.word	0x08001607
 80015dc:	08001611 	.word	0x08001611
 80015e0:	0800161b 	.word	0x0800161b
 80015e4:	08001625 	.word	0x08001625
            case L2R_U2D:	//浠庡乏鍒板彸,浠庝笂鍒颁笅
                regval |= (1 << 5) | (1 << 4) | (0 << 3);
 80015e8:	89fb      	ldrh	r3, [r7, #14]
 80015ea:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80015ee:	81fb      	strh	r3, [r7, #14]
                break;
 80015f0:	e01d      	b.n	800162e <LCD_Scan_Dir+0x5f6>
            case L2R_D2U:	//浠庡乏鍒板彸,浠庝笅鍒颁笂
                regval |= (0 << 5) | (1 << 4) | (0 << 3);
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	f043 0310 	orr.w	r3, r3, #16
 80015f8:	81fb      	strh	r3, [r7, #14]
                break;
 80015fa:	e018      	b.n	800162e <LCD_Scan_Dir+0x5f6>
            case R2L_U2D:	//浠庡彸鍒板乏,浠庝笂鍒颁笅
                regval |= (1 << 5) | (0 << 4) | (0 << 3);
 80015fc:	89fb      	ldrh	r3, [r7, #14]
 80015fe:	f043 0320 	orr.w	r3, r3, #32
 8001602:	81fb      	strh	r3, [r7, #14]
                break;
 8001604:	e013      	b.n	800162e <LCD_Scan_Dir+0x5f6>
            case R2L_D2U:	//浠庡彸鍒板乏,浠庝笅鍒颁笂
                regval |= (0 << 5) | (0 << 4) | (0 << 3);
                break;
            case U2D_L2R:	//浠庝笂鍒颁笅,浠庡乏鍒板彸
                regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800160c:	81fb      	strh	r3, [r7, #14]
                break;
 800160e:	e00e      	b.n	800162e <LCD_Scan_Dir+0x5f6>
            case U2D_R2L:	//浠庝笂鍒颁笅,浠庡彸鍒板乏
                regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001610:	89fb      	ldrh	r3, [r7, #14]
 8001612:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001616:	81fb      	strh	r3, [r7, #14]
                break;
 8001618:	e009      	b.n	800162e <LCD_Scan_Dir+0x5f6>
            case D2U_L2R:	//浠庝笅鍒颁笂,浠庡乏鍒板彸
                regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800161a:	89fb      	ldrh	r3, [r7, #14]
 800161c:	f043 0318 	orr.w	r3, r3, #24
 8001620:	81fb      	strh	r3, [r7, #14]
                break;
 8001622:	e004      	b.n	800162e <LCD_Scan_Dir+0x5f6>
            case D2U_R2L:	//浠庝笅鍒颁笂,浠庡彸鍒板乏
                regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8001624:	89fb      	ldrh	r3, [r7, #14]
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	81fb      	strh	r3, [r7, #14]
                break;
 800162c:	bf00      	nop
        }
        dirreg = 0X03;
 800162e:	2303      	movs	r3, #3
 8001630:	81bb      	strh	r3, [r7, #12]
        regval |= 1 << 12;
 8001632:	89fb      	ldrh	r3, [r7, #14]
 8001634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001638:	81fb      	strh	r3, [r7, #14]
        LCD_WriteReg(dirreg, regval);
 800163a:	89fa      	ldrh	r2, [r7, #14]
 800163c:	89bb      	ldrh	r3, [r7, #12]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff f9e7 	bl	8000a14 <LCD_WriteReg>
    }
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000030 	.word	0x20000030
 8001654:	40011000 	.word	0x40011000
 8001658:	40010c00 	.word	0x40010c00

0800165c <LCD_Fast_DrawPoint>:
    LCD_WriteRAM_Prepare();
    LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
 8001666:	460b      	mov	r3, r1
 8001668:	80bb      	strh	r3, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	807b      	strh	r3, [r7, #2]
    if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800166e:	4b75      	ldr	r3, [pc, #468]	; (8001844 <LCD_Fast_DrawPoint+0x1e8>)
 8001670:	889b      	ldrh	r3, [r3, #4]
 8001672:	f249 3241 	movw	r2, #37697	; 0x9341
 8001676:	4293      	cmp	r3, r2
 8001678:	d005      	beq.n	8001686 <LCD_Fast_DrawPoint+0x2a>
 800167a:	4b72      	ldr	r3, [pc, #456]	; (8001844 <LCD_Fast_DrawPoint+0x1e8>)
 800167c:	889b      	ldrh	r3, [r3, #4]
 800167e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001682:	4293      	cmp	r3, r2
 8001684:	d164      	bne.n	8001750 <LCD_Fast_DrawPoint+0xf4>
        LCD_WR_REG(lcddev.setxcmd);
 8001686:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <LCD_Fast_DrawPoint+0x1e8>)
 8001688:	895b      	ldrh	r3, [r3, #10]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff f936 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(x >> 8);
 8001690:	4b6d      	ldr	r3, [pc, #436]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 8001692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	4b6b      	ldr	r3, [pc, #428]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 800169a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b69      	ldr	r3, [pc, #420]	; (800184c <LCD_Fast_DrawPoint+0x1f0>)
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	4b67      	ldr	r3, [pc, #412]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	4b65      	ldr	r3, [pc, #404]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	4b64      	ldr	r3, [pc, #400]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80016b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016bc:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(x & 0XFF);
 80016be:	4b62      	ldr	r3, [pc, #392]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80016c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c4:	611a      	str	r2, [r3, #16]
 80016c6:	4b60      	ldr	r3, [pc, #384]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80016c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	4a5e      	ldr	r2, [pc, #376]	; (800184c <LCD_Fast_DrawPoint+0x1f0>)
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	60d3      	str	r3, [r2, #12]
 80016d6:	4b5c      	ldr	r3, [pc, #368]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	4b5a      	ldr	r3, [pc, #360]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	611a      	str	r2, [r3, #16]
 80016e2:	4b59      	ldr	r3, [pc, #356]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80016e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e8:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(lcddev.setycmd);
 80016ea:	4b56      	ldr	r3, [pc, #344]	; (8001844 <LCD_Fast_DrawPoint+0x1e8>)
 80016ec:	899b      	ldrh	r3, [r3, #12]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff f904 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(y >> 8);
 80016f4:	4b54      	ldr	r3, [pc, #336]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80016f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	4b52      	ldr	r3, [pc, #328]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80016fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001702:	615a      	str	r2, [r3, #20]
 8001704:	88bb      	ldrh	r3, [r7, #4]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b50      	ldr	r3, [pc, #320]	; (800184c <LCD_Fast_DrawPoint+0x1f0>)
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	4b4e      	ldr	r3, [pc, #312]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 800171c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001720:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(y & 0XFF);
 8001722:	4b49      	ldr	r3, [pc, #292]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 8001724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001728:	611a      	str	r2, [r3, #16]
 800172a:	4b47      	ldr	r3, [pc, #284]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 800172c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001730:	615a      	str	r2, [r3, #20]
 8001732:	88bb      	ldrh	r3, [r7, #4]
 8001734:	4a45      	ldr	r2, [pc, #276]	; (800184c <LCD_Fast_DrawPoint+0x1f0>)
 8001736:	b2db      	uxtb	r3, r3
 8001738:	60d3      	str	r3, [r2, #12]
 800173a:	4b43      	ldr	r3, [pc, #268]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	615a      	str	r2, [r3, #20]
 8001740:	4b41      	ldr	r3, [pc, #260]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	4b40      	ldr	r3, [pc, #256]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 8001748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	e1e6      	b.n	8001b1e <LCD_Fast_DrawPoint+0x4c2>
    } else if (lcddev.id == 0X5510) {
 8001750:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <LCD_Fast_DrawPoint+0x1e8>)
 8001752:	889b      	ldrh	r3, [r3, #4]
 8001754:	f245 5210 	movw	r2, #21776	; 0x5510
 8001758:	4293      	cmp	r3, r2
 800175a:	d179      	bne.n	8001850 <LCD_Fast_DrawPoint+0x1f4>
        LCD_WR_REG(lcddev.setxcmd);
 800175c:	4b39      	ldr	r3, [pc, #228]	; (8001844 <LCD_Fast_DrawPoint+0x1e8>)
 800175e:	895b      	ldrh	r3, [r3, #10]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff f8cb 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(x >> 8);
 8001766:	4b38      	ldr	r3, [pc, #224]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 8001768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800176c:	611a      	str	r2, [r3, #16]
 800176e:	4b36      	ldr	r3, [pc, #216]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 8001770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001774:	615a      	str	r2, [r3, #20]
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b29a      	uxth	r2, r3
 800177c:	4b33      	ldr	r3, [pc, #204]	; (800184c <LCD_Fast_DrawPoint+0x1f0>)
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	4b31      	ldr	r3, [pc, #196]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	615a      	str	r2, [r3, #20]
 8001786:	4b30      	ldr	r3, [pc, #192]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 8001788:	2280      	movs	r2, #128	; 0x80
 800178a:	611a      	str	r2, [r3, #16]
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 800178e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001792:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(lcddev.setxcmd + 1);
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <LCD_Fast_DrawPoint+0x1e8>)
 8001796:	895b      	ldrh	r3, [r3, #10]
 8001798:	3301      	adds	r3, #1
 800179a:	b29b      	uxth	r3, r3
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff f8ad 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(x & 0XFF);
 80017a2:	4b29      	ldr	r3, [pc, #164]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80017a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	4b27      	ldr	r3, [pc, #156]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80017ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	4a25      	ldr	r2, [pc, #148]	; (800184c <LCD_Fast_DrawPoint+0x1f0>)
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	60d3      	str	r3, [r2, #12]
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	615a      	str	r2, [r3, #20]
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	611a      	str	r2, [r3, #16]
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80017c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017cc:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(lcddev.setycmd);
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <LCD_Fast_DrawPoint+0x1e8>)
 80017d0:	899b      	ldrh	r3, [r3, #12]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f892 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(y >> 8);
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80017da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017de:	611a      	str	r2, [r3, #16]
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80017e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	88bb      	ldrh	r3, [r7, #4]
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <LCD_Fast_DrawPoint+0x1f0>)
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	615a      	str	r2, [r3, #20]
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 8001800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001804:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(lcddev.setycmd + 1);
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <LCD_Fast_DrawPoint+0x1e8>)
 8001808:	899b      	ldrh	r3, [r3, #12]
 800180a:	3301      	adds	r3, #1
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff f874 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(y & 0XFF);
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 8001816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 800181e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001822:	615a      	str	r2, [r3, #20]
 8001824:	88bb      	ldrh	r3, [r7, #4]
 8001826:	4a09      	ldr	r2, [pc, #36]	; (800184c <LCD_Fast_DrawPoint+0x1f0>)
 8001828:	b2db      	uxtb	r3, r3
 800182a:	60d3      	str	r3, [r2, #12]
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	615a      	str	r2, [r3, #20]
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	611a      	str	r2, [r3, #16]
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <LCD_Fast_DrawPoint+0x1ec>)
 800183a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	e16d      	b.n	8001b1e <LCD_Fast_DrawPoint+0x4c2>
 8001842:	bf00      	nop
 8001844:	20000030 	.word	0x20000030
 8001848:	40011000 	.word	0x40011000
 800184c:	40010c00 	.word	0x40010c00
    } else if (lcddev.id == 0X1963) {
 8001850:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <LCD_Fast_DrawPoint+0x398>)
 8001852:	889b      	ldrh	r3, [r3, #4]
 8001854:	f641 1263 	movw	r2, #6499	; 0x1963
 8001858:	4293      	cmp	r3, r2
 800185a:	f040 80d1 	bne.w	8001a00 <LCD_Fast_DrawPoint+0x3a4>
        if (lcddev.dir == 0)
 800185e:	4b65      	ldr	r3, [pc, #404]	; (80019f4 <LCD_Fast_DrawPoint+0x398>)
 8001860:	799b      	ldrb	r3, [r3, #6]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d106      	bne.n	8001874 <LCD_Fast_DrawPoint+0x218>
            x = lcddev.width - 1 - x;
 8001866:	4b63      	ldr	r3, [pc, #396]	; (80019f4 <LCD_Fast_DrawPoint+0x398>)
 8001868:	881a      	ldrh	r2, [r3, #0]
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	b29b      	uxth	r3, r3
 8001870:	3b01      	subs	r3, #1
 8001872:	80fb      	strh	r3, [r7, #6]
        LCD_WR_REG(lcddev.setxcmd);
 8001874:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <LCD_Fast_DrawPoint+0x398>)
 8001876:	895b      	ldrh	r3, [r3, #10]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff f83f 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(x >> 8);
 800187e:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	4b5c      	ldr	r3, [pc, #368]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188c:	615a      	str	r2, [r3, #20]
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b59      	ldr	r3, [pc, #356]	; (80019fc <LCD_Fast_DrawPoint+0x3a0>)
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	4b57      	ldr	r3, [pc, #348]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	615a      	str	r2, [r3, #20]
 800189e:	4b56      	ldr	r3, [pc, #344]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	4b54      	ldr	r3, [pc, #336]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80018a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018aa:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(x & 0XFF);
 80018ac:	4b52      	ldr	r3, [pc, #328]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80018ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b2:	611a      	str	r2, [r3, #16]
 80018b4:	4b50      	ldr	r3, [pc, #320]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80018b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ba:	615a      	str	r2, [r3, #20]
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	4a4f      	ldr	r2, [pc, #316]	; (80019fc <LCD_Fast_DrawPoint+0x3a0>)
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	60d3      	str	r3, [r2, #12]
 80018c4:	4b4c      	ldr	r3, [pc, #304]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	615a      	str	r2, [r3, #20]
 80018ca:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	4b49      	ldr	r3, [pc, #292]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80018d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d6:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(x >> 8);
 80018d8:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80018da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018de:	611a      	str	r2, [r3, #16]
 80018e0:	4b45      	ldr	r3, [pc, #276]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80018e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	4b43      	ldr	r3, [pc, #268]	; (80019fc <LCD_Fast_DrawPoint+0x3a0>)
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80018f4:	2280      	movs	r2, #128	; 0x80
 80018f6:	615a      	str	r2, [r3, #20]
 80018f8:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	611a      	str	r2, [r3, #16]
 80018fe:	4b3e      	ldr	r3, [pc, #248]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001904:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(x & 0XFF);
 8001906:	4b3c      	ldr	r3, [pc, #240]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001914:	615a      	str	r2, [r3, #20]
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	4a38      	ldr	r2, [pc, #224]	; (80019fc <LCD_Fast_DrawPoint+0x3a0>)
 800191a:	b2db      	uxtb	r3, r3
 800191c:	60d3      	str	r3, [r2, #12]
 800191e:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	615a      	str	r2, [r3, #20]
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 800192c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001930:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(lcddev.setycmd);
 8001932:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <LCD_Fast_DrawPoint+0x398>)
 8001934:	899b      	ldrh	r3, [r3, #12]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe ffe0 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(y >> 8);
 800193c:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 800193e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194a:	615a      	str	r2, [r3, #20]
 800194c:	88bb      	ldrh	r3, [r7, #4]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <LCD_Fast_DrawPoint+0x3a0>)
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	611a      	str	r2, [r3, #16]
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001968:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(y & 0XFF);
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 800196c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001978:	615a      	str	r2, [r3, #20]
 800197a:	88bb      	ldrh	r3, [r7, #4]
 800197c:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <LCD_Fast_DrawPoint+0x3a0>)
 800197e:	b2db      	uxtb	r3, r3
 8001980:	60d3      	str	r3, [r2, #12]
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	615a      	str	r2, [r3, #20]
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	611a      	str	r2, [r3, #16]
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001994:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(y >> 8);
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 8001998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80019a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	88bb      	ldrh	r3, [r7, #4]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <LCD_Fast_DrawPoint+0x3a0>)
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	615a      	str	r2, [r3, #20]
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	611a      	str	r2, [r3, #16]
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80019be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c2:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(y & 0XFF);
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80019c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80019ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d2:	615a      	str	r2, [r3, #20]
 80019d4:	88bb      	ldrh	r3, [r7, #4]
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <LCD_Fast_DrawPoint+0x3a0>)
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	60d3      	str	r3, [r2, #12]
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	615a      	str	r2, [r3, #20]
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	611a      	str	r2, [r3, #16]
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <LCD_Fast_DrawPoint+0x39c>)
 80019ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ee:	611a      	str	r2, [r3, #16]
 80019f0:	e095      	b.n	8001b1e <LCD_Fast_DrawPoint+0x4c2>
 80019f2:	bf00      	nop
 80019f4:	20000030 	.word	0x20000030
 80019f8:	40011000 	.word	0x40011000
 80019fc:	40010c00 	.word	0x40010c00
    } else if (lcddev.id == 0X6804) {
 8001a00:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <LCD_Fast_DrawPoint+0x520>)
 8001a02:	889b      	ldrh	r3, [r3, #4]
 8001a04:	f646 0204 	movw	r2, #26628	; 0x6804
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d16f      	bne.n	8001aec <LCD_Fast_DrawPoint+0x490>
        if (lcddev.dir == 1)
 8001a0c:	4b5b      	ldr	r3, [pc, #364]	; (8001b7c <LCD_Fast_DrawPoint+0x520>)
 8001a0e:	799b      	ldrb	r3, [r3, #6]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d106      	bne.n	8001a22 <LCD_Fast_DrawPoint+0x3c6>
            x = lcddev.width - 1 - x;	//妯睆鏃跺鐞�
 8001a14:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <LCD_Fast_DrawPoint+0x520>)
 8001a16:	881a      	ldrh	r2, [r3, #0]
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	80fb      	strh	r3, [r7, #6]
        LCD_WR_REG(lcddev.setxcmd);
 8001a22:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <LCD_Fast_DrawPoint+0x520>)
 8001a24:	895b      	ldrh	r3, [r3, #10]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe ff68 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(x >> 8);
 8001a2c:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a32:	611a      	str	r2, [r3, #16]
 8001a34:	4b52      	ldr	r3, [pc, #328]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a3a:	615a      	str	r2, [r3, #20]
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	4b50      	ldr	r3, [pc, #320]	; (8001b84 <LCD_Fast_DrawPoint+0x528>)
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	4b4e      	ldr	r3, [pc, #312]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	615a      	str	r2, [r3, #20]
 8001a4c:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a58:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(x & 0XFF);
 8001a5a:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a60:	611a      	str	r2, [r3, #16]
 8001a62:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a68:	615a      	str	r2, [r3, #20]
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	4a45      	ldr	r2, [pc, #276]	; (8001b84 <LCD_Fast_DrawPoint+0x528>)
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	60d3      	str	r3, [r2, #12]
 8001a72:	4b43      	ldr	r3, [pc, #268]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	615a      	str	r2, [r3, #20]
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	611a      	str	r2, [r3, #16]
 8001a7e:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a84:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(lcddev.setycmd);
 8001a86:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <LCD_Fast_DrawPoint+0x520>)
 8001a88:	899b      	ldrh	r3, [r3, #12]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe ff36 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(y >> 8);
 8001a90:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a96:	611a      	str	r2, [r3, #16]
 8001a98:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9e:	615a      	str	r2, [r3, #20]
 8001aa0:	88bb      	ldrh	r3, [r7, #4]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <LCD_Fast_DrawPoint+0x528>)
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	615a      	str	r2, [r3, #20]
 8001ab0:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001ab2:	2280      	movs	r2, #128	; 0x80
 8001ab4:	611a      	str	r2, [r3, #16]
 8001ab6:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abc:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(y & 0XFF);
 8001abe:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac4:	611a      	str	r2, [r3, #16]
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001acc:	615a      	str	r2, [r3, #20]
 8001ace:	88bb      	ldrh	r3, [r7, #4]
 8001ad0:	4a2c      	ldr	r2, [pc, #176]	; (8001b84 <LCD_Fast_DrawPoint+0x528>)
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	60d3      	str	r3, [r2, #12]
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	615a      	str	r2, [r3, #20]
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae8:	611a      	str	r2, [r3, #16]
 8001aea:	e018      	b.n	8001b1e <LCD_Fast_DrawPoint+0x4c2>
    } else {
        if (lcddev.dir == 1)
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <LCD_Fast_DrawPoint+0x520>)
 8001aee:	799b      	ldrb	r3, [r3, #6]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d106      	bne.n	8001b02 <LCD_Fast_DrawPoint+0x4a6>
            x = lcddev.width - 1 - x;	//妯睆鍏跺疄灏辨槸璋冭浆x,y鍧愭爣
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <LCD_Fast_DrawPoint+0x520>)
 8001af6:	881a      	ldrh	r2, [r3, #0]
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	80fb      	strh	r3, [r7, #6]
        LCD_WriteReg(lcddev.setxcmd, x);
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <LCD_Fast_DrawPoint+0x520>)
 8001b04:	895b      	ldrh	r3, [r3, #10]
 8001b06:	88fa      	ldrh	r2, [r7, #6]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe ff82 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(lcddev.setycmd, y);
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <LCD_Fast_DrawPoint+0x520>)
 8001b12:	899b      	ldrh	r3, [r3, #12]
 8001b14:	88ba      	ldrh	r2, [r7, #4]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe ff7b 	bl	8000a14 <LCD_WriteReg>
    }
    LCD_RS_CLR;
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b24:	615a      	str	r2, [r3, #20]
    LCD_CS_CLR;
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2c:	615a      	str	r2, [r3, #20]
    DATAOUT(lcddev.wramcmd);	//鍐欐寚浠�
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <LCD_Fast_DrawPoint+0x520>)
 8001b30:	891a      	ldrh	r2, [r3, #8]
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <LCD_Fast_DrawPoint+0x528>)
 8001b34:	60da      	str	r2, [r3, #12]
    LCD_WR_CLR;
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	615a      	str	r2, [r3, #20]
    LCD_WR_SET;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001b3e:	2280      	movs	r2, #128	; 0x80
 8001b40:	611a      	str	r2, [r3, #16]
    LCD_CS_SET;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b48:	611a      	str	r2, [r3, #16]
    LCD_WR_DATA(color);		//鍐欐暟鎹�
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b50:	611a      	str	r2, [r3, #16]
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b58:	615a      	str	r2, [r3, #20]
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <LCD_Fast_DrawPoint+0x528>)
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	60d3      	str	r3, [r2, #12]
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001b62:	2280      	movs	r2, #128	; 0x80
 8001b64:	615a      	str	r2, [r3, #20]
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	611a      	str	r2, [r3, #16]
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <LCD_Fast_DrawPoint+0x524>)
 8001b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b72:	611a      	str	r2, [r3, #16]
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000030 	.word	0x20000030
 8001b80:	40011000 	.word	0x40011000
 8001b84:	40010c00 	.word	0x40010c00

08001b88 <LCD_SSD_BackLightSet>:
//SSD1963 鑳屽厜璁剧疆
//pwm:鑳屽厜绛夌骇,0~100.瓒婂ぇ瓒婁寒.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
    LCD_WR_REG(0xBE);	//閰嶇疆PWM杈撳嚭
 8001b92:	20be      	movs	r0, #190	; 0xbe
 8001b94:	f7fe feb2 	bl	80008fc <LCD_WR_REG>
    LCD_WR_DATA(0x05);	//1璁剧疆PWM棰戠巼
 8001b98:	4b4b      	ldr	r3, [pc, #300]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b9e:	611a      	str	r2, [r3, #16]
 8001ba0:	4b49      	ldr	r3, [pc, #292]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba6:	615a      	str	r2, [r3, #20]
 8001ba8:	4b48      	ldr	r3, [pc, #288]	; (8001ccc <LCD_SSD_BackLightSet+0x144>)
 8001baa:	2205      	movs	r2, #5
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	615a      	str	r2, [r3, #20]
 8001bb4:	4b44      	ldr	r3, [pc, #272]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	611a      	str	r2, [r3, #16]
 8001bba:	4b43      	ldr	r3, [pc, #268]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc0:	611a      	str	r2, [r3, #16]
    LCD_WR_DATA(pwm * 2.55);	//2璁剧疆PWM鍗犵┖姣�
 8001bc2:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc8:	611a      	str	r2, [r3, #16]
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd0:	615a      	str	r2, [r3, #20]
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fda3 	bl	8000720 <__aeabi_i2d>
 8001bda:	a339      	add	r3, pc, #228	; (adr r3, 8001cc0 <LCD_SSD_BackLightSet+0x138>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f7fe fb22 	bl	8000228 <__aeabi_dmul>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4c38      	ldr	r4, [pc, #224]	; (8001ccc <LCD_SSD_BackLightSet+0x144>)
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	f7fe fe01 	bl	80007f4 <__aeabi_d2uiz>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	60e3      	str	r3, [r4, #12]
 8001bf6:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	615a      	str	r2, [r3, #20]
 8001bfc:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c08:	611a      	str	r2, [r3, #16]
    LCD_WR_DATA(0x01);	//3璁剧疆C
 8001c0a:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c18:	615a      	str	r2, [r3, #20]
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <LCD_SSD_BackLightSet+0x144>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	615a      	str	r2, [r3, #20]
 8001c26:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	611a      	str	r2, [r3, #16]
 8001c2c:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c32:	611a      	str	r2, [r3, #16]
    LCD_WR_DATA(0xFF);	//4璁剧疆D
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c42:	615a      	str	r2, [r3, #20]
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <LCD_SSD_BackLightSet+0x144>)
 8001c46:	22ff      	movs	r2, #255	; 0xff
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c4c:	2280      	movs	r2, #128	; 0x80
 8001c4e:	615a      	str	r2, [r3, #20]
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c52:	2280      	movs	r2, #128	; 0x80
 8001c54:	611a      	str	r2, [r3, #16]
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5c:	611a      	str	r2, [r3, #16]
    LCD_WR_DATA(0x00);	//5璁剧疆E
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c64:	611a      	str	r2, [r3, #16]
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6c:	615a      	str	r2, [r3, #20]
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <LCD_SSD_BackLightSet+0x144>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	615a      	str	r2, [r3, #20]
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c7c:	2280      	movs	r2, #128	; 0x80
 8001c7e:	611a      	str	r2, [r3, #16]
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c86:	611a      	str	r2, [r3, #16]
    LCD_WR_DATA(0x00);	//6璁剧疆F
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c8e:	611a      	str	r2, [r3, #16]
 8001c90:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c96:	615a      	str	r2, [r3, #20]
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <LCD_SSD_BackLightSet+0x144>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	615a      	str	r2, [r3, #20]
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001ca6:	2280      	movs	r2, #128	; 0x80
 8001ca8:	611a      	str	r2, [r3, #16]
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <LCD_SSD_BackLightSet+0x140>)
 8001cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb0:	611a      	str	r2, [r3, #16]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd90      	pop	{r4, r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	66666666 	.word	0x66666666
 8001cc4:	40046666 	.word	0x40046666
 8001cc8:	40011000 	.word	0x40011000
 8001ccc:	40010c00 	.word	0x40010c00

08001cd0 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
    if (dir == 0)			//绔栧睆
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d177      	bne.n	8001dd0 <LCD_Display_Dir+0x100>
    {
        lcddev.dir = 0;	//绔栧睆
 8001ce0:	4b80      	ldr	r3, [pc, #512]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	719a      	strb	r2, [r3, #6]
        lcddev.width = 240;
 8001ce6:	4b7f      	ldr	r3, [pc, #508]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001ce8:	22f0      	movs	r2, #240	; 0xf0
 8001cea:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 8001cec:	4b7d      	ldr	r3, [pc, #500]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001cee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cf2:	805a      	strh	r2, [r3, #2]
        if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001cf4:	4b7b      	ldr	r3, [pc, #492]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001cf6:	889b      	ldrh	r3, [r3, #4]
 8001cf8:	f249 3241 	movw	r2, #37697	; 0x9341
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00b      	beq.n	8001d18 <LCD_Display_Dir+0x48>
 8001d00:	4b78      	ldr	r3, [pc, #480]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d02:	889b      	ldrh	r3, [r3, #4]
 8001d04:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d005      	beq.n	8001d18 <LCD_Display_Dir+0x48>
 8001d0c:	4b75      	ldr	r3, [pc, #468]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d0e:	889b      	ldrh	r3, [r3, #4]
 8001d10:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d11e      	bne.n	8001d56 <LCD_Display_Dir+0x86>
            lcddev.wramcmd = 0X2C;
 8001d18:	4b72      	ldr	r3, [pc, #456]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d1a:	222c      	movs	r2, #44	; 0x2c
 8001d1c:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001d1e:	4b71      	ldr	r3, [pc, #452]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d20:	222a      	movs	r2, #42	; 0x2a
 8001d22:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001d24:	4b6f      	ldr	r3, [pc, #444]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d26:	222b      	movs	r2, #43	; 0x2b
 8001d28:	819a      	strh	r2, [r3, #12]
            if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001d2a:	4b6e      	ldr	r3, [pc, #440]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d2c:	889b      	ldrh	r3, [r3, #4]
 8001d2e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d006      	beq.n	8001d44 <LCD_Display_Dir+0x74>
 8001d36:	4b6b      	ldr	r3, [pc, #428]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d38:	889b      	ldrh	r3, [r3, #4]
 8001d3a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	f040 80c7 	bne.w	8001ed2 <LCD_Display_Dir+0x202>
                lcddev.width = 320;
 8001d44:	4b67      	ldr	r3, [pc, #412]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d4a:	801a      	strh	r2, [r3, #0]
                lcddev.height = 480;
 8001d4c:	4b65      	ldr	r3, [pc, #404]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d4e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d52:	805a      	strh	r2, [r3, #2]
            if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001d54:	e0bd      	b.n	8001ed2 <LCD_Display_Dir+0x202>
            }
        } else if (lcddev.id == 0x5510) {
 8001d56:	4b63      	ldr	r3, [pc, #396]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d58:	889b      	ldrh	r3, [r3, #4]
 8001d5a:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d114      	bne.n	8001d8c <LCD_Display_Dir+0xbc>
            lcddev.wramcmd = 0X2C00;
 8001d62:	4b60      	ldr	r3, [pc, #384]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d64:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001d68:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001d6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d6c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001d70:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001d72:	4b5c      	ldr	r3, [pc, #368]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d74:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001d78:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8001d7a:	4b5a      	ldr	r3, [pc, #360]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d80:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001d82:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d84:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d88:	805a      	strh	r2, [r3, #2]
 8001d8a:	e0a3      	b.n	8001ed4 <LCD_Display_Dir+0x204>
        } else if (lcddev.id == 0X1963) {
 8001d8c:	4b55      	ldr	r3, [pc, #340]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d8e:	889b      	ldrh	r3, [r3, #4]
 8001d90:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d111      	bne.n	8001dbc <LCD_Display_Dir+0xec>
            lcddev.wramcmd = 0X2C;	//璁剧疆鍐欏叆GRAM鐨勬寚浠�
 8001d98:	4b52      	ldr	r3, [pc, #328]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001d9a:	222c      	movs	r2, #44	; 0x2c
 8001d9c:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;	//璁剧疆鍐橷鍧愭爣鎸囦护
 8001d9e:	4b51      	ldr	r3, [pc, #324]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001da0:	222b      	movs	r2, #43	; 0x2b
 8001da2:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;	//璁剧疆鍐橸鍧愭爣鎸囦护
 8001da4:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001da6:	222a      	movs	r2, #42	; 0x2a
 8001da8:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;		//璁剧疆瀹藉害480
 8001daa:	4b4e      	ldr	r3, [pc, #312]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001dac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001db0:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;		//璁剧疆楂樺害800
 8001db2:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001db4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001db8:	805a      	strh	r2, [r3, #2]
 8001dba:	e08b      	b.n	8001ed4 <LCD_Display_Dir+0x204>
        } else {
            lcddev.wramcmd = 0X22;
 8001dbc:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001dbe:	2222      	movs	r2, #34	; 0x22
 8001dc0:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X20;
 8001dc2:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X21;
 8001dc8:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001dca:	2221      	movs	r2, #33	; 0x21
 8001dcc:	819a      	strh	r2, [r3, #12]
 8001dce:	e081      	b.n	8001ed4 <LCD_Display_Dir+0x204>
        }
    } else 				//妯睆
    {
        lcddev.dir = 1;	//妯睆
 8001dd0:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	719a      	strb	r2, [r3, #6]
        lcddev.width = 320;
 8001dd6:	4b43      	ldr	r3, [pc, #268]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001dd8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ddc:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001de0:	22f0      	movs	r2, #240	; 0xf0
 8001de2:	805a      	strh	r2, [r3, #2]
        if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001de4:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001de6:	889b      	ldrh	r3, [r3, #4]
 8001de8:	f249 3241 	movw	r2, #37697	; 0x9341
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d005      	beq.n	8001dfc <LCD_Display_Dir+0x12c>
 8001df0:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001df2:	889b      	ldrh	r3, [r3, #4]
 8001df4:	f245 3210 	movw	r2, #21264	; 0x5310
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d109      	bne.n	8001e10 <LCD_Display_Dir+0x140>
            lcddev.wramcmd = 0X2C;
 8001dfc:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001dfe:	222c      	movs	r2, #44	; 0x2c
 8001e00:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e04:	222a      	movs	r2, #42	; 0x2a
 8001e06:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e0a:	222b      	movs	r2, #43	; 0x2b
 8001e0c:	819a      	strh	r2, [r3, #12]
 8001e0e:	e04b      	b.n	8001ea8 <LCD_Display_Dir+0x1d8>
        } else if (lcddev.id == 0X6804) {
 8001e10:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e12:	889b      	ldrh	r3, [r3, #4]
 8001e14:	f646 0204 	movw	r2, #26628	; 0x6804
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d109      	bne.n	8001e30 <LCD_Display_Dir+0x160>
            lcddev.wramcmd = 0X2C;
 8001e1c:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e1e:	222c      	movs	r2, #44	; 0x2c
 8001e20:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;
 8001e22:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e24:	222b      	movs	r2, #43	; 0x2b
 8001e26:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;
 8001e28:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e2a:	222a      	movs	r2, #42	; 0x2a
 8001e2c:	819a      	strh	r2, [r3, #12]
 8001e2e:	e03b      	b.n	8001ea8 <LCD_Display_Dir+0x1d8>
        } else if (lcddev.id == 0x5510) {
 8001e30:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e32:	889b      	ldrh	r3, [r3, #4]
 8001e34:	f245 5210 	movw	r2, #21776	; 0x5510
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d114      	bne.n	8001e66 <LCD_Display_Dir+0x196>
            lcddev.wramcmd = 0X2C00;
 8001e3c:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e3e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001e42:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e46:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001e4a:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e4e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001e52:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e56:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e5a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e5e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e62:	805a      	strh	r2, [r3, #2]
 8001e64:	e020      	b.n	8001ea8 <LCD_Display_Dir+0x1d8>
        } else if (lcddev.id == 0X1963) {
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e68:	889b      	ldrh	r3, [r3, #4]
 8001e6a:	f641 1263 	movw	r2, #6499	; 0x1963
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d111      	bne.n	8001e96 <LCD_Display_Dir+0x1c6>
            lcddev.wramcmd = 0X2C;	//璁剧疆鍐欏叆GRAM鐨勬寚浠�
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e74:	222c      	movs	r2, #44	; 0x2c
 8001e76:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;	//璁剧疆鍐橷鍧愭爣鎸囦护
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e7a:	222a      	movs	r2, #42	; 0x2a
 8001e7c:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;	//璁剧疆鍐橸鍧愭爣鎸囦护
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e80:	222b      	movs	r2, #43	; 0x2b
 8001e82:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;		//璁剧疆瀹藉害800
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e86:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e8a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;		//璁剧疆楂樺害480
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e8e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e92:	805a      	strh	r2, [r3, #2]
 8001e94:	e008      	b.n	8001ea8 <LCD_Display_Dir+0x1d8>
        } else {
            lcddev.wramcmd = 0X22;
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e98:	2222      	movs	r2, #34	; 0x22
 8001e9a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X21;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001e9e:	2221      	movs	r2, #33	; 0x21
 8001ea0:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X20;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	819a      	strh	r2, [r3, #12]
        }
        if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001eaa:	889b      	ldrh	r3, [r3, #4]
 8001eac:	f646 0204 	movw	r2, #26628	; 0x6804
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d005      	beq.n	8001ec0 <LCD_Display_Dir+0x1f0>
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001eb6:	889b      	ldrh	r3, [r3, #4]
 8001eb8:	f245 3210 	movw	r2, #21264	; 0x5310
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d109      	bne.n	8001ed4 <LCD_Display_Dir+0x204>
            lcddev.width = 480;
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001ec2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ec6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <LCD_Display_Dir+0x214>)
 8001eca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ece:	805a      	strh	r2, [r3, #2]
 8001ed0:	e000      	b.n	8001ed4 <LCD_Display_Dir+0x204>
            if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001ed2:	bf00      	nop
        }
    }
    LCD_Scan_Dir(DFT_SCAN_DIR);	//榛樿鎵弿鏂瑰悜
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff f8af 	bl	8001038 <LCD_Scan_Dir>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000030 	.word	0x20000030

08001ee8 <LCD_Init>:
    }
}
//鍒濆鍖杔cd
//璇ュ垵濮嬪寲鍑芥暟鍙互鍒濆鍖栧悇绉岮LIENTEK鍑哄搧鐨凩CD娑叉櫠灞�
//鏈嚱鏁板崰鐢ㄨ緝澶lash,鐢ㄦ埛鍙互鏍规嵁鑷繁鐨勫疄闄呮儏鍐�,鍒犳帀鏈敤鍒扮殑LCD鍒濆鍖栦唬鐮�.浠ヨ妭鐪佺┖闂�.
void LCD_Init(void) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;

    __HAL_RCC_GPIOB_CLK_ENABLE();           	//寮€鍚疓PIOB鏃堕挓
 8001eee:	4b90      	ldr	r3, [pc, #576]	; (8002130 <LCD_Init+0x248>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	4a8f      	ldr	r2, [pc, #572]	; (8002130 <LCD_Init+0x248>)
 8001ef4:	f043 0308 	orr.w	r3, r3, #8
 8001ef8:	6193      	str	r3, [r2, #24]
 8001efa:	4b8d      	ldr	r3, [pc, #564]	; (8002130 <LCD_Init+0x248>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();           	//寮€鍚疓PIOC鏃堕挓
 8001f06:	4b8a      	ldr	r3, [pc, #552]	; (8002130 <LCD_Init+0x248>)
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	4a89      	ldr	r2, [pc, #548]	; (8002130 <LCD_Init+0x248>)
 8001f0c:	f043 0310 	orr.w	r3, r3, #16
 8001f10:	6193      	str	r3, [r2, #24]
 8001f12:	4b87      	ldr	r3, [pc, #540]	; (8002130 <LCD_Init+0x248>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]

    //PC6,7,8,9,10
    GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001f1e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001f22:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
                       | GPIO_PIN_10;
    GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//鎺ㄦ尳杈撳嚭
 8001f24:	2301      	movs	r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Pull = GPIO_PULLUP;          	//涓婃媺
 8001f28:	2301      	movs	r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//楂橀€�
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	4619      	mov	r1, r3
 8001f36:	487f      	ldr	r0, [pc, #508]	; (8002134 <LCD_Init+0x24c>)
 8001f38:	f004 fd20 	bl	800697c <HAL_GPIO_Init>

    //PB0~15
    GPIO_Initure.Pin = GPIO_PIN_All;				//PB鎺ㄦ尳杈撳嚭
 8001f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f40:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	4619      	mov	r1, r3
 8001f48:	487b      	ldr	r0, [pc, #492]	; (8002138 <LCD_Init+0x250>)
 8001f4a:	f004 fd17 	bl	800697c <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//绂佹JTAG

    HAL_Delay(50); // delay 50 ms
 8001f4e:	2032      	movs	r0, #50	; 0x32
 8001f50:	f004 faa0 	bl	8006494 <HAL_Delay>
    LCD_WriteReg(0x0000, 0x0001);
 8001f54:	2101      	movs	r1, #1
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7fe fd5c 	bl	8000a14 <LCD_WriteReg>
    HAL_Delay(50); // delay 50 ms
 8001f5c:	2032      	movs	r0, #50	; 0x32
 8001f5e:	f004 fa99 	bl	8006494 <HAL_Delay>
    lcddev.id = LCD_ReadReg(0x0000);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7fe fd80 	bl	8000a68 <LCD_ReadReg>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b73      	ldr	r3, [pc, #460]	; (800213c <LCD_Init+0x254>)
 8001f6e:	809a      	strh	r2, [r3, #4]
    if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //璇诲埌ID涓嶆纭�,鏂板lcddev.id==0X9300鍒ゆ柇锛屽洜涓�9341鍦ㄦ湭琚浣嶇殑鎯呭喌涓嬩細琚鎴�9300
 8001f70:	4b72      	ldr	r3, [pc, #456]	; (800213c <LCD_Init+0x254>)
 8001f72:	889b      	ldrh	r3, [r3, #4]
 8001f74:	2bfe      	cmp	r3, #254	; 0xfe
 8001f76:	d90b      	bls.n	8001f90 <LCD_Init+0xa8>
 8001f78:	4b70      	ldr	r3, [pc, #448]	; (800213c <LCD_Init+0x254>)
 8001f7a:	889b      	ldrh	r3, [r3, #4]
 8001f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d005      	beq.n	8001f90 <LCD_Init+0xa8>
 8001f84:	4b6d      	ldr	r3, [pc, #436]	; (800213c <LCD_Init+0x254>)
 8001f86:	889b      	ldrh	r3, [r3, #4]
 8001f88:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001f8c:	f040 80c8 	bne.w	8002120 <LCD_Init+0x238>
    {
        //灏濊瘯9341 ID鐨勮鍙�
        LCD_WR_REG(0XD3);
 8001f90:	20d3      	movs	r0, #211	; 0xd3
 8001f92:	f7fe fcb3 	bl	80008fc <LCD_WR_REG>
        LCD_RD_DATA(); 				//dummy read
 8001f96:	f7fe fcf9 	bl	800098c <LCD_RD_DATA>
        LCD_RD_DATA();   	    	//璇诲埌0X00
 8001f9a:	f7fe fcf7 	bl	800098c <LCD_RD_DATA>
        lcddev.id = LCD_RD_DATA();   	//璇诲彇93
 8001f9e:	f7fe fcf5 	bl	800098c <LCD_RD_DATA>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b65      	ldr	r3, [pc, #404]	; (800213c <LCD_Init+0x254>)
 8001fa8:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8001faa:	4b64      	ldr	r3, [pc, #400]	; (800213c <LCD_Init+0x254>)
 8001fac:	889b      	ldrh	r3, [r3, #4]
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	4b62      	ldr	r3, [pc, #392]	; (800213c <LCD_Init+0x254>)
 8001fb4:	809a      	strh	r2, [r3, #4]
        lcddev.id |= LCD_RD_DATA();  	//璇诲彇41
 8001fb6:	f7fe fce9 	bl	800098c <LCD_RD_DATA>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b5f      	ldr	r3, [pc, #380]	; (800213c <LCD_Init+0x254>)
 8001fc0:	889b      	ldrh	r3, [r3, #4]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	4b5d      	ldr	r3, [pc, #372]	; (800213c <LCD_Init+0x254>)
 8001fc8:	809a      	strh	r2, [r3, #4]
        if (lcddev.id != 0X9341)		//闈�9341,灏濊瘯鏄笉鏄�6804
 8001fca:	4b5c      	ldr	r3, [pc, #368]	; (800213c <LCD_Init+0x254>)
 8001fcc:	889b      	ldrh	r3, [r3, #4]
 8001fce:	f249 3241 	movw	r2, #37697	; 0x9341
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	f000 80a4 	beq.w	8002120 <LCD_Init+0x238>
        {
            LCD_WR_REG(0XBF);
 8001fd8:	20bf      	movs	r0, #191	; 0xbf
 8001fda:	f7fe fc8f 	bl	80008fc <LCD_WR_REG>
            LCD_RD_DATA(); 			//dummy read
 8001fde:	f7fe fcd5 	bl	800098c <LCD_RD_DATA>
            LCD_RD_DATA();   	    //璇诲洖0X01
 8001fe2:	f7fe fcd3 	bl	800098c <LCD_RD_DATA>
            LCD_RD_DATA(); 			//璇诲洖0XD0
 8001fe6:	f7fe fcd1 	bl	800098c <LCD_RD_DATA>
            lcddev.id = LCD_RD_DATA(); 			//杩欓噷璇诲洖0X68
 8001fea:	f7fe fccf 	bl	800098c <LCD_RD_DATA>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b52      	ldr	r3, [pc, #328]	; (800213c <LCD_Init+0x254>)
 8001ff4:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8001ff6:	4b51      	ldr	r3, [pc, #324]	; (800213c <LCD_Init+0x254>)
 8001ff8:	889b      	ldrh	r3, [r3, #4]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	4b4f      	ldr	r3, [pc, #316]	; (800213c <LCD_Init+0x254>)
 8002000:	809a      	strh	r2, [r3, #4]
            lcddev.id |= LCD_RD_DATA(); 			//杩欓噷璇诲洖0X04
 8002002:	f7fe fcc3 	bl	800098c <LCD_RD_DATA>
 8002006:	4603      	mov	r3, r0
 8002008:	461a      	mov	r2, r3
 800200a:	4b4c      	ldr	r3, [pc, #304]	; (800213c <LCD_Init+0x254>)
 800200c:	889b      	ldrh	r3, [r3, #4]
 800200e:	4313      	orrs	r3, r2
 8002010:	b29a      	uxth	r2, r3
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <LCD_Init+0x254>)
 8002014:	809a      	strh	r2, [r3, #4]
            if (lcddev.id != 0X6804)	//涔熶笉鏄�6804,灏濊瘯鐪嬬湅鏄笉鏄疦T35310
 8002016:	4b49      	ldr	r3, [pc, #292]	; (800213c <LCD_Init+0x254>)
 8002018:	889b      	ldrh	r3, [r3, #4]
 800201a:	f646 0204 	movw	r2, #26628	; 0x6804
 800201e:	4293      	cmp	r3, r2
 8002020:	d07e      	beq.n	8002120 <LCD_Init+0x238>
            {
                LCD_WR_REG(0XD4);
 8002022:	20d4      	movs	r0, #212	; 0xd4
 8002024:	f7fe fc6a 	bl	80008fc <LCD_WR_REG>
                LCD_RD_DATA(); 				//dummy read
 8002028:	f7fe fcb0 	bl	800098c <LCD_RD_DATA>
                LCD_RD_DATA();   			//璇诲洖0X01
 800202c:	f7fe fcae 	bl	800098c <LCD_RD_DATA>
                lcddev.id = LCD_RD_DATA();	//璇诲洖0X53
 8002030:	f7fe fcac 	bl	800098c <LCD_RD_DATA>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	4b40      	ldr	r3, [pc, #256]	; (800213c <LCD_Init+0x254>)
 800203a:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 800203c:	4b3f      	ldr	r3, [pc, #252]	; (800213c <LCD_Init+0x254>)
 800203e:	889b      	ldrh	r3, [r3, #4]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	b29a      	uxth	r2, r3
 8002044:	4b3d      	ldr	r3, [pc, #244]	; (800213c <LCD_Init+0x254>)
 8002046:	809a      	strh	r2, [r3, #4]
                lcddev.id |= LCD_RD_DATA();	//杩欓噷璇诲洖0X10
 8002048:	f7fe fca0 	bl	800098c <LCD_RD_DATA>
 800204c:	4603      	mov	r3, r0
 800204e:	461a      	mov	r2, r3
 8002050:	4b3a      	ldr	r3, [pc, #232]	; (800213c <LCD_Init+0x254>)
 8002052:	889b      	ldrh	r3, [r3, #4]
 8002054:	4313      	orrs	r3, r2
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b38      	ldr	r3, [pc, #224]	; (800213c <LCD_Init+0x254>)
 800205a:	809a      	strh	r2, [r3, #4]
                if (lcddev.id != 0X5310)		//涔熶笉鏄疦T35310,灏濊瘯鐪嬬湅鏄笉鏄疦T35510
 800205c:	4b37      	ldr	r3, [pc, #220]	; (800213c <LCD_Init+0x254>)
 800205e:	889b      	ldrh	r3, [r3, #4]
 8002060:	f245 3210 	movw	r2, #21264	; 0x5310
 8002064:	4293      	cmp	r3, r2
 8002066:	d05b      	beq.n	8002120 <LCD_Init+0x238>
                {
                    LCD_WR_REG(0XDA00);
 8002068:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 800206c:	f7fe fc46 	bl	80008fc <LCD_WR_REG>
                    LCD_RD_DATA();   		//璇诲洖0X00
 8002070:	f7fe fc8c 	bl	800098c <LCD_RD_DATA>
                    LCD_WR_REG(0XDB00);
 8002074:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002078:	f7fe fc40 	bl	80008fc <LCD_WR_REG>
                    lcddev.id = LCD_RD_DATA();   		//璇诲洖0X80
 800207c:	f7fe fc86 	bl	800098c <LCD_RD_DATA>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <LCD_Init+0x254>)
 8002086:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <LCD_Init+0x254>)
 800208a:	889b      	ldrh	r3, [r3, #4]
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b29a      	uxth	r2, r3
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <LCD_Init+0x254>)
 8002092:	809a      	strh	r2, [r3, #4]
                    LCD_WR_REG(0XDC00);
 8002094:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002098:	f7fe fc30 	bl	80008fc <LCD_WR_REG>
                    lcddev.id |= LCD_RD_DATA();   		//璇诲洖0X00
 800209c:	f7fe fc76 	bl	800098c <LCD_RD_DATA>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b25      	ldr	r3, [pc, #148]	; (800213c <LCD_Init+0x254>)
 80020a6:	889b      	ldrh	r3, [r3, #4]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <LCD_Init+0x254>)
 80020ae:	809a      	strh	r2, [r3, #4]
                    if (lcddev.id == 0x8000)
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <LCD_Init+0x254>)
 80020b2:	889b      	ldrh	r3, [r3, #4]
 80020b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b8:	d103      	bne.n	80020c2 <LCD_Init+0x1da>
                        lcddev.id = 0x5510;   		//NT35510璇诲洖鐨処D鏄�8000H,涓烘柟渚垮尯鍒�,鎴戜滑寮哄埗璁剧疆涓�5510
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <LCD_Init+0x254>)
 80020bc:	f245 5210 	movw	r2, #21776	; 0x5510
 80020c0:	809a      	strh	r2, [r3, #4]
                    if (lcddev.id != 0X5510)			//涔熶笉鏄疦T5510,灏濊瘯鐪嬬湅鏄笉鏄疭SD1963
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <LCD_Init+0x254>)
 80020c4:	889b      	ldrh	r3, [r3, #4]
 80020c6:	f245 5210 	movw	r2, #21776	; 0x5510
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d028      	beq.n	8002120 <LCD_Init+0x238>
                    {
                        LCD_WR_REG(0XA1);
 80020ce:	20a1      	movs	r0, #161	; 0xa1
 80020d0:	f7fe fc14 	bl	80008fc <LCD_WR_REG>
                        lcddev.id = LCD_RD_DATA();
 80020d4:	f7fe fc5a 	bl	800098c <LCD_RD_DATA>
 80020d8:	4603      	mov	r3, r0
 80020da:	461a      	mov	r2, r3
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <LCD_Init+0x254>)
 80020de:	809a      	strh	r2, [r3, #4]
                        lcddev.id = LCD_RD_DATA();	//璇诲洖0X57
 80020e0:	f7fe fc54 	bl	800098c <LCD_RD_DATA>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <LCD_Init+0x254>)
 80020ea:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <LCD_Init+0x254>)
 80020ee:	889b      	ldrh	r3, [r3, #4]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <LCD_Init+0x254>)
 80020f6:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= LCD_RD_DATA();	//璇诲洖0X61
 80020f8:	f7fe fc48 	bl	800098c <LCD_RD_DATA>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <LCD_Init+0x254>)
 8002102:	889b      	ldrh	r3, [r3, #4]
 8002104:	4313      	orrs	r3, r2
 8002106:	b29a      	uxth	r2, r3
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <LCD_Init+0x254>)
 800210a:	809a      	strh	r2, [r3, #4]
                        if (lcddev.id == 0X5761)
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <LCD_Init+0x254>)
 800210e:	889b      	ldrh	r3, [r3, #4]
 8002110:	f245 7261 	movw	r2, #22369	; 0x5761
 8002114:	4293      	cmp	r3, r2
 8002116:	d103      	bne.n	8002120 <LCD_Init+0x238>
                            lcddev.id = 0X1963;	//SSD1963璇诲洖鐨処D鏄�5761H,涓烘柟渚垮尯鍒�,鎴戜滑寮哄埗璁剧疆涓�1963
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <LCD_Init+0x254>)
 800211a:	f641 1263 	movw	r2, #6499	; 0x1963
 800211e:	809a      	strh	r2, [r3, #4]
                }
            }
        }
    }
// 	printf(" LCD ID:%x\r\n",lcddev.id); //鎵撳嵃LCD ID
    if (lcddev.id == 0X9341)	//9341鍒濆鍖�
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <LCD_Init+0x254>)
 8002122:	889b      	ldrh	r3, [r3, #4]
 8002124:	f249 3241 	movw	r2, #37697	; 0x9341
 8002128:	4293      	cmp	r3, r2
 800212a:	f040 811f 	bne.w	800236c <LCD_Init+0x484>
 800212e:	e007      	b.n	8002140 <LCD_Init+0x258>
 8002130:	40021000 	.word	0x40021000
 8002134:	40011000 	.word	0x40011000
 8002138:	40010c00 	.word	0x40010c00
 800213c:	20000030 	.word	0x20000030
    {
        LCD_WR_REG(0xCF);
 8002140:	20cf      	movs	r0, #207	; 0xcf
 8002142:	f7fe fbdb 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 8002146:	2000      	movs	r0, #0
 8002148:	f7fe fbfc 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xC1);
 800214c:	20c1      	movs	r0, #193	; 0xc1
 800214e:	f7fe fbf9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X30);
 8002152:	2030      	movs	r0, #48	; 0x30
 8002154:	f7fe fbf6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xED);
 8002158:	20ed      	movs	r0, #237	; 0xed
 800215a:	f7fe fbcf 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x64);
 800215e:	2064      	movs	r0, #100	; 0x64
 8002160:	f7fe fbf0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x03);
 8002164:	2003      	movs	r0, #3
 8002166:	f7fe fbed 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X12);
 800216a:	2012      	movs	r0, #18
 800216c:	f7fe fbea 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X81);
 8002170:	2081      	movs	r0, #129	; 0x81
 8002172:	f7fe fbe7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xE8);
 8002176:	20e8      	movs	r0, #232	; 0xe8
 8002178:	f7fe fbc0 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x85);
 800217c:	2085      	movs	r0, #133	; 0x85
 800217e:	f7fe fbe1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x10);
 8002182:	2010      	movs	r0, #16
 8002184:	f7fe fbde 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x7A);
 8002188:	207a      	movs	r0, #122	; 0x7a
 800218a:	f7fe fbdb 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xCB);
 800218e:	20cb      	movs	r0, #203	; 0xcb
 8002190:	f7fe fbb4 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x39);
 8002194:	2039      	movs	r0, #57	; 0x39
 8002196:	f7fe fbd5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x2C);
 800219a:	202c      	movs	r0, #44	; 0x2c
 800219c:	f7fe fbd2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7fe fbcf 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x34);
 80021a6:	2034      	movs	r0, #52	; 0x34
 80021a8:	f7fe fbcc 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x02);
 80021ac:	2002      	movs	r0, #2
 80021ae:	f7fe fbc9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xF7);
 80021b2:	20f7      	movs	r0, #247	; 0xf7
 80021b4:	f7fe fba2 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x20);
 80021b8:	2020      	movs	r0, #32
 80021ba:	f7fe fbc3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xEA);
 80021be:	20ea      	movs	r0, #234	; 0xea
 80021c0:	f7fe fb9c 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7fe fbbd 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7fe fbba 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xC0);    //Power control
 80021d0:	20c0      	movs	r0, #192	; 0xc0
 80021d2:	f7fe fb93 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x1B);   //VRH[5:0]
 80021d6:	201b      	movs	r0, #27
 80021d8:	f7fe fbb4 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xC1);    //Power control
 80021dc:	20c1      	movs	r0, #193	; 0xc1
 80021de:	f7fe fb8d 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0]
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7fe fbae 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xC5);    //VCM control
 80021e8:	20c5      	movs	r0, #197	; 0xc5
 80021ea:	f7fe fb87 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x30); 	 //3F
 80021ee:	2030      	movs	r0, #48	; 0x30
 80021f0:	f7fe fba8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x30); 	 //3C
 80021f4:	2030      	movs	r0, #48	; 0x30
 80021f6:	f7fe fba5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xC7);    //VCM control2
 80021fa:	20c7      	movs	r0, #199	; 0xc7
 80021fc:	f7fe fb7e 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0XB7);
 8002200:	20b7      	movs	r0, #183	; 0xb7
 8002202:	f7fe fb9f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0x36);    // Memory Access Control
 8002206:	2036      	movs	r0, #54	; 0x36
 8002208:	f7fe fb78 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x48);
 800220c:	2048      	movs	r0, #72	; 0x48
 800220e:	f7fe fb99 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0x3A);
 8002212:	203a      	movs	r0, #58	; 0x3a
 8002214:	f7fe fb72 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x55);
 8002218:	2055      	movs	r0, #85	; 0x55
 800221a:	f7fe fb93 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xB1);
 800221e:	20b1      	movs	r0, #177	; 0xb1
 8002220:	f7fe fb6c 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 8002224:	2000      	movs	r0, #0
 8002226:	f7fe fb8d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x1A);
 800222a:	201a      	movs	r0, #26
 800222c:	f7fe fb8a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xB6);    // Display Function Control
 8002230:	20b6      	movs	r0, #182	; 0xb6
 8002232:	f7fe fb63 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x0A);
 8002236:	200a      	movs	r0, #10
 8002238:	f7fe fb84 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xA2);
 800223c:	20a2      	movs	r0, #162	; 0xa2
 800223e:	f7fe fb81 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002242:	20f2      	movs	r0, #242	; 0xf2
 8002244:	f7fe fb5a 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 8002248:	2000      	movs	r0, #0
 800224a:	f7fe fb7b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0x26);    //Gamma curve selected
 800224e:	2026      	movs	r0, #38	; 0x26
 8002250:	f7fe fb54 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x01);
 8002254:	2001      	movs	r0, #1
 8002256:	f7fe fb75 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xE0);    //Set Gamma
 800225a:	20e0      	movs	r0, #224	; 0xe0
 800225c:	f7fe fb4e 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x0F);
 8002260:	200f      	movs	r0, #15
 8002262:	f7fe fb6f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x2A);
 8002266:	202a      	movs	r0, #42	; 0x2a
 8002268:	f7fe fb6c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x28);
 800226c:	2028      	movs	r0, #40	; 0x28
 800226e:	f7fe fb69 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x08);
 8002272:	2008      	movs	r0, #8
 8002274:	f7fe fb66 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x0E);
 8002278:	200e      	movs	r0, #14
 800227a:	f7fe fb63 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x08);
 800227e:	2008      	movs	r0, #8
 8002280:	f7fe fb60 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x54);
 8002284:	2054      	movs	r0, #84	; 0x54
 8002286:	f7fe fb5d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0XA9);
 800228a:	20a9      	movs	r0, #169	; 0xa9
 800228c:	f7fe fb5a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x43);
 8002290:	2043      	movs	r0, #67	; 0x43
 8002292:	f7fe fb57 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x0A);
 8002296:	200a      	movs	r0, #10
 8002298:	f7fe fb54 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x0F);
 800229c:	200f      	movs	r0, #15
 800229e:	f7fe fb51 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7fe fb4e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7fe fb4b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7fe fb48 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7fe fb45 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0XE1);    //Set Gamma
 80022ba:	20e1      	movs	r0, #225	; 0xe1
 80022bc:	f7fe fb1e 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7fe fb3f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x15);
 80022c6:	2015      	movs	r0, #21
 80022c8:	f7fe fb3c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x17);
 80022cc:	2017      	movs	r0, #23
 80022ce:	f7fe fb39 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x07);
 80022d2:	2007      	movs	r0, #7
 80022d4:	f7fe fb36 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x11);
 80022d8:	2011      	movs	r0, #17
 80022da:	f7fe fb33 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x06);
 80022de:	2006      	movs	r0, #6
 80022e0:	f7fe fb30 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x2B);
 80022e4:	202b      	movs	r0, #43	; 0x2b
 80022e6:	f7fe fb2d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x56);
 80022ea:	2056      	movs	r0, #86	; 0x56
 80022ec:	f7fe fb2a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x3C);
 80022f0:	203c      	movs	r0, #60	; 0x3c
 80022f2:	f7fe fb27 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x05);
 80022f6:	2005      	movs	r0, #5
 80022f8:	f7fe fb24 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x10);
 80022fc:	2010      	movs	r0, #16
 80022fe:	f7fe fb21 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x0F);
 8002302:	200f      	movs	r0, #15
 8002304:	f7fe fb1e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x3F);
 8002308:	203f      	movs	r0, #63	; 0x3f
 800230a:	f7fe fb1b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x3F);
 800230e:	203f      	movs	r0, #63	; 0x3f
 8002310:	f7fe fb18 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x0F);
 8002314:	200f      	movs	r0, #15
 8002316:	f7fe fb15 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0x2B);
 800231a:	202b      	movs	r0, #43	; 0x2b
 800231c:	f7fe faee 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 8002320:	2000      	movs	r0, #0
 8002322:	f7fe fb0f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002326:	2000      	movs	r0, #0
 8002328:	f7fe fb0c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x01);
 800232c:	2001      	movs	r0, #1
 800232e:	f7fe fb09 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x3f);
 8002332:	203f      	movs	r0, #63	; 0x3f
 8002334:	f7fe fb06 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0x2A);
 8002338:	202a      	movs	r0, #42	; 0x2a
 800233a:	f7fe fadf 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 800233e:	2000      	movs	r0, #0
 8002340:	f7fe fb00 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002344:	2000      	movs	r0, #0
 8002346:	f7fe fafd 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800234a:	2000      	movs	r0, #0
 800234c:	f7fe fafa 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xef);
 8002350:	20ef      	movs	r0, #239	; 0xef
 8002352:	f7fe faf7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0x11); //Exit Sleep
 8002356:	2011      	movs	r0, #17
 8002358:	f7fe fad0 	bl	80008fc <LCD_WR_REG>
        HAL_Delay(120);
 800235c:	2078      	movs	r0, #120	; 0x78
 800235e:	f004 f899 	bl	8006494 <HAL_Delay>
        LCD_WR_REG(0x29); //display on
 8002362:	2029      	movs	r0, #41	; 0x29
 8002364:	f7fe faca 	bl	80008fc <LCD_WR_REG>
 8002368:	f003 bcd8 	b.w	8005d1c <LCD_Init+0x3e34>
    } else if (lcddev.id == 0x6804) //6804鍒濆鍖�
 800236c:	4b58      	ldr	r3, [pc, #352]	; (80024d0 <LCD_Init+0x5e8>)
 800236e:	889b      	ldrh	r3, [r3, #4]
 8002370:	f646 0204 	movw	r2, #26628	; 0x6804
 8002374:	4293      	cmp	r3, r2
 8002376:	f040 80ad 	bne.w	80024d4 <LCD_Init+0x5ec>
    {
        LCD_WR_REG(0X11);
 800237a:	2011      	movs	r0, #17
 800237c:	f7fe fabe 	bl	80008fc <LCD_WR_REG>
        HAL_Delay(20);
 8002380:	2014      	movs	r0, #20
 8002382:	f004 f887 	bl	8006494 <HAL_Delay>
        LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002386:	20d0      	movs	r0, #208	; 0xd0
 8002388:	f7fe fab8 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0X07);
 800238c:	2007      	movs	r0, #7
 800238e:	f7fe fad9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X42);
 8002392:	2042      	movs	r0, #66	; 0x42
 8002394:	f7fe fad6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X1D);
 8002398:	201d      	movs	r0, #29
 800239a:	f7fe fad3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800239e:	20d1      	movs	r0, #209	; 0xd1
 80023a0:	f7fe faac 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0X00);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7fe facd 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X1a);
 80023aa:	201a      	movs	r0, #26
 80023ac:	f7fe faca 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X09);
 80023b0:	2009      	movs	r0, #9
 80023b2:	f7fe fac7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 80023b6:	20d2      	movs	r0, #210	; 0xd2
 80023b8:	f7fe faa0 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0X01);
 80023bc:	2001      	movs	r0, #1
 80023be:	f7fe fac1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X22);
 80023c2:	2022      	movs	r0, #34	; 0x22
 80023c4:	f7fe fabe 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0XC0); //REV SM GS
 80023c8:	20c0      	movs	r0, #192	; 0xc0
 80023ca:	f7fe fa97 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0X10);
 80023ce:	2010      	movs	r0, #16
 80023d0:	f7fe fab8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X3B);
 80023d4:	203b      	movs	r0, #59	; 0x3b
 80023d6:	f7fe fab5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X00);
 80023da:	2000      	movs	r0, #0
 80023dc:	f7fe fab2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X02);
 80023e0:	2002      	movs	r0, #2
 80023e2:	f7fe faaf 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X11);
 80023e6:	2011      	movs	r0, #17
 80023e8:	f7fe faac 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 80023ec:	20c5      	movs	r0, #197	; 0xc5
 80023ee:	f7fe fa85 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0X03);
 80023f2:	2003      	movs	r0, #3
 80023f4:	f7fe faa6 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0XC8); //Gamma setting
 80023f8:	20c8      	movs	r0, #200	; 0xc8
 80023fa:	f7fe fa7f 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0X00);
 80023fe:	2000      	movs	r0, #0
 8002400:	f7fe faa0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X25);
 8002404:	2025      	movs	r0, #37	; 0x25
 8002406:	f7fe fa9d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X21);
 800240a:	2021      	movs	r0, #33	; 0x21
 800240c:	f7fe fa9a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X05);
 8002410:	2005      	movs	r0, #5
 8002412:	f7fe fa97 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X00);
 8002416:	2000      	movs	r0, #0
 8002418:	f7fe fa94 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X0a);
 800241c:	200a      	movs	r0, #10
 800241e:	f7fe fa91 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X65);
 8002422:	2065      	movs	r0, #101	; 0x65
 8002424:	f7fe fa8e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X25);
 8002428:	2025      	movs	r0, #37	; 0x25
 800242a:	f7fe fa8b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X77);
 800242e:	2077      	movs	r0, #119	; 0x77
 8002430:	f7fe fa88 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X50);
 8002434:	2050      	movs	r0, #80	; 0x50
 8002436:	f7fe fa85 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X0f);
 800243a:	200f      	movs	r0, #15
 800243c:	f7fe fa82 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X00);
 8002440:	2000      	movs	r0, #0
 8002442:	f7fe fa7f 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0XF8);
 8002446:	20f8      	movs	r0, #248	; 0xf8
 8002448:	f7fe fa58 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0X01);
 800244c:	2001      	movs	r0, #1
 800244e:	f7fe fa79 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0XFE);
 8002452:	20fe      	movs	r0, #254	; 0xfe
 8002454:	f7fe fa52 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0X00);
 8002458:	2000      	movs	r0, #0
 800245a:	f7fe fa73 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X02);
 800245e:	2002      	movs	r0, #2
 8002460:	f7fe fa70 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0X20); //Exit invert mode
 8002464:	2020      	movs	r0, #32
 8002466:	f7fe fa49 	bl	80008fc <LCD_WR_REG>

        LCD_WR_REG(0X36);
 800246a:	2036      	movs	r0, #54	; 0x36
 800246c:	f7fe fa46 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0X08); //鍘熸潵鏄痑
 8002470:	2008      	movs	r0, #8
 8002472:	f7fe fa67 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0X3A);
 8002476:	203a      	movs	r0, #58	; 0x3a
 8002478:	f7fe fa40 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0X55); //16浣嶆ā寮�
 800247c:	2055      	movs	r0, #85	; 0x55
 800247e:	f7fe fa61 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0X2B);
 8002482:	202b      	movs	r0, #43	; 0x2b
 8002484:	f7fe fa3a 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0X00);
 8002488:	2000      	movs	r0, #0
 800248a:	f7fe fa5b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X00);
 800248e:	2000      	movs	r0, #0
 8002490:	f7fe fa58 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X01);
 8002494:	2001      	movs	r0, #1
 8002496:	f7fe fa55 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X3F);
 800249a:	203f      	movs	r0, #63	; 0x3f
 800249c:	f7fe fa52 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0X2A);
 80024a0:	202a      	movs	r0, #42	; 0x2a
 80024a2:	f7fe fa2b 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0X00);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe fa4c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X00);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7fe fa49 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0X01);
 80024b2:	2001      	movs	r0, #1
 80024b4:	f7fe fa46 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0XDF);
 80024b8:	20df      	movs	r0, #223	; 0xdf
 80024ba:	f7fe fa43 	bl	8000944 <LCD_WR_DATAX>
        HAL_Delay(120);
 80024be:	2078      	movs	r0, #120	; 0x78
 80024c0:	f003 ffe8 	bl	8006494 <HAL_Delay>
        LCD_WR_REG(0X29);
 80024c4:	2029      	movs	r0, #41	; 0x29
 80024c6:	f7fe fa19 	bl	80008fc <LCD_WR_REG>
 80024ca:	f003 bc27 	b.w	8005d1c <LCD_Init+0x3e34>
 80024ce:	bf00      	nop
 80024d0:	20000030 	.word	0x20000030
    } else if (lcddev.id == 0x5310) {
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <LCD_Init+0x5fc>)
 80024d6:	889b      	ldrh	r3, [r3, #4]
 80024d8:	f245 3210 	movw	r2, #21264	; 0x5310
 80024dc:	4293      	cmp	r3, r2
 80024de:	f040 877c 	bne.w	80033da <LCD_Init+0x14f2>
 80024e2:	e001      	b.n	80024e8 <LCD_Init+0x600>
 80024e4:	20000030 	.word	0x20000030
        LCD_WR_REG(0xED);
 80024e8:	20ed      	movs	r0, #237	; 0xed
 80024ea:	f7fe fa07 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x01);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f7fe fa28 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xFE);
 80024f4:	20fe      	movs	r0, #254	; 0xfe
 80024f6:	f7fe fa25 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xEE);
 80024fa:	20ee      	movs	r0, #238	; 0xee
 80024fc:	f7fe f9fe 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0xDE);
 8002500:	20de      	movs	r0, #222	; 0xde
 8002502:	f7fe fa1f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x21);
 8002506:	2021      	movs	r0, #33	; 0x21
 8002508:	f7fe fa1c 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xF1);
 800250c:	20f1      	movs	r0, #241	; 0xf1
 800250e:	f7fe f9f5 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x01);
 8002512:	2001      	movs	r0, #1
 8002514:	f7fe fa16 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xDF);
 8002518:	20df      	movs	r0, #223	; 0xdf
 800251a:	f7fe f9ef 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x10);
 800251e:	2010      	movs	r0, #16
 8002520:	f7fe fa10 	bl	8000944 <LCD_WR_DATAX>

        //VCOMvoltage//
        LCD_WR_REG(0xC4);
 8002524:	20c4      	movs	r0, #196	; 0xc4
 8002526:	f7fe f9e9 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x8F);	  //5f
 800252a:	208f      	movs	r0, #143	; 0x8f
 800252c:	f7fe fa0a 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xC6);
 8002530:	20c6      	movs	r0, #198	; 0xc6
 8002532:	f7fe f9e3 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 8002536:	2000      	movs	r0, #0
 8002538:	f7fe fa04 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xE2);
 800253c:	20e2      	movs	r0, #226	; 0xe2
 800253e:	f7fe fa01 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xE2);
 8002542:	20e2      	movs	r0, #226	; 0xe2
 8002544:	f7fe f9fe 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xE2);
 8002548:	20e2      	movs	r0, #226	; 0xe2
 800254a:	f7fe f9fb 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xBF);
 800254e:	20bf      	movs	r0, #191	; 0xbf
 8002550:	f7fe f9d4 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0xAA);
 8002554:	20aa      	movs	r0, #170	; 0xaa
 8002556:	f7fe f9f5 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xB0);
 800255a:	20b0      	movs	r0, #176	; 0xb0
 800255c:	f7fe f9ce 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x0D);
 8002560:	200d      	movs	r0, #13
 8002562:	f7fe f9ef 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002566:	2000      	movs	r0, #0
 8002568:	f7fe f9ec 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x0D);
 800256c:	200d      	movs	r0, #13
 800256e:	f7fe f9e9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002572:	2000      	movs	r0, #0
 8002574:	f7fe f9e6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x11);
 8002578:	2011      	movs	r0, #17
 800257a:	f7fe f9e3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800257e:	2000      	movs	r0, #0
 8002580:	f7fe f9e0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x19);
 8002584:	2019      	movs	r0, #25
 8002586:	f7fe f9dd 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800258a:	2000      	movs	r0, #0
 800258c:	f7fe f9da 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x21);
 8002590:	2021      	movs	r0, #33	; 0x21
 8002592:	f7fe f9d7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002596:	2000      	movs	r0, #0
 8002598:	f7fe f9d4 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x2D);
 800259c:	202d      	movs	r0, #45	; 0x2d
 800259e:	f7fe f9d1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7fe f9ce 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x3D);
 80025a8:	203d      	movs	r0, #61	; 0x3d
 80025aa:	f7fe f9cb 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7fe f9c8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x5D);
 80025b4:	205d      	movs	r0, #93	; 0x5d
 80025b6:	f7fe f9c5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe f9c2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x5D);
 80025c0:	205d      	movs	r0, #93	; 0x5d
 80025c2:	f7fe f9bf 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7fe f9bc 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xB1);
 80025cc:	20b1      	movs	r0, #177	; 0xb1
 80025ce:	f7fe f995 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x80);
 80025d2:	2080      	movs	r0, #128	; 0x80
 80025d4:	f7fe f9b6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80025d8:	2000      	movs	r0, #0
 80025da:	f7fe f9b3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x8B);
 80025de:	208b      	movs	r0, #139	; 0x8b
 80025e0:	f7fe f9b0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7fe f9ad 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x96);
 80025ea:	2096      	movs	r0, #150	; 0x96
 80025ec:	f7fe f9aa 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7fe f9a7 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xB2);
 80025f6:	20b2      	movs	r0, #178	; 0xb2
 80025f8:	f7fe f980 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7fe f9a1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002602:	2000      	movs	r0, #0
 8002604:	f7fe f99e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x02);
 8002608:	2002      	movs	r0, #2
 800260a:	f7fe f99b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800260e:	2000      	movs	r0, #0
 8002610:	f7fe f998 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x03);
 8002614:	2003      	movs	r0, #3
 8002616:	f7fe f995 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe f992 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xB3);
 8002620:	20b3      	movs	r0, #179	; 0xb3
 8002622:	f7fe f96b 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 8002626:	2000      	movs	r0, #0
 8002628:	f7fe f98c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800262c:	2000      	movs	r0, #0
 800262e:	f7fe f989 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002632:	2000      	movs	r0, #0
 8002634:	f7fe f986 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002638:	2000      	movs	r0, #0
 800263a:	f7fe f983 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800263e:	2000      	movs	r0, #0
 8002640:	f7fe f980 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002644:	2000      	movs	r0, #0
 8002646:	f7fe f97d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800264a:	2000      	movs	r0, #0
 800264c:	f7fe f97a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002650:	2000      	movs	r0, #0
 8002652:	f7fe f977 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002656:	2000      	movs	r0, #0
 8002658:	f7fe f974 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe f971 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002662:	2000      	movs	r0, #0
 8002664:	f7fe f96e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe f96b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800266e:	2000      	movs	r0, #0
 8002670:	f7fe f968 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002674:	2000      	movs	r0, #0
 8002676:	f7fe f965 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800267a:	2000      	movs	r0, #0
 800267c:	f7fe f962 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002680:	2000      	movs	r0, #0
 8002682:	f7fe f95f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002686:	2000      	movs	r0, #0
 8002688:	f7fe f95c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe f959 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002692:	2000      	movs	r0, #0
 8002694:	f7fe f956 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002698:	2000      	movs	r0, #0
 800269a:	f7fe f953 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800269e:	2000      	movs	r0, #0
 80026a0:	f7fe f950 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7fe f94d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7fe f94a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80026b0:	2000      	movs	r0, #0
 80026b2:	f7fe f947 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xB4);
 80026b6:	20b4      	movs	r0, #180	; 0xb4
 80026b8:	f7fe f920 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x8B);
 80026bc:	208b      	movs	r0, #139	; 0x8b
 80026be:	f7fe f941 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7fe f93e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x96);
 80026c8:	2096      	movs	r0, #150	; 0x96
 80026ca:	f7fe f93b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe f938 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xA1);
 80026d4:	20a1      	movs	r0, #161	; 0xa1
 80026d6:	f7fe f935 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80026da:	2000      	movs	r0, #0
 80026dc:	f7fe f932 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xB5);
 80026e0:	20b5      	movs	r0, #181	; 0xb5
 80026e2:	f7fe f90b 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x02);
 80026e6:	2002      	movs	r0, #2
 80026e8:	f7fe f92c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7fe f929 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x03);
 80026f2:	2003      	movs	r0, #3
 80026f4:	f7fe f926 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7fe f923 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x04);
 80026fe:	2004      	movs	r0, #4
 8002700:	f7fe f920 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002704:	2000      	movs	r0, #0
 8002706:	f7fe f91d 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xB6);
 800270a:	20b6      	movs	r0, #182	; 0xb6
 800270c:	f7fe f8f6 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 8002710:	2000      	movs	r0, #0
 8002712:	f7fe f917 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002716:	2000      	movs	r0, #0
 8002718:	f7fe f914 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xB7);
 800271c:	20b7      	movs	r0, #183	; 0xb7
 800271e:	f7fe f8ed 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 8002722:	2000      	movs	r0, #0
 8002724:	f7fe f90e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002728:	2000      	movs	r0, #0
 800272a:	f7fe f90b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x3F);
 800272e:	203f      	movs	r0, #63	; 0x3f
 8002730:	f7fe f908 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002734:	2000      	movs	r0, #0
 8002736:	f7fe f905 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x5E);
 800273a:	205e      	movs	r0, #94	; 0x5e
 800273c:	f7fe f902 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002740:	2000      	movs	r0, #0
 8002742:	f7fe f8ff 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x64);
 8002746:	2064      	movs	r0, #100	; 0x64
 8002748:	f7fe f8fc 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800274c:	2000      	movs	r0, #0
 800274e:	f7fe f8f9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x8C);
 8002752:	208c      	movs	r0, #140	; 0x8c
 8002754:	f7fe f8f6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002758:	2000      	movs	r0, #0
 800275a:	f7fe f8f3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xAC);
 800275e:	20ac      	movs	r0, #172	; 0xac
 8002760:	f7fe f8f0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002764:	2000      	movs	r0, #0
 8002766:	f7fe f8ed 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xDC);
 800276a:	20dc      	movs	r0, #220	; 0xdc
 800276c:	f7fe f8ea 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002770:	2000      	movs	r0, #0
 8002772:	f7fe f8e7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x70);
 8002776:	2070      	movs	r0, #112	; 0x70
 8002778:	f7fe f8e4 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800277c:	2000      	movs	r0, #0
 800277e:	f7fe f8e1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x90);
 8002782:	2090      	movs	r0, #144	; 0x90
 8002784:	f7fe f8de 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002788:	2000      	movs	r0, #0
 800278a:	f7fe f8db 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xEB);
 800278e:	20eb      	movs	r0, #235	; 0xeb
 8002790:	f7fe f8d8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002794:	2000      	movs	r0, #0
 8002796:	f7fe f8d5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xDC);
 800279a:	20dc      	movs	r0, #220	; 0xdc
 800279c:	f7fe f8d2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fe f8cf 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xB8);
 80027a6:	20b8      	movs	r0, #184	; 0xb8
 80027a8:	f7fe f8a8 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 80027ac:	2000      	movs	r0, #0
 80027ae:	f7fe f8c9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe f8c6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7fe f8c3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fe f8c0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7fe f8bd 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7fe f8ba 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7fe f8b7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7fe f8b4 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xBA);
 80027dc:	20ba      	movs	r0, #186	; 0xba
 80027de:	f7fe f88d 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x24);
 80027e2:	2024      	movs	r0, #36	; 0x24
 80027e4:	f7fe f8ae 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe f8ab 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7fe f8a8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7fe f8a5 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xC1);
 80027fa:	20c1      	movs	r0, #193	; 0xc1
 80027fc:	f7fe f87e 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x20);
 8002800:	2020      	movs	r0, #32
 8002802:	f7fe f89f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002806:	2000      	movs	r0, #0
 8002808:	f7fe f89c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x54);
 800280c:	2054      	movs	r0, #84	; 0x54
 800280e:	f7fe f899 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002812:	2000      	movs	r0, #0
 8002814:	f7fe f896 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xFF);
 8002818:	20ff      	movs	r0, #255	; 0xff
 800281a:	f7fe f893 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800281e:	2000      	movs	r0, #0
 8002820:	f7fe f890 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xC2);
 8002824:	20c2      	movs	r0, #194	; 0xc2
 8002826:	f7fe f869 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x0A);
 800282a:	200a      	movs	r0, #10
 800282c:	f7fe f88a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002830:	2000      	movs	r0, #0
 8002832:	f7fe f887 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x04);
 8002836:	2004      	movs	r0, #4
 8002838:	f7fe f884 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f7fe f881 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xC3);
 8002842:	20c3      	movs	r0, #195	; 0xc3
 8002844:	f7fe f85a 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x3C);
 8002848:	203c      	movs	r0, #60	; 0x3c
 800284a:	f7fe f87b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe f878 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x3A);
 8002854:	203a      	movs	r0, #58	; 0x3a
 8002856:	f7fe f875 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800285a:	2000      	movs	r0, #0
 800285c:	f7fe f872 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x39);
 8002860:	2039      	movs	r0, #57	; 0x39
 8002862:	f7fe f86f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002866:	2000      	movs	r0, #0
 8002868:	f7fe f86c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x37);
 800286c:	2037      	movs	r0, #55	; 0x37
 800286e:	f7fe f869 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002872:	2000      	movs	r0, #0
 8002874:	f7fe f866 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x3C);
 8002878:	203c      	movs	r0, #60	; 0x3c
 800287a:	f7fe f863 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe f860 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x36);
 8002884:	2036      	movs	r0, #54	; 0x36
 8002886:	f7fe f85d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800288a:	2000      	movs	r0, #0
 800288c:	f7fe f85a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x32);
 8002890:	2032      	movs	r0, #50	; 0x32
 8002892:	f7fe f857 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002896:	2000      	movs	r0, #0
 8002898:	f7fe f854 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x2F);
 800289c:	202f      	movs	r0, #47	; 0x2f
 800289e:	f7fe f851 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7fe f84e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x2C);
 80028a8:	202c      	movs	r0, #44	; 0x2c
 80028aa:	f7fe f84b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7fe f848 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x29);
 80028b4:	2029      	movs	r0, #41	; 0x29
 80028b6:	f7fe f845 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe f842 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x26);
 80028c0:	2026      	movs	r0, #38	; 0x26
 80028c2:	f7fe f83f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7fe f83c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x24);
 80028cc:	2024      	movs	r0, #36	; 0x24
 80028ce:	f7fe f839 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7fe f836 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x24);
 80028d8:	2024      	movs	r0, #36	; 0x24
 80028da:	f7fe f833 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe f830 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x23);
 80028e4:	2023      	movs	r0, #35	; 0x23
 80028e6:	f7fe f82d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fe f82a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x3C);
 80028f0:	203c      	movs	r0, #60	; 0x3c
 80028f2:	f7fe f827 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe f824 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x36);
 80028fc:	2036      	movs	r0, #54	; 0x36
 80028fe:	f7fe f821 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe f81e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x32);
 8002908:	2032      	movs	r0, #50	; 0x32
 800290a:	f7fe f81b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe f818 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x2F);
 8002914:	202f      	movs	r0, #47	; 0x2f
 8002916:	f7fe f815 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800291a:	2000      	movs	r0, #0
 800291c:	f7fe f812 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x2C);
 8002920:	202c      	movs	r0, #44	; 0x2c
 8002922:	f7fe f80f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002926:	2000      	movs	r0, #0
 8002928:	f7fe f80c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x29);
 800292c:	2029      	movs	r0, #41	; 0x29
 800292e:	f7fe f809 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe f806 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x26);
 8002938:	2026      	movs	r0, #38	; 0x26
 800293a:	f7fe f803 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800293e:	2000      	movs	r0, #0
 8002940:	f7fe f800 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x24);
 8002944:	2024      	movs	r0, #36	; 0x24
 8002946:	f7fd fffd 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800294a:	2000      	movs	r0, #0
 800294c:	f7fd fffa 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x24);
 8002950:	2024      	movs	r0, #36	; 0x24
 8002952:	f7fd fff7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002956:	2000      	movs	r0, #0
 8002958:	f7fd fff4 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x23);
 800295c:	2023      	movs	r0, #35	; 0x23
 800295e:	f7fd fff1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002962:	2000      	movs	r0, #0
 8002964:	f7fd ffee 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xC4);
 8002968:	20c4      	movs	r0, #196	; 0xc4
 800296a:	f7fd ffc7 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x62);
 800296e:	2062      	movs	r0, #98	; 0x62
 8002970:	f7fd ffe8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002974:	2000      	movs	r0, #0
 8002976:	f7fd ffe5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x05);
 800297a:	2005      	movs	r0, #5
 800297c:	f7fd ffe2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002980:	2000      	movs	r0, #0
 8002982:	f7fd ffdf 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x84);
 8002986:	2084      	movs	r0, #132	; 0x84
 8002988:	f7fd ffdc 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800298c:	2000      	movs	r0, #0
 800298e:	f7fd ffd9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xF0);
 8002992:	20f0      	movs	r0, #240	; 0xf0
 8002994:	f7fd ffd6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002998:	2000      	movs	r0, #0
 800299a:	f7fd ffd3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x18);
 800299e:	2018      	movs	r0, #24
 80029a0:	f7fd ffd0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7fd ffcd 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xA4);
 80029aa:	20a4      	movs	r0, #164	; 0xa4
 80029ac:	f7fd ffca 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7fd ffc7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x18);
 80029b6:	2018      	movs	r0, #24
 80029b8:	f7fd ffc4 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fd ffc1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x50);
 80029c2:	2050      	movs	r0, #80	; 0x50
 80029c4:	f7fd ffbe 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fd ffbb 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x0C);
 80029ce:	200c      	movs	r0, #12
 80029d0:	f7fd ffb8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fd ffb5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x17);
 80029da:	2017      	movs	r0, #23
 80029dc:	f7fd ffb2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7fd ffaf 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x95);
 80029e6:	2095      	movs	r0, #149	; 0x95
 80029e8:	f7fd ffac 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7fd ffa9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xF3);
 80029f2:	20f3      	movs	r0, #243	; 0xf3
 80029f4:	f7fd ffa6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fd ffa3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xE6);
 80029fe:	20e6      	movs	r0, #230	; 0xe6
 8002a00:	f7fd ffa0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fd ff9d 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xC5);
 8002a0a:	20c5      	movs	r0, #197	; 0xc5
 8002a0c:	f7fd ff76 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x32);
 8002a10:	2032      	movs	r0, #50	; 0x32
 8002a12:	f7fd ff97 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7fd ff94 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x44);
 8002a1c:	2044      	movs	r0, #68	; 0x44
 8002a1e:	f7fd ff91 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7fd ff8e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x65);
 8002a28:	2065      	movs	r0, #101	; 0x65
 8002a2a:	f7fd ff8b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7fd ff88 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x76);
 8002a34:	2076      	movs	r0, #118	; 0x76
 8002a36:	f7fd ff85 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7fd ff82 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x88);
 8002a40:	2088      	movs	r0, #136	; 0x88
 8002a42:	f7fd ff7f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7fd ff7c 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xC6);
 8002a4c:	20c6      	movs	r0, #198	; 0xc6
 8002a4e:	f7fd ff55 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x20);
 8002a52:	2020      	movs	r0, #32
 8002a54:	f7fd ff76 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fd ff73 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x17);
 8002a5e:	2017      	movs	r0, #23
 8002a60:	f7fd ff70 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fd ff6d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x01);
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f7fd ff6a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7fd ff67 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xC7);
 8002a76:	20c7      	movs	r0, #199	; 0xc7
 8002a78:	f7fd ff40 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7fd ff61 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7fd ff5e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7fd ff5b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fd ff58 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xC8);
 8002a94:	20c8      	movs	r0, #200	; 0xc8
 8002a96:	f7fd ff31 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fd ff52 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7fd ff4f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fd ff4c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7fd ff49 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xC9);
 8002ab2:	20c9      	movs	r0, #201	; 0xc9
 8002ab4:	f7fd ff22 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f7fd ff43 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fd ff40 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f7fd ff3d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fd ff3a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f7fd ff37 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fd ff34 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7fd ff31 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7fd ff2e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7fd ff2b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7fd ff28 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fd ff25 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fd ff22 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7fd ff1f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7fd ff1c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7fd ff19 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fd ff16 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xE0);
 8002b18:	20e0      	movs	r0, #224	; 0xe0
 8002b1a:	f7fd feef 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x16);
 8002b1e:	2016      	movs	r0, #22
 8002b20:	f7fd ff10 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b24:	2000      	movs	r0, #0
 8002b26:	f7fd ff0d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x1C);
 8002b2a:	201c      	movs	r0, #28
 8002b2c:	f7fd ff0a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7fd ff07 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x21);
 8002b36:	2021      	movs	r0, #33	; 0x21
 8002b38:	f7fd ff04 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7fd ff01 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x36);
 8002b42:	2036      	movs	r0, #54	; 0x36
 8002b44:	f7fd fefe 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7fd fefb 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x46);
 8002b4e:	2046      	movs	r0, #70	; 0x46
 8002b50:	f7fd fef8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b54:	2000      	movs	r0, #0
 8002b56:	f7fd fef5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x52);
 8002b5a:	2052      	movs	r0, #82	; 0x52
 8002b5c:	f7fd fef2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7fd feef 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x64);
 8002b66:	2064      	movs	r0, #100	; 0x64
 8002b68:	f7fd feec 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fd fee9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x7A);
 8002b72:	207a      	movs	r0, #122	; 0x7a
 8002b74:	f7fd fee6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fd fee3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x8B);
 8002b7e:	208b      	movs	r0, #139	; 0x8b
 8002b80:	f7fd fee0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fd fedd 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x99);
 8002b8a:	2099      	movs	r0, #153	; 0x99
 8002b8c:	f7fd feda 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fd fed7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xA8);
 8002b96:	20a8      	movs	r0, #168	; 0xa8
 8002b98:	f7fd fed4 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fd fed1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xB9);
 8002ba2:	20b9      	movs	r0, #185	; 0xb9
 8002ba4:	f7fd fece 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fd fecb 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xC4);
 8002bae:	20c4      	movs	r0, #196	; 0xc4
 8002bb0:	f7fd fec8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fd fec5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xCA);
 8002bba:	20ca      	movs	r0, #202	; 0xca
 8002bbc:	f7fd fec2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7fd febf 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xD2);
 8002bc6:	20d2      	movs	r0, #210	; 0xd2
 8002bc8:	f7fd febc 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fd feb9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xD9);
 8002bd2:	20d9      	movs	r0, #217	; 0xd9
 8002bd4:	f7fd feb6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fd feb3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xE0);
 8002bde:	20e0      	movs	r0, #224	; 0xe0
 8002be0:	f7fd feb0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fd fead 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xF3);
 8002bea:	20f3      	movs	r0, #243	; 0xf3
 8002bec:	f7fd feaa 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7fd fea7 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xE1);
 8002bf6:	20e1      	movs	r0, #225	; 0xe1
 8002bf8:	f7fd fe80 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x16);
 8002bfc:	2016      	movs	r0, #22
 8002bfe:	f7fd fea1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7fd fe9e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x1C);
 8002c08:	201c      	movs	r0, #28
 8002c0a:	f7fd fe9b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f7fd fe98 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x22);
 8002c14:	2022      	movs	r0, #34	; 0x22
 8002c16:	f7fd fe95 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7fd fe92 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x36);
 8002c20:	2036      	movs	r0, #54	; 0x36
 8002c22:	f7fd fe8f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c26:	2000      	movs	r0, #0
 8002c28:	f7fd fe8c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x45);
 8002c2c:	2045      	movs	r0, #69	; 0x45
 8002c2e:	f7fd fe89 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7fd fe86 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x52);
 8002c38:	2052      	movs	r0, #82	; 0x52
 8002c3a:	f7fd fe83 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f7fd fe80 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x64);
 8002c44:	2064      	movs	r0, #100	; 0x64
 8002c46:	f7fd fe7d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7fd fe7a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x7A);
 8002c50:	207a      	movs	r0, #122	; 0x7a
 8002c52:	f7fd fe77 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f7fd fe74 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x8B);
 8002c5c:	208b      	movs	r0, #139	; 0x8b
 8002c5e:	f7fd fe71 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c62:	2000      	movs	r0, #0
 8002c64:	f7fd fe6e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x99);
 8002c68:	2099      	movs	r0, #153	; 0x99
 8002c6a:	f7fd fe6b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f7fd fe68 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xA8);
 8002c74:	20a8      	movs	r0, #168	; 0xa8
 8002c76:	f7fd fe65 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f7fd fe62 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xB9);
 8002c80:	20b9      	movs	r0, #185	; 0xb9
 8002c82:	f7fd fe5f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7fd fe5c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xC4);
 8002c8c:	20c4      	movs	r0, #196	; 0xc4
 8002c8e:	f7fd fe59 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7fd fe56 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xCA);
 8002c98:	20ca      	movs	r0, #202	; 0xca
 8002c9a:	f7fd fe53 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fd fe50 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xD2);
 8002ca4:	20d2      	movs	r0, #210	; 0xd2
 8002ca6:	f7fd fe4d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fd fe4a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xD8);
 8002cb0:	20d8      	movs	r0, #216	; 0xd8
 8002cb2:	f7fd fe47 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fd fe44 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xE0);
 8002cbc:	20e0      	movs	r0, #224	; 0xe0
 8002cbe:	f7fd fe41 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7fd fe3e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xF3);
 8002cc8:	20f3      	movs	r0, #243	; 0xf3
 8002cca:	f7fd fe3b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fd fe38 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xE2);
 8002cd4:	20e2      	movs	r0, #226	; 0xe2
 8002cd6:	f7fd fe11 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x05);
 8002cda:	2005      	movs	r0, #5
 8002cdc:	f7fd fe32 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7fd fe2f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x0B);
 8002ce6:	200b      	movs	r0, #11
 8002ce8:	f7fd fe2c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002cec:	2000      	movs	r0, #0
 8002cee:	f7fd fe29 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x1B);
 8002cf2:	201b      	movs	r0, #27
 8002cf4:	f7fd fe26 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7fd fe23 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x34);
 8002cfe:	2034      	movs	r0, #52	; 0x34
 8002d00:	f7fd fe20 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7fd fe1d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x44);
 8002d0a:	2044      	movs	r0, #68	; 0x44
 8002d0c:	f7fd fe1a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7fd fe17 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x4F);
 8002d16:	204f      	movs	r0, #79	; 0x4f
 8002d18:	f7fd fe14 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f7fd fe11 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x61);
 8002d22:	2061      	movs	r0, #97	; 0x61
 8002d24:	f7fd fe0e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7fd fe0b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x79);
 8002d2e:	2079      	movs	r0, #121	; 0x79
 8002d30:	f7fd fe08 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7fd fe05 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x88);
 8002d3a:	2088      	movs	r0, #136	; 0x88
 8002d3c:	f7fd fe02 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002d40:	2000      	movs	r0, #0
 8002d42:	f7fd fdff 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x97);
 8002d46:	2097      	movs	r0, #151	; 0x97
 8002d48:	f7fd fdfc 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7fd fdf9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xA6);
 8002d52:	20a6      	movs	r0, #166	; 0xa6
 8002d54:	f7fd fdf6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fd fdf3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xB7);
 8002d5e:	20b7      	movs	r0, #183	; 0xb7
 8002d60:	f7fd fdf0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7fd fded 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xC2);
 8002d6a:	20c2      	movs	r0, #194	; 0xc2
 8002d6c:	f7fd fdea 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fd fde7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xC7);
 8002d76:	20c7      	movs	r0, #199	; 0xc7
 8002d78:	f7fd fde4 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fd fde1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xD1);
 8002d82:	20d1      	movs	r0, #209	; 0xd1
 8002d84:	f7fd fdde 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fd fddb 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xD6);
 8002d8e:	20d6      	movs	r0, #214	; 0xd6
 8002d90:	f7fd fdd8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fd fdd5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xDD);
 8002d9a:	20dd      	movs	r0, #221	; 0xdd
 8002d9c:	f7fd fdd2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f7fd fdcf 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xF3);
 8002da6:	20f3      	movs	r0, #243	; 0xf3
 8002da8:	f7fd fdcc 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fd fdc9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xE3);
 8002db2:	20e3      	movs	r0, #227	; 0xe3
 8002db4:	f7fd fda2 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x05);
 8002db8:	2005      	movs	r0, #5
 8002dba:	f7fd fdc3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f7fd fdc0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xA);
 8002dc4:	200a      	movs	r0, #10
 8002dc6:	f7fd fdbd 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7fd fdba 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x1C);
 8002dd0:	201c      	movs	r0, #28
 8002dd2:	f7fd fdb7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f7fd fdb4 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x33);
 8002ddc:	2033      	movs	r0, #51	; 0x33
 8002dde:	f7fd fdb1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7fd fdae 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x44);
 8002de8:	2044      	movs	r0, #68	; 0x44
 8002dea:	f7fd fdab 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002dee:	2000      	movs	r0, #0
 8002df0:	f7fd fda8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x50);
 8002df4:	2050      	movs	r0, #80	; 0x50
 8002df6:	f7fd fda5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f7fd fda2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x62);
 8002e00:	2062      	movs	r0, #98	; 0x62
 8002e02:	f7fd fd9f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7fd fd9c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x78);
 8002e0c:	2078      	movs	r0, #120	; 0x78
 8002e0e:	f7fd fd99 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7fd fd96 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x88);
 8002e18:	2088      	movs	r0, #136	; 0x88
 8002e1a:	f7fd fd93 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f7fd fd90 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x97);
 8002e24:	2097      	movs	r0, #151	; 0x97
 8002e26:	f7fd fd8d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fd fd8a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xA6);
 8002e30:	20a6      	movs	r0, #166	; 0xa6
 8002e32:	f7fd fd87 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7fd fd84 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xB7);
 8002e3c:	20b7      	movs	r0, #183	; 0xb7
 8002e3e:	f7fd fd81 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7fd fd7e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xC2);
 8002e48:	20c2      	movs	r0, #194	; 0xc2
 8002e4a:	f7fd fd7b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fd fd78 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xC7);
 8002e54:	20c7      	movs	r0, #199	; 0xc7
 8002e56:	f7fd fd75 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fd fd72 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xD1);
 8002e60:	20d1      	movs	r0, #209	; 0xd1
 8002e62:	f7fd fd6f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7fd fd6c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xD5);
 8002e6c:	20d5      	movs	r0, #213	; 0xd5
 8002e6e:	f7fd fd69 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fd fd66 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xDD);
 8002e78:	20dd      	movs	r0, #221	; 0xdd
 8002e7a:	f7fd fd63 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fd fd60 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xF3);
 8002e84:	20f3      	movs	r0, #243	; 0xf3
 8002e86:	f7fd fd5d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fd fd5a 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xE4);
 8002e90:	20e4      	movs	r0, #228	; 0xe4
 8002e92:	f7fd fd33 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x01);
 8002e96:	2001      	movs	r0, #1
 8002e98:	f7fd fd54 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f7fd fd51 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x01);
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	f7fd fd4e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7fd fd4b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x02);
 8002eae:	2002      	movs	r0, #2
 8002eb0:	f7fd fd48 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7fd fd45 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x2A);
 8002eba:	202a      	movs	r0, #42	; 0x2a
 8002ebc:	f7fd fd42 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f7fd fd3f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x3C);
 8002ec6:	203c      	movs	r0, #60	; 0x3c
 8002ec8:	f7fd fd3c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f7fd fd39 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x4B);
 8002ed2:	204b      	movs	r0, #75	; 0x4b
 8002ed4:	f7fd fd36 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f7fd fd33 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x5D);
 8002ede:	205d      	movs	r0, #93	; 0x5d
 8002ee0:	f7fd fd30 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7fd fd2d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x74);
 8002eea:	2074      	movs	r0, #116	; 0x74
 8002eec:	f7fd fd2a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f7fd fd27 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x84);
 8002ef6:	2084      	movs	r0, #132	; 0x84
 8002ef8:	f7fd fd24 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7fd fd21 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x93);
 8002f02:	2093      	movs	r0, #147	; 0x93
 8002f04:	f7fd fd1e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7fd fd1b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xA2);
 8002f0e:	20a2      	movs	r0, #162	; 0xa2
 8002f10:	f7fd fd18 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7fd fd15 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xB3);
 8002f1a:	20b3      	movs	r0, #179	; 0xb3
 8002f1c:	f7fd fd12 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fd fd0f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xBE);
 8002f26:	20be      	movs	r0, #190	; 0xbe
 8002f28:	f7fd fd0c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7fd fd09 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xC4);
 8002f32:	20c4      	movs	r0, #196	; 0xc4
 8002f34:	f7fd fd06 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7fd fd03 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xCD);
 8002f3e:	20cd      	movs	r0, #205	; 0xcd
 8002f40:	f7fd fd00 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7fd fcfd 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xD3);
 8002f4a:	20d3      	movs	r0, #211	; 0xd3
 8002f4c:	f7fd fcfa 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fd fcf7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xDD);
 8002f56:	20dd      	movs	r0, #221	; 0xdd
 8002f58:	f7fd fcf4 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fd fcf1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xF3);
 8002f62:	20f3      	movs	r0, #243	; 0xf3
 8002f64:	f7fd fcee 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fd fceb 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0xE5);
 8002f6e:	20e5      	movs	r0, #229	; 0xe5
 8002f70:	f7fd fcc4 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fd fce5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f7fd fce2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fd fcdf 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f86:	2000      	movs	r0, #0
 8002f88:	f7fd fcdc 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x02);
 8002f8c:	2002      	movs	r0, #2
 8002f8e:	f7fd fcd9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7fd fcd6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x29);
 8002f98:	2029      	movs	r0, #41	; 0x29
 8002f9a:	f7fd fcd3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f7fd fcd0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x3C);
 8002fa4:	203c      	movs	r0, #60	; 0x3c
 8002fa6:	f7fd fccd 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f7fd fcca 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x4B);
 8002fb0:	204b      	movs	r0, #75	; 0x4b
 8002fb2:	f7fd fcc7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7fd fcc4 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x5D);
 8002fbc:	205d      	movs	r0, #93	; 0x5d
 8002fbe:	f7fd fcc1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7fd fcbe 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x74);
 8002fc8:	2074      	movs	r0, #116	; 0x74
 8002fca:	f7fd fcbb 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fd fcb8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x84);
 8002fd4:	2084      	movs	r0, #132	; 0x84
 8002fd6:	f7fd fcb5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f7fd fcb2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x93);
 8002fe0:	2093      	movs	r0, #147	; 0x93
 8002fe2:	f7fd fcaf 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fd fcac 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xA2);
 8002fec:	20a2      	movs	r0, #162	; 0xa2
 8002fee:	f7fd fca9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7fd fca6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xB3);
 8002ff8:	20b3      	movs	r0, #179	; 0xb3
 8002ffa:	f7fd fca3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8002ffe:	2000      	movs	r0, #0
 8003000:	f7fd fca0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xBE);
 8003004:	20be      	movs	r0, #190	; 0xbe
 8003006:	f7fd fc9d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800300a:	2000      	movs	r0, #0
 800300c:	f7fd fc9a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xC4);
 8003010:	20c4      	movs	r0, #196	; 0xc4
 8003012:	f7fd fc97 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003016:	2000      	movs	r0, #0
 8003018:	f7fd fc94 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xCD);
 800301c:	20cd      	movs	r0, #205	; 0xcd
 800301e:	f7fd fc91 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003022:	2000      	movs	r0, #0
 8003024:	f7fd fc8e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xD3);
 8003028:	20d3      	movs	r0, #211	; 0xd3
 800302a:	f7fd fc8b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800302e:	2000      	movs	r0, #0
 8003030:	f7fd fc88 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xDC);
 8003034:	20dc      	movs	r0, #220	; 0xdc
 8003036:	f7fd fc85 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800303a:	2000      	movs	r0, #0
 800303c:	f7fd fc82 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xF3);
 8003040:	20f3      	movs	r0, #243	; 0xf3
 8003042:	f7fd fc7f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003046:	2000      	movs	r0, #0
 8003048:	f7fd fc7c 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xE6);
 800304c:	20e6      	movs	r0, #230	; 0xe6
 800304e:	f7fd fc55 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x11);
 8003052:	2011      	movs	r0, #17
 8003054:	f7fd fc76 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003058:	2000      	movs	r0, #0
 800305a:	f7fd fc73 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x34);
 800305e:	2034      	movs	r0, #52	; 0x34
 8003060:	f7fd fc70 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003064:	2000      	movs	r0, #0
 8003066:	f7fd fc6d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x56);
 800306a:	2056      	movs	r0, #86	; 0x56
 800306c:	f7fd fc6a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003070:	2000      	movs	r0, #0
 8003072:	f7fd fc67 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x76);
 8003076:	2076      	movs	r0, #118	; 0x76
 8003078:	f7fd fc64 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800307c:	2000      	movs	r0, #0
 800307e:	f7fd fc61 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x77);
 8003082:	2077      	movs	r0, #119	; 0x77
 8003084:	f7fd fc5e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003088:	2000      	movs	r0, #0
 800308a:	f7fd fc5b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x66);
 800308e:	2066      	movs	r0, #102	; 0x66
 8003090:	f7fd fc58 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003094:	2000      	movs	r0, #0
 8003096:	f7fd fc55 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x88);
 800309a:	2088      	movs	r0, #136	; 0x88
 800309c:	f7fd fc52 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7fd fc4f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x99);
 80030a6:	2099      	movs	r0, #153	; 0x99
 80030a8:	f7fd fc4c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80030ac:	2000      	movs	r0, #0
 80030ae:	f7fd fc49 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xBB);
 80030b2:	20bb      	movs	r0, #187	; 0xbb
 80030b4:	f7fd fc46 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80030b8:	2000      	movs	r0, #0
 80030ba:	f7fd fc43 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x99);
 80030be:	2099      	movs	r0, #153	; 0x99
 80030c0:	f7fd fc40 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fd fc3d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x66);
 80030ca:	2066      	movs	r0, #102	; 0x66
 80030cc:	f7fd fc3a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80030d0:	2000      	movs	r0, #0
 80030d2:	f7fd fc37 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x55);
 80030d6:	2055      	movs	r0, #85	; 0x55
 80030d8:	f7fd fc34 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80030dc:	2000      	movs	r0, #0
 80030de:	f7fd fc31 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x55);
 80030e2:	2055      	movs	r0, #85	; 0x55
 80030e4:	f7fd fc2e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7fd fc2b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x45);
 80030ee:	2045      	movs	r0, #69	; 0x45
 80030f0:	f7fd fc28 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7fd fc25 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x43);
 80030fa:	2043      	movs	r0, #67	; 0x43
 80030fc:	f7fd fc22 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003100:	2000      	movs	r0, #0
 8003102:	f7fd fc1f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x44);
 8003106:	2044      	movs	r0, #68	; 0x44
 8003108:	f7fd fc1c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800310c:	2000      	movs	r0, #0
 800310e:	f7fd fc19 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xE7);
 8003112:	20e7      	movs	r0, #231	; 0xe7
 8003114:	f7fd fbf2 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x32);
 8003118:	2032      	movs	r0, #50	; 0x32
 800311a:	f7fd fc13 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800311e:	2000      	movs	r0, #0
 8003120:	f7fd fc10 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x55);
 8003124:	2055      	movs	r0, #85	; 0x55
 8003126:	f7fd fc0d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800312a:	2000      	movs	r0, #0
 800312c:	f7fd fc0a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x76);
 8003130:	2076      	movs	r0, #118	; 0x76
 8003132:	f7fd fc07 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003136:	2000      	movs	r0, #0
 8003138:	f7fd fc04 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x66);
 800313c:	2066      	movs	r0, #102	; 0x66
 800313e:	f7fd fc01 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003142:	2000      	movs	r0, #0
 8003144:	f7fd fbfe 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x67);
 8003148:	2067      	movs	r0, #103	; 0x67
 800314a:	f7fd fbfb 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800314e:	2000      	movs	r0, #0
 8003150:	f7fd fbf8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x67);
 8003154:	2067      	movs	r0, #103	; 0x67
 8003156:	f7fd fbf5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800315a:	2000      	movs	r0, #0
 800315c:	f7fd fbf2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x87);
 8003160:	2087      	movs	r0, #135	; 0x87
 8003162:	f7fd fbef 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003166:	2000      	movs	r0, #0
 8003168:	f7fd fbec 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x99);
 800316c:	2099      	movs	r0, #153	; 0x99
 800316e:	f7fd fbe9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003172:	2000      	movs	r0, #0
 8003174:	f7fd fbe6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xBB);
 8003178:	20bb      	movs	r0, #187	; 0xbb
 800317a:	f7fd fbe3 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800317e:	2000      	movs	r0, #0
 8003180:	f7fd fbe0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x99);
 8003184:	2099      	movs	r0, #153	; 0x99
 8003186:	f7fd fbdd 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800318a:	2000      	movs	r0, #0
 800318c:	f7fd fbda 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x77);
 8003190:	2077      	movs	r0, #119	; 0x77
 8003192:	f7fd fbd7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003196:	2000      	movs	r0, #0
 8003198:	f7fd fbd4 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x44);
 800319c:	2044      	movs	r0, #68	; 0x44
 800319e:	f7fd fbd1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7fd fbce 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x56);
 80031a8:	2056      	movs	r0, #86	; 0x56
 80031aa:	f7fd fbcb 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f7fd fbc8 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x23);
 80031b4:	2023      	movs	r0, #35	; 0x23
 80031b6:	f7fd fbc5 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fd fbc2 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x33);
 80031c0:	2033      	movs	r0, #51	; 0x33
 80031c2:	f7fd fbbf 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7fd fbbc 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x45);
 80031cc:	2045      	movs	r0, #69	; 0x45
 80031ce:	f7fd fbb9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7fd fbb6 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xE8);
 80031d8:	20e8      	movs	r0, #232	; 0xe8
 80031da:	f7fd fb8f 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 80031de:	2000      	movs	r0, #0
 80031e0:	f7fd fbb0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7fd fbad 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x99);
 80031ea:	2099      	movs	r0, #153	; 0x99
 80031ec:	f7fd fbaa 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7fd fba7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x87);
 80031f6:	2087      	movs	r0, #135	; 0x87
 80031f8:	f7fd fba4 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80031fc:	2000      	movs	r0, #0
 80031fe:	f7fd fba1 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x88);
 8003202:	2088      	movs	r0, #136	; 0x88
 8003204:	f7fd fb9e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003208:	2000      	movs	r0, #0
 800320a:	f7fd fb9b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x77);
 800320e:	2077      	movs	r0, #119	; 0x77
 8003210:	f7fd fb98 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003214:	2000      	movs	r0, #0
 8003216:	f7fd fb95 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x66);
 800321a:	2066      	movs	r0, #102	; 0x66
 800321c:	f7fd fb92 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003220:	2000      	movs	r0, #0
 8003222:	f7fd fb8f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x88);
 8003226:	2088      	movs	r0, #136	; 0x88
 8003228:	f7fd fb8c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800322c:	2000      	movs	r0, #0
 800322e:	f7fd fb89 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xAA);
 8003232:	20aa      	movs	r0, #170	; 0xaa
 8003234:	f7fd fb86 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003238:	2000      	movs	r0, #0
 800323a:	f7fd fb83 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0xBB);
 800323e:	20bb      	movs	r0, #187	; 0xbb
 8003240:	f7fd fb80 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003244:	2000      	movs	r0, #0
 8003246:	f7fd fb7d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x99);
 800324a:	2099      	movs	r0, #153	; 0x99
 800324c:	f7fd fb7a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003250:	2000      	movs	r0, #0
 8003252:	f7fd fb77 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x66);
 8003256:	2066      	movs	r0, #102	; 0x66
 8003258:	f7fd fb74 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800325c:	2000      	movs	r0, #0
 800325e:	f7fd fb71 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x55);
 8003262:	2055      	movs	r0, #85	; 0x55
 8003264:	f7fd fb6e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003268:	2000      	movs	r0, #0
 800326a:	f7fd fb6b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x55);
 800326e:	2055      	movs	r0, #85	; 0x55
 8003270:	f7fd fb68 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003274:	2000      	movs	r0, #0
 8003276:	f7fd fb65 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x44);
 800327a:	2044      	movs	r0, #68	; 0x44
 800327c:	f7fd fb62 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003280:	2000      	movs	r0, #0
 8003282:	f7fd fb5f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x44);
 8003286:	2044      	movs	r0, #68	; 0x44
 8003288:	f7fd fb5c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800328c:	2000      	movs	r0, #0
 800328e:	f7fd fb59 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x55);
 8003292:	2055      	movs	r0, #85	; 0x55
 8003294:	f7fd fb56 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003298:	2000      	movs	r0, #0
 800329a:	f7fd fb53 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xE9);
 800329e:	20e9      	movs	r0, #233	; 0xe9
 80032a0:	f7fd fb2c 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0xAA);
 80032a4:	20aa      	movs	r0, #170	; 0xaa
 80032a6:	f7fd fb4d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7fd fb4a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7fd fb47 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80032b6:	2000      	movs	r0, #0
 80032b8:	f7fd fb44 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f7fd fb1d 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0xAA);
 80032c2:	20aa      	movs	r0, #170	; 0xaa
 80032c4:	f7fd fb3e 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xCF);
 80032c8:	20cf      	movs	r0, #207	; 0xcf
 80032ca:	f7fd fb17 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7fd fb38 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7fd fb35 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80032da:	2000      	movs	r0, #0
 80032dc:	f7fd fb32 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7fd fb2f 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f7fd fb2c 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7fd fb29 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80032f2:	2000      	movs	r0, #0
 80032f4:	f7fd fb26 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7fd fb23 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 80032fe:	2000      	movs	r0, #0
 8003300:	f7fd fb20 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003304:	2000      	movs	r0, #0
 8003306:	f7fd fb1d 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800330a:	2000      	movs	r0, #0
 800330c:	f7fd fb1a 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003310:	2000      	movs	r0, #0
 8003312:	f7fd fb17 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003316:	2000      	movs	r0, #0
 8003318:	f7fd fb14 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800331c:	2000      	movs	r0, #0
 800331e:	f7fd fb11 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003322:	2000      	movs	r0, #0
 8003324:	f7fd fb0e 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003328:	2000      	movs	r0, #0
 800332a:	f7fd fb0b 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800332e:	2000      	movs	r0, #0
 8003330:	f7fd fb08 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xF0);
 8003334:	20f0      	movs	r0, #240	; 0xf0
 8003336:	f7fd fae1 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 800333a:	2000      	movs	r0, #0
 800333c:	f7fd fb02 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x50);
 8003340:	2050      	movs	r0, #80	; 0x50
 8003342:	f7fd faff 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003346:	2000      	movs	r0, #0
 8003348:	f7fd fafc 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800334c:	2000      	movs	r0, #0
 800334e:	f7fd faf9 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 8003352:	2000      	movs	r0, #0
 8003354:	f7fd faf6 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xF3);
 8003358:	20f3      	movs	r0, #243	; 0xf3
 800335a:	f7fd facf 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 800335e:	2000      	movs	r0, #0
 8003360:	f7fd faf0 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0xF9);
 8003364:	20f9      	movs	r0, #249	; 0xf9
 8003366:	f7fd fac9 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x06);
 800336a:	2006      	movs	r0, #6
 800336c:	f7fd faea 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x10);
 8003370:	2010      	movs	r0, #16
 8003372:	f7fd fae7 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x29);
 8003376:	2029      	movs	r0, #41	; 0x29
 8003378:	f7fd fae4 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_DATAX(0x00);
 800337c:	2000      	movs	r0, #0
 800337e:	f7fd fae1 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0x3A);
 8003382:	203a      	movs	r0, #58	; 0x3a
 8003384:	f7fd faba 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x55);	//66
 8003388:	2055      	movs	r0, #85	; 0x55
 800338a:	f7fd fadb 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0x11);
 800338e:	2011      	movs	r0, #17
 8003390:	f7fd fab4 	bl	80008fc <LCD_WR_REG>
        HAL_Delay(100);
 8003394:	2064      	movs	r0, #100	; 0x64
 8003396:	f003 f87d 	bl	8006494 <HAL_Delay>
        LCD_WR_REG(0x29);
 800339a:	2029      	movs	r0, #41	; 0x29
 800339c:	f7fd faae 	bl	80008fc <LCD_WR_REG>
        LCD_WR_REG(0x35);
 80033a0:	2035      	movs	r0, #53	; 0x35
 80033a2:	f7fd faab 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x00);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7fd facc 	bl	8000944 <LCD_WR_DATAX>

        LCD_WR_REG(0x51);
 80033ac:	2051      	movs	r0, #81	; 0x51
 80033ae:	f7fd faa5 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0xFF);
 80033b2:	20ff      	movs	r0, #255	; 0xff
 80033b4:	f7fd fac6 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0x53);
 80033b8:	2053      	movs	r0, #83	; 0x53
 80033ba:	f7fd fa9f 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x2C);
 80033be:	202c      	movs	r0, #44	; 0x2c
 80033c0:	f7fd fac0 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0x55);
 80033c4:	2055      	movs	r0, #85	; 0x55
 80033c6:	f7fd fa99 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATAX(0x82);
 80033ca:	2082      	movs	r0, #130	; 0x82
 80033cc:	f7fd faba 	bl	8000944 <LCD_WR_DATAX>
        LCD_WR_REG(0x2c);
 80033d0:	202c      	movs	r0, #44	; 0x2c
 80033d2:	f7fd fa93 	bl	80008fc <LCD_WR_REG>
 80033d6:	f002 bca1 	b.w	8005d1c <LCD_Init+0x3e34>
    } else if (lcddev.id == 0x5510) {
 80033da:	4b04      	ldr	r3, [pc, #16]	; (80033ec <LCD_Init+0x1504>)
 80033dc:	889b      	ldrh	r3, [r3, #4]
 80033de:	f245 5210 	movw	r2, #21776	; 0x5510
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f040 8782 	bne.w	80042ec <LCD_Init+0x2404>
 80033e8:	e002      	b.n	80033f0 <LCD_Init+0x1508>
 80033ea:	bf00      	nop
 80033ec:	20000030 	.word	0x20000030
        LCD_WriteReg(0xF000, 0x55);
 80033f0:	2155      	movs	r1, #85	; 0x55
 80033f2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80033f6:	f7fd fb0d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xF001, 0xAA);
 80033fa:	21aa      	movs	r1, #170	; 0xaa
 80033fc:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003400:	f7fd fb08 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xF002, 0x52);
 8003404:	2152      	movs	r1, #82	; 0x52
 8003406:	f24f 0002 	movw	r0, #61442	; 0xf002
 800340a:	f7fd fb03 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xF003, 0x08);
 800340e:	2108      	movs	r1, #8
 8003410:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003414:	f7fd fafe 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xF004, 0x01);
 8003418:	2101      	movs	r1, #1
 800341a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800341e:	f7fd faf9 	bl	8000a14 <LCD_WriteReg>
        //AVDD Set AVDD 5.2V
        LCD_WriteReg(0xB000, 0x0D);
 8003422:	210d      	movs	r1, #13
 8003424:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003428:	f7fd faf4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB001, 0x0D);
 800342c:	210d      	movs	r1, #13
 800342e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8003432:	f7fd faef 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB002, 0x0D);
 8003436:	210d      	movs	r1, #13
 8003438:	f24b 0002 	movw	r0, #45058	; 0xb002
 800343c:	f7fd faea 	bl	8000a14 <LCD_WriteReg>
        //AVDD ratio
        LCD_WriteReg(0xB600, 0x34);
 8003440:	2134      	movs	r1, #52	; 0x34
 8003442:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003446:	f7fd fae5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB601, 0x34);
 800344a:	2134      	movs	r1, #52	; 0x34
 800344c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003450:	f7fd fae0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB602, 0x34);
 8003454:	2134      	movs	r1, #52	; 0x34
 8003456:	f24b 6002 	movw	r0, #46594	; 0xb602
 800345a:	f7fd fadb 	bl	8000a14 <LCD_WriteReg>
        //AVEE -5.2V
        LCD_WriteReg(0xB100, 0x0D);
 800345e:	210d      	movs	r1, #13
 8003460:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003464:	f7fd fad6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB101, 0x0D);
 8003468:	210d      	movs	r1, #13
 800346a:	f24b 1001 	movw	r0, #45313	; 0xb101
 800346e:	f7fd fad1 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB102, 0x0D);
 8003472:	210d      	movs	r1, #13
 8003474:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003478:	f7fd facc 	bl	8000a14 <LCD_WriteReg>
        //AVEE ratio
        LCD_WriteReg(0xB700, 0x34);
 800347c:	2134      	movs	r1, #52	; 0x34
 800347e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003482:	f7fd fac7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB701, 0x34);
 8003486:	2134      	movs	r1, #52	; 0x34
 8003488:	f24b 7001 	movw	r0, #46849	; 0xb701
 800348c:	f7fd fac2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB702, 0x34);
 8003490:	2134      	movs	r1, #52	; 0x34
 8003492:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003496:	f7fd fabd 	bl	8000a14 <LCD_WriteReg>
        //VCL -2.5V
        LCD_WriteReg(0xB200, 0x00);
 800349a:	2100      	movs	r1, #0
 800349c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80034a0:	f7fd fab8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB201, 0x00);
 80034a4:	2100      	movs	r1, #0
 80034a6:	f24b 2001 	movw	r0, #45569	; 0xb201
 80034aa:	f7fd fab3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB202, 0x00);
 80034ae:	2100      	movs	r1, #0
 80034b0:	f24b 2002 	movw	r0, #45570	; 0xb202
 80034b4:	f7fd faae 	bl	8000a14 <LCD_WriteReg>
        //VCL ratio
        LCD_WriteReg(0xB800, 0x24);
 80034b8:	2124      	movs	r1, #36	; 0x24
 80034ba:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80034be:	f7fd faa9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB801, 0x24);
 80034c2:	2124      	movs	r1, #36	; 0x24
 80034c4:	f64b 0001 	movw	r0, #47105	; 0xb801
 80034c8:	f7fd faa4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB802, 0x24);
 80034cc:	2124      	movs	r1, #36	; 0x24
 80034ce:	f64b 0002 	movw	r0, #47106	; 0xb802
 80034d2:	f7fd fa9f 	bl	8000a14 <LCD_WriteReg>
        //VGH 15V (Free pump)
        LCD_WriteReg(0xBF00, 0x01);
 80034d6:	2101      	movs	r1, #1
 80034d8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80034dc:	f7fd fa9a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB300, 0x0F);
 80034e0:	210f      	movs	r1, #15
 80034e2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80034e6:	f7fd fa95 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB301, 0x0F);
 80034ea:	210f      	movs	r1, #15
 80034ec:	f24b 3001 	movw	r0, #45825	; 0xb301
 80034f0:	f7fd fa90 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB302, 0x0F);
 80034f4:	210f      	movs	r1, #15
 80034f6:	f24b 3002 	movw	r0, #45826	; 0xb302
 80034fa:	f7fd fa8b 	bl	8000a14 <LCD_WriteReg>
        //VGH ratio
        LCD_WriteReg(0xB900, 0x34);
 80034fe:	2134      	movs	r1, #52	; 0x34
 8003500:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003504:	f7fd fa86 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB901, 0x34);
 8003508:	2134      	movs	r1, #52	; 0x34
 800350a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800350e:	f7fd fa81 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB902, 0x34);
 8003512:	2134      	movs	r1, #52	; 0x34
 8003514:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003518:	f7fd fa7c 	bl	8000a14 <LCD_WriteReg>
        //VGL_REG -10V
        LCD_WriteReg(0xB500, 0x08);
 800351c:	2108      	movs	r1, #8
 800351e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8003522:	f7fd fa77 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB501, 0x08);
 8003526:	2108      	movs	r1, #8
 8003528:	f24b 5001 	movw	r0, #46337	; 0xb501
 800352c:	f7fd fa72 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB502, 0x08);
 8003530:	2108      	movs	r1, #8
 8003532:	f24b 5002 	movw	r0, #46338	; 0xb502
 8003536:	f7fd fa6d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xC200, 0x03);
 800353a:	2103      	movs	r1, #3
 800353c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003540:	f7fd fa68 	bl	8000a14 <LCD_WriteReg>
        //VGLX ratio
        LCD_WriteReg(0xBA00, 0x24);
 8003544:	2124      	movs	r1, #36	; 0x24
 8003546:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800354a:	f7fd fa63 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xBA01, 0x24);
 800354e:	2124      	movs	r1, #36	; 0x24
 8003550:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003554:	f7fd fa5e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xBA02, 0x24);
 8003558:	2124      	movs	r1, #36	; 0x24
 800355a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800355e:	f7fd fa59 	bl	8000a14 <LCD_WriteReg>
        //VGMP/VGSP 4.5V/0V
        LCD_WriteReg(0xBC00, 0x00);
 8003562:	2100      	movs	r1, #0
 8003564:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003568:	f7fd fa54 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xBC01, 0x78);
 800356c:	2178      	movs	r1, #120	; 0x78
 800356e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003572:	f7fd fa4f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xBC02, 0x00);
 8003576:	2100      	movs	r1, #0
 8003578:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800357c:	f7fd fa4a 	bl	8000a14 <LCD_WriteReg>
        //VGMN/VGSN -4.5V/0V
        LCD_WriteReg(0xBD00, 0x00);
 8003580:	2100      	movs	r1, #0
 8003582:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003586:	f7fd fa45 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xBD01, 0x78);
 800358a:	2178      	movs	r1, #120	; 0x78
 800358c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003590:	f7fd fa40 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xBD02, 0x00);
 8003594:	2100      	movs	r1, #0
 8003596:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800359a:	f7fd fa3b 	bl	8000a14 <LCD_WriteReg>
        //VCOM
        LCD_WriteReg(0xBE00, 0x00);
 800359e:	2100      	movs	r1, #0
 80035a0:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80035a4:	f7fd fa36 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xBE01, 0x64);
 80035a8:	2164      	movs	r1, #100	; 0x64
 80035aa:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80035ae:	f7fd fa31 	bl	8000a14 <LCD_WriteReg>
        //Gamma Setting
        LCD_WriteReg(0xD100, 0x00);
 80035b2:	2100      	movs	r1, #0
 80035b4:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80035b8:	f7fd fa2c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD101, 0x33);
 80035bc:	2133      	movs	r1, #51	; 0x33
 80035be:	f24d 1001 	movw	r0, #53505	; 0xd101
 80035c2:	f7fd fa27 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD102, 0x00);
 80035c6:	2100      	movs	r1, #0
 80035c8:	f24d 1002 	movw	r0, #53506	; 0xd102
 80035cc:	f7fd fa22 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD103, 0x34);
 80035d0:	2134      	movs	r1, #52	; 0x34
 80035d2:	f24d 1003 	movw	r0, #53507	; 0xd103
 80035d6:	f7fd fa1d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD104, 0x00);
 80035da:	2100      	movs	r1, #0
 80035dc:	f24d 1004 	movw	r0, #53508	; 0xd104
 80035e0:	f7fd fa18 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD105, 0x3A);
 80035e4:	213a      	movs	r1, #58	; 0x3a
 80035e6:	f24d 1005 	movw	r0, #53509	; 0xd105
 80035ea:	f7fd fa13 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD106, 0x00);
 80035ee:	2100      	movs	r1, #0
 80035f0:	f24d 1006 	movw	r0, #53510	; 0xd106
 80035f4:	f7fd fa0e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD107, 0x4A);
 80035f8:	214a      	movs	r1, #74	; 0x4a
 80035fa:	f24d 1007 	movw	r0, #53511	; 0xd107
 80035fe:	f7fd fa09 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD108, 0x00);
 8003602:	2100      	movs	r1, #0
 8003604:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003608:	f7fd fa04 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD109, 0x5C);
 800360c:	215c      	movs	r1, #92	; 0x5c
 800360e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003612:	f7fd f9ff 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD10A, 0x00);
 8003616:	2100      	movs	r1, #0
 8003618:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800361c:	f7fd f9fa 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD10B, 0x81);
 8003620:	2181      	movs	r1, #129	; 0x81
 8003622:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8003626:	f7fd f9f5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD10C, 0x00);
 800362a:	2100      	movs	r1, #0
 800362c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003630:	f7fd f9f0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD10D, 0xA6);
 8003634:	21a6      	movs	r1, #166	; 0xa6
 8003636:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800363a:	f7fd f9eb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD10E, 0x00);
 800363e:	2100      	movs	r1, #0
 8003640:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003644:	f7fd f9e6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD10F, 0xE5);
 8003648:	21e5      	movs	r1, #229	; 0xe5
 800364a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800364e:	f7fd f9e1 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD110, 0x01);
 8003652:	2101      	movs	r1, #1
 8003654:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003658:	f7fd f9dc 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD111, 0x13);
 800365c:	2113      	movs	r1, #19
 800365e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8003662:	f7fd f9d7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD112, 0x01);
 8003666:	2101      	movs	r1, #1
 8003668:	f24d 1012 	movw	r0, #53522	; 0xd112
 800366c:	f7fd f9d2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD113, 0x54);
 8003670:	2154      	movs	r1, #84	; 0x54
 8003672:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003676:	f7fd f9cd 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD114, 0x01);
 800367a:	2101      	movs	r1, #1
 800367c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003680:	f7fd f9c8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD115, 0x82);
 8003684:	2182      	movs	r1, #130	; 0x82
 8003686:	f24d 1015 	movw	r0, #53525	; 0xd115
 800368a:	f7fd f9c3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD116, 0x01);
 800368e:	2101      	movs	r1, #1
 8003690:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003694:	f7fd f9be 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD117, 0xCA);
 8003698:	21ca      	movs	r1, #202	; 0xca
 800369a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800369e:	f7fd f9b9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD118, 0x02);
 80036a2:	2102      	movs	r1, #2
 80036a4:	f24d 1018 	movw	r0, #53528	; 0xd118
 80036a8:	f7fd f9b4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD119, 0x00);
 80036ac:	2100      	movs	r1, #0
 80036ae:	f24d 1019 	movw	r0, #53529	; 0xd119
 80036b2:	f7fd f9af 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD11A, 0x02);
 80036b6:	2102      	movs	r1, #2
 80036b8:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80036bc:	f7fd f9aa 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD11B, 0x01);
 80036c0:	2101      	movs	r1, #1
 80036c2:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80036c6:	f7fd f9a5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD11C, 0x02);
 80036ca:	2102      	movs	r1, #2
 80036cc:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80036d0:	f7fd f9a0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD11D, 0x34);
 80036d4:	2134      	movs	r1, #52	; 0x34
 80036d6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80036da:	f7fd f99b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD11E, 0x02);
 80036de:	2102      	movs	r1, #2
 80036e0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80036e4:	f7fd f996 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD11F, 0x67);
 80036e8:	2167      	movs	r1, #103	; 0x67
 80036ea:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80036ee:	f7fd f991 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD120, 0x02);
 80036f2:	2102      	movs	r1, #2
 80036f4:	f24d 1020 	movw	r0, #53536	; 0xd120
 80036f8:	f7fd f98c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD121, 0x84);
 80036fc:	2184      	movs	r1, #132	; 0x84
 80036fe:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003702:	f7fd f987 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD122, 0x02);
 8003706:	2102      	movs	r1, #2
 8003708:	f24d 1022 	movw	r0, #53538	; 0xd122
 800370c:	f7fd f982 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD123, 0xA4);
 8003710:	21a4      	movs	r1, #164	; 0xa4
 8003712:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003716:	f7fd f97d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD124, 0x02);
 800371a:	2102      	movs	r1, #2
 800371c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003720:	f7fd f978 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD125, 0xB7);
 8003724:	21b7      	movs	r1, #183	; 0xb7
 8003726:	f24d 1025 	movw	r0, #53541	; 0xd125
 800372a:	f7fd f973 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD126, 0x02);
 800372e:	2102      	movs	r1, #2
 8003730:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003734:	f7fd f96e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD127, 0xCF);
 8003738:	21cf      	movs	r1, #207	; 0xcf
 800373a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800373e:	f7fd f969 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD128, 0x02);
 8003742:	2102      	movs	r1, #2
 8003744:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003748:	f7fd f964 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD129, 0xDE);
 800374c:	21de      	movs	r1, #222	; 0xde
 800374e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003752:	f7fd f95f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD12A, 0x02);
 8003756:	2102      	movs	r1, #2
 8003758:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800375c:	f7fd f95a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD12B, 0xF2);
 8003760:	21f2      	movs	r1, #242	; 0xf2
 8003762:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003766:	f7fd f955 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD12C, 0x02);
 800376a:	2102      	movs	r1, #2
 800376c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003770:	f7fd f950 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD12D, 0xFE);
 8003774:	21fe      	movs	r1, #254	; 0xfe
 8003776:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800377a:	f7fd f94b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD12E, 0x03);
 800377e:	2103      	movs	r1, #3
 8003780:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003784:	f7fd f946 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD12F, 0x10);
 8003788:	2110      	movs	r1, #16
 800378a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800378e:	f7fd f941 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD130, 0x03);
 8003792:	2103      	movs	r1, #3
 8003794:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003798:	f7fd f93c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD131, 0x33);
 800379c:	2133      	movs	r1, #51	; 0x33
 800379e:	f24d 1031 	movw	r0, #53553	; 0xd131
 80037a2:	f7fd f937 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD132, 0x03);
 80037a6:	2103      	movs	r1, #3
 80037a8:	f24d 1032 	movw	r0, #53554	; 0xd132
 80037ac:	f7fd f932 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD133, 0x6D);
 80037b0:	216d      	movs	r1, #109	; 0x6d
 80037b2:	f24d 1033 	movw	r0, #53555	; 0xd133
 80037b6:	f7fd f92d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD200, 0x00);
 80037ba:	2100      	movs	r1, #0
 80037bc:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80037c0:	f7fd f928 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD201, 0x33);
 80037c4:	2133      	movs	r1, #51	; 0x33
 80037c6:	f24d 2001 	movw	r0, #53761	; 0xd201
 80037ca:	f7fd f923 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD202, 0x00);
 80037ce:	2100      	movs	r1, #0
 80037d0:	f24d 2002 	movw	r0, #53762	; 0xd202
 80037d4:	f7fd f91e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD203, 0x34);
 80037d8:	2134      	movs	r1, #52	; 0x34
 80037da:	f24d 2003 	movw	r0, #53763	; 0xd203
 80037de:	f7fd f919 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD204, 0x00);
 80037e2:	2100      	movs	r1, #0
 80037e4:	f24d 2004 	movw	r0, #53764	; 0xd204
 80037e8:	f7fd f914 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD205, 0x3A);
 80037ec:	213a      	movs	r1, #58	; 0x3a
 80037ee:	f24d 2005 	movw	r0, #53765	; 0xd205
 80037f2:	f7fd f90f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD206, 0x00);
 80037f6:	2100      	movs	r1, #0
 80037f8:	f24d 2006 	movw	r0, #53766	; 0xd206
 80037fc:	f7fd f90a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD207, 0x4A);
 8003800:	214a      	movs	r1, #74	; 0x4a
 8003802:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003806:	f7fd f905 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD208, 0x00);
 800380a:	2100      	movs	r1, #0
 800380c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003810:	f7fd f900 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD209, 0x5C);
 8003814:	215c      	movs	r1, #92	; 0x5c
 8003816:	f24d 2009 	movw	r0, #53769	; 0xd209
 800381a:	f7fd f8fb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD20A, 0x00);
 800381e:	2100      	movs	r1, #0
 8003820:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003824:	f7fd f8f6 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0xD20B, 0x81);
 8003828:	2181      	movs	r1, #129	; 0x81
 800382a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 800382e:	f7fd f8f1 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD20C, 0x00);
 8003832:	2100      	movs	r1, #0
 8003834:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003838:	f7fd f8ec 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD20D, 0xA6);
 800383c:	21a6      	movs	r1, #166	; 0xa6
 800383e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003842:	f7fd f8e7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD20E, 0x00);
 8003846:	2100      	movs	r1, #0
 8003848:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800384c:	f7fd f8e2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD20F, 0xE5);
 8003850:	21e5      	movs	r1, #229	; 0xe5
 8003852:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003856:	f7fd f8dd 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD210, 0x01);
 800385a:	2101      	movs	r1, #1
 800385c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003860:	f7fd f8d8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD211, 0x13);
 8003864:	2113      	movs	r1, #19
 8003866:	f24d 2011 	movw	r0, #53777	; 0xd211
 800386a:	f7fd f8d3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD212, 0x01);
 800386e:	2101      	movs	r1, #1
 8003870:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003874:	f7fd f8ce 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD213, 0x54);
 8003878:	2154      	movs	r1, #84	; 0x54
 800387a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800387e:	f7fd f8c9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD214, 0x01);
 8003882:	2101      	movs	r1, #1
 8003884:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003888:	f7fd f8c4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD215, 0x82);
 800388c:	2182      	movs	r1, #130	; 0x82
 800388e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003892:	f7fd f8bf 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD216, 0x01);
 8003896:	2101      	movs	r1, #1
 8003898:	f24d 2016 	movw	r0, #53782	; 0xd216
 800389c:	f7fd f8ba 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD217, 0xCA);
 80038a0:	21ca      	movs	r1, #202	; 0xca
 80038a2:	f24d 2017 	movw	r0, #53783	; 0xd217
 80038a6:	f7fd f8b5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD218, 0x02);
 80038aa:	2102      	movs	r1, #2
 80038ac:	f24d 2018 	movw	r0, #53784	; 0xd218
 80038b0:	f7fd f8b0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD219, 0x00);
 80038b4:	2100      	movs	r1, #0
 80038b6:	f24d 2019 	movw	r0, #53785	; 0xd219
 80038ba:	f7fd f8ab 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD21A, 0x02);
 80038be:	2102      	movs	r1, #2
 80038c0:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80038c4:	f7fd f8a6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD21B, 0x01);
 80038c8:	2101      	movs	r1, #1
 80038ca:	f24d 201b 	movw	r0, #53787	; 0xd21b
 80038ce:	f7fd f8a1 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD21C, 0x02);
 80038d2:	2102      	movs	r1, #2
 80038d4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80038d8:	f7fd f89c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD21D, 0x34);
 80038dc:	2134      	movs	r1, #52	; 0x34
 80038de:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80038e2:	f7fd f897 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD21E, 0x02);
 80038e6:	2102      	movs	r1, #2
 80038e8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80038ec:	f7fd f892 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD21F, 0x67);
 80038f0:	2167      	movs	r1, #103	; 0x67
 80038f2:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80038f6:	f7fd f88d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD220, 0x02);
 80038fa:	2102      	movs	r1, #2
 80038fc:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003900:	f7fd f888 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD221, 0x84);
 8003904:	2184      	movs	r1, #132	; 0x84
 8003906:	f24d 2021 	movw	r0, #53793	; 0xd221
 800390a:	f7fd f883 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD222, 0x02);
 800390e:	2102      	movs	r1, #2
 8003910:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003914:	f7fd f87e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD223, 0xA4);
 8003918:	21a4      	movs	r1, #164	; 0xa4
 800391a:	f24d 2023 	movw	r0, #53795	; 0xd223
 800391e:	f7fd f879 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD224, 0x02);
 8003922:	2102      	movs	r1, #2
 8003924:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003928:	f7fd f874 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD225, 0xB7);
 800392c:	21b7      	movs	r1, #183	; 0xb7
 800392e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003932:	f7fd f86f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD226, 0x02);
 8003936:	2102      	movs	r1, #2
 8003938:	f24d 2026 	movw	r0, #53798	; 0xd226
 800393c:	f7fd f86a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD227, 0xCF);
 8003940:	21cf      	movs	r1, #207	; 0xcf
 8003942:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003946:	f7fd f865 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD228, 0x02);
 800394a:	2102      	movs	r1, #2
 800394c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003950:	f7fd f860 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD229, 0xDE);
 8003954:	21de      	movs	r1, #222	; 0xde
 8003956:	f24d 2029 	movw	r0, #53801	; 0xd229
 800395a:	f7fd f85b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD22A, 0x02);
 800395e:	2102      	movs	r1, #2
 8003960:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003964:	f7fd f856 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD22B, 0xF2);
 8003968:	21f2      	movs	r1, #242	; 0xf2
 800396a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800396e:	f7fd f851 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD22C, 0x02);
 8003972:	2102      	movs	r1, #2
 8003974:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003978:	f7fd f84c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD22D, 0xFE);
 800397c:	21fe      	movs	r1, #254	; 0xfe
 800397e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003982:	f7fd f847 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD22E, 0x03);
 8003986:	2103      	movs	r1, #3
 8003988:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800398c:	f7fd f842 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD22F, 0x10);
 8003990:	2110      	movs	r1, #16
 8003992:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003996:	f7fd f83d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD230, 0x03);
 800399a:	2103      	movs	r1, #3
 800399c:	f24d 2030 	movw	r0, #53808	; 0xd230
 80039a0:	f7fd f838 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD231, 0x33);
 80039a4:	2133      	movs	r1, #51	; 0x33
 80039a6:	f24d 2031 	movw	r0, #53809	; 0xd231
 80039aa:	f7fd f833 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD232, 0x03);
 80039ae:	2103      	movs	r1, #3
 80039b0:	f24d 2032 	movw	r0, #53810	; 0xd232
 80039b4:	f7fd f82e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD233, 0x6D);
 80039b8:	216d      	movs	r1, #109	; 0x6d
 80039ba:	f24d 2033 	movw	r0, #53811	; 0xd233
 80039be:	f7fd f829 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD300, 0x00);
 80039c2:	2100      	movs	r1, #0
 80039c4:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 80039c8:	f7fd f824 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD301, 0x33);
 80039cc:	2133      	movs	r1, #51	; 0x33
 80039ce:	f24d 3001 	movw	r0, #54017	; 0xd301
 80039d2:	f7fd f81f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD302, 0x00);
 80039d6:	2100      	movs	r1, #0
 80039d8:	f24d 3002 	movw	r0, #54018	; 0xd302
 80039dc:	f7fd f81a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD303, 0x34);
 80039e0:	2134      	movs	r1, #52	; 0x34
 80039e2:	f24d 3003 	movw	r0, #54019	; 0xd303
 80039e6:	f7fd f815 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD304, 0x00);
 80039ea:	2100      	movs	r1, #0
 80039ec:	f24d 3004 	movw	r0, #54020	; 0xd304
 80039f0:	f7fd f810 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD305, 0x3A);
 80039f4:	213a      	movs	r1, #58	; 0x3a
 80039f6:	f24d 3005 	movw	r0, #54021	; 0xd305
 80039fa:	f7fd f80b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD306, 0x00);
 80039fe:	2100      	movs	r1, #0
 8003a00:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003a04:	f7fd f806 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD307, 0x4A);
 8003a08:	214a      	movs	r1, #74	; 0x4a
 8003a0a:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003a0e:	f7fd f801 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD308, 0x00);
 8003a12:	2100      	movs	r1, #0
 8003a14:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003a18:	f7fc fffc 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD309, 0x5C);
 8003a1c:	215c      	movs	r1, #92	; 0x5c
 8003a1e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003a22:	f7fc fff7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD30A, 0x00);
 8003a26:	2100      	movs	r1, #0
 8003a28:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003a2c:	f7fc fff2 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0xD30B, 0x81);
 8003a30:	2181      	movs	r1, #129	; 0x81
 8003a32:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003a36:	f7fc ffed 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD30C, 0x00);
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003a40:	f7fc ffe8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD30D, 0xA6);
 8003a44:	21a6      	movs	r1, #166	; 0xa6
 8003a46:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003a4a:	f7fc ffe3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD30E, 0x00);
 8003a4e:	2100      	movs	r1, #0
 8003a50:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003a54:	f7fc ffde 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD30F, 0xE5);
 8003a58:	21e5      	movs	r1, #229	; 0xe5
 8003a5a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003a5e:	f7fc ffd9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD310, 0x01);
 8003a62:	2101      	movs	r1, #1
 8003a64:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003a68:	f7fc ffd4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD311, 0x13);
 8003a6c:	2113      	movs	r1, #19
 8003a6e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003a72:	f7fc ffcf 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD312, 0x01);
 8003a76:	2101      	movs	r1, #1
 8003a78:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003a7c:	f7fc ffca 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD313, 0x54);
 8003a80:	2154      	movs	r1, #84	; 0x54
 8003a82:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003a86:	f7fc ffc5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD314, 0x01);
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003a90:	f7fc ffc0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD315, 0x82);
 8003a94:	2182      	movs	r1, #130	; 0x82
 8003a96:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003a9a:	f7fc ffbb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD316, 0x01);
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003aa4:	f7fc ffb6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD317, 0xCA);
 8003aa8:	21ca      	movs	r1, #202	; 0xca
 8003aaa:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003aae:	f7fc ffb1 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD318, 0x02);
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003ab8:	f7fc ffac 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD319, 0x00);
 8003abc:	2100      	movs	r1, #0
 8003abe:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003ac2:	f7fc ffa7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD31A, 0x02);
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003acc:	f7fc ffa2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD31B, 0x01);
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003ad6:	f7fc ff9d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD31C, 0x02);
 8003ada:	2102      	movs	r1, #2
 8003adc:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003ae0:	f7fc ff98 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD31D, 0x34);
 8003ae4:	2134      	movs	r1, #52	; 0x34
 8003ae6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003aea:	f7fc ff93 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD31E, 0x02);
 8003aee:	2102      	movs	r1, #2
 8003af0:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003af4:	f7fc ff8e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD31F, 0x67);
 8003af8:	2167      	movs	r1, #103	; 0x67
 8003afa:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003afe:	f7fc ff89 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD320, 0x02);
 8003b02:	2102      	movs	r1, #2
 8003b04:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003b08:	f7fc ff84 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD321, 0x84);
 8003b0c:	2184      	movs	r1, #132	; 0x84
 8003b0e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003b12:	f7fc ff7f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD322, 0x02);
 8003b16:	2102      	movs	r1, #2
 8003b18:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003b1c:	f7fc ff7a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD323, 0xA4);
 8003b20:	21a4      	movs	r1, #164	; 0xa4
 8003b22:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003b26:	f7fc ff75 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD324, 0x02);
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003b30:	f7fc ff70 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD325, 0xB7);
 8003b34:	21b7      	movs	r1, #183	; 0xb7
 8003b36:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003b3a:	f7fc ff6b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD326, 0x02);
 8003b3e:	2102      	movs	r1, #2
 8003b40:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003b44:	f7fc ff66 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD327, 0xCF);
 8003b48:	21cf      	movs	r1, #207	; 0xcf
 8003b4a:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003b4e:	f7fc ff61 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD328, 0x02);
 8003b52:	2102      	movs	r1, #2
 8003b54:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003b58:	f7fc ff5c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD329, 0xDE);
 8003b5c:	21de      	movs	r1, #222	; 0xde
 8003b5e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003b62:	f7fc ff57 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD32A, 0x02);
 8003b66:	2102      	movs	r1, #2
 8003b68:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003b6c:	f7fc ff52 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD32B, 0xF2);
 8003b70:	21f2      	movs	r1, #242	; 0xf2
 8003b72:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003b76:	f7fc ff4d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD32C, 0x02);
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003b80:	f7fc ff48 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD32D, 0xFE);
 8003b84:	21fe      	movs	r1, #254	; 0xfe
 8003b86:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003b8a:	f7fc ff43 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD32E, 0x03);
 8003b8e:	2103      	movs	r1, #3
 8003b90:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003b94:	f7fc ff3e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD32F, 0x10);
 8003b98:	2110      	movs	r1, #16
 8003b9a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003b9e:	f7fc ff39 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD330, 0x03);
 8003ba2:	2103      	movs	r1, #3
 8003ba4:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003ba8:	f7fc ff34 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD331, 0x33);
 8003bac:	2133      	movs	r1, #51	; 0x33
 8003bae:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003bb2:	f7fc ff2f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD332, 0x03);
 8003bb6:	2103      	movs	r1, #3
 8003bb8:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003bbc:	f7fc ff2a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD333, 0x6D);
 8003bc0:	216d      	movs	r1, #109	; 0x6d
 8003bc2:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003bc6:	f7fc ff25 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD400, 0x00);
 8003bca:	2100      	movs	r1, #0
 8003bcc:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003bd0:	f7fc ff20 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD401, 0x33);
 8003bd4:	2133      	movs	r1, #51	; 0x33
 8003bd6:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003bda:	f7fc ff1b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD402, 0x00);
 8003bde:	2100      	movs	r1, #0
 8003be0:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003be4:	f7fc ff16 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD403, 0x34);
 8003be8:	2134      	movs	r1, #52	; 0x34
 8003bea:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003bee:	f7fc ff11 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD404, 0x00);
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003bf8:	f7fc ff0c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD405, 0x3A);
 8003bfc:	213a      	movs	r1, #58	; 0x3a
 8003bfe:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003c02:	f7fc ff07 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD406, 0x00);
 8003c06:	2100      	movs	r1, #0
 8003c08:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003c0c:	f7fc ff02 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD407, 0x4A);
 8003c10:	214a      	movs	r1, #74	; 0x4a
 8003c12:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003c16:	f7fc fefd 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD408, 0x00);
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003c20:	f7fc fef8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD409, 0x5C);
 8003c24:	215c      	movs	r1, #92	; 0x5c
 8003c26:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003c2a:	f7fc fef3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD40A, 0x00);
 8003c2e:	2100      	movs	r1, #0
 8003c30:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003c34:	f7fc feee 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD40B, 0x81);
 8003c38:	2181      	movs	r1, #129	; 0x81
 8003c3a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003c3e:	f7fc fee9 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0xD40C, 0x00);
 8003c42:	2100      	movs	r1, #0
 8003c44:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003c48:	f7fc fee4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD40D, 0xA6);
 8003c4c:	21a6      	movs	r1, #166	; 0xa6
 8003c4e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003c52:	f7fc fedf 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD40E, 0x00);
 8003c56:	2100      	movs	r1, #0
 8003c58:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003c5c:	f7fc feda 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD40F, 0xE5);
 8003c60:	21e5      	movs	r1, #229	; 0xe5
 8003c62:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003c66:	f7fc fed5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD410, 0x01);
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003c70:	f7fc fed0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD411, 0x13);
 8003c74:	2113      	movs	r1, #19
 8003c76:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003c7a:	f7fc fecb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD412, 0x01);
 8003c7e:	2101      	movs	r1, #1
 8003c80:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003c84:	f7fc fec6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD413, 0x54);
 8003c88:	2154      	movs	r1, #84	; 0x54
 8003c8a:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003c8e:	f7fc fec1 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD414, 0x01);
 8003c92:	2101      	movs	r1, #1
 8003c94:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003c98:	f7fc febc 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD415, 0x82);
 8003c9c:	2182      	movs	r1, #130	; 0x82
 8003c9e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003ca2:	f7fc feb7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD416, 0x01);
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003cac:	f7fc feb2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD417, 0xCA);
 8003cb0:	21ca      	movs	r1, #202	; 0xca
 8003cb2:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003cb6:	f7fc fead 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD418, 0x02);
 8003cba:	2102      	movs	r1, #2
 8003cbc:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003cc0:	f7fc fea8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD419, 0x00);
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003cca:	f7fc fea3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD41A, 0x02);
 8003cce:	2102      	movs	r1, #2
 8003cd0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003cd4:	f7fc fe9e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD41B, 0x01);
 8003cd8:	2101      	movs	r1, #1
 8003cda:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003cde:	f7fc fe99 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD41C, 0x02);
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003ce8:	f7fc fe94 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD41D, 0x34);
 8003cec:	2134      	movs	r1, #52	; 0x34
 8003cee:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003cf2:	f7fc fe8f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD41E, 0x02);
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003cfc:	f7fc fe8a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD41F, 0x67);
 8003d00:	2167      	movs	r1, #103	; 0x67
 8003d02:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003d06:	f7fc fe85 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD420, 0x02);
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003d10:	f7fc fe80 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD421, 0x84);
 8003d14:	2184      	movs	r1, #132	; 0x84
 8003d16:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003d1a:	f7fc fe7b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD422, 0x02);
 8003d1e:	2102      	movs	r1, #2
 8003d20:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003d24:	f7fc fe76 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD423, 0xA4);
 8003d28:	21a4      	movs	r1, #164	; 0xa4
 8003d2a:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003d2e:	f7fc fe71 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD424, 0x02);
 8003d32:	2102      	movs	r1, #2
 8003d34:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003d38:	f7fc fe6c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD425, 0xB7);
 8003d3c:	21b7      	movs	r1, #183	; 0xb7
 8003d3e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003d42:	f7fc fe67 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD426, 0x02);
 8003d46:	2102      	movs	r1, #2
 8003d48:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003d4c:	f7fc fe62 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD427, 0xCF);
 8003d50:	21cf      	movs	r1, #207	; 0xcf
 8003d52:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003d56:	f7fc fe5d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD428, 0x02);
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003d60:	f7fc fe58 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD429, 0xDE);
 8003d64:	21de      	movs	r1, #222	; 0xde
 8003d66:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003d6a:	f7fc fe53 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD42A, 0x02);
 8003d6e:	2102      	movs	r1, #2
 8003d70:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003d74:	f7fc fe4e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD42B, 0xF2);
 8003d78:	21f2      	movs	r1, #242	; 0xf2
 8003d7a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003d7e:	f7fc fe49 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD42C, 0x02);
 8003d82:	2102      	movs	r1, #2
 8003d84:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003d88:	f7fc fe44 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD42D, 0xFE);
 8003d8c:	21fe      	movs	r1, #254	; 0xfe
 8003d8e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003d92:	f7fc fe3f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD42E, 0x03);
 8003d96:	2103      	movs	r1, #3
 8003d98:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003d9c:	f7fc fe3a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD42F, 0x10);
 8003da0:	2110      	movs	r1, #16
 8003da2:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003da6:	f7fc fe35 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD430, 0x03);
 8003daa:	2103      	movs	r1, #3
 8003dac:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003db0:	f7fc fe30 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD431, 0x33);
 8003db4:	2133      	movs	r1, #51	; 0x33
 8003db6:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003dba:	f7fc fe2b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD432, 0x03);
 8003dbe:	2103      	movs	r1, #3
 8003dc0:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003dc4:	f7fc fe26 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD433, 0x6D);
 8003dc8:	216d      	movs	r1, #109	; 0x6d
 8003dca:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003dce:	f7fc fe21 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD500, 0x00);
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003dd8:	f7fc fe1c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD501, 0x33);
 8003ddc:	2133      	movs	r1, #51	; 0x33
 8003dde:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003de2:	f7fc fe17 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD502, 0x00);
 8003de6:	2100      	movs	r1, #0
 8003de8:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003dec:	f7fc fe12 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD503, 0x34);
 8003df0:	2134      	movs	r1, #52	; 0x34
 8003df2:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003df6:	f7fc fe0d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD504, 0x00);
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003e00:	f7fc fe08 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD505, 0x3A);
 8003e04:	213a      	movs	r1, #58	; 0x3a
 8003e06:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003e0a:	f7fc fe03 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD506, 0x00);
 8003e0e:	2100      	movs	r1, #0
 8003e10:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003e14:	f7fc fdfe 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD507, 0x4A);
 8003e18:	214a      	movs	r1, #74	; 0x4a
 8003e1a:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003e1e:	f7fc fdf9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD508, 0x00);
 8003e22:	2100      	movs	r1, #0
 8003e24:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003e28:	f7fc fdf4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD509, 0x5C);
 8003e2c:	215c      	movs	r1, #92	; 0x5c
 8003e2e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003e32:	f7fc fdef 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD50A, 0x00);
 8003e36:	2100      	movs	r1, #0
 8003e38:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003e3c:	f7fc fdea 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD50B, 0x81);
 8003e40:	2181      	movs	r1, #129	; 0x81
 8003e42:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003e46:	f7fc fde5 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0xD50C, 0x00);
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003e50:	f7fc fde0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD50D, 0xA6);
 8003e54:	21a6      	movs	r1, #166	; 0xa6
 8003e56:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003e5a:	f7fc fddb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD50E, 0x00);
 8003e5e:	2100      	movs	r1, #0
 8003e60:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003e64:	f7fc fdd6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD50F, 0xE5);
 8003e68:	21e5      	movs	r1, #229	; 0xe5
 8003e6a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003e6e:	f7fc fdd1 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD510, 0x01);
 8003e72:	2101      	movs	r1, #1
 8003e74:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003e78:	f7fc fdcc 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD511, 0x13);
 8003e7c:	2113      	movs	r1, #19
 8003e7e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003e82:	f7fc fdc7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD512, 0x01);
 8003e86:	2101      	movs	r1, #1
 8003e88:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003e8c:	f7fc fdc2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD513, 0x54);
 8003e90:	2154      	movs	r1, #84	; 0x54
 8003e92:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003e96:	f7fc fdbd 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD514, 0x01);
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003ea0:	f7fc fdb8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD515, 0x82);
 8003ea4:	2182      	movs	r1, #130	; 0x82
 8003ea6:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003eaa:	f7fc fdb3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD516, 0x01);
 8003eae:	2101      	movs	r1, #1
 8003eb0:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003eb4:	f7fc fdae 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD517, 0xCA);
 8003eb8:	21ca      	movs	r1, #202	; 0xca
 8003eba:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003ebe:	f7fc fda9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD518, 0x02);
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003ec8:	f7fc fda4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD519, 0x00);
 8003ecc:	2100      	movs	r1, #0
 8003ece:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003ed2:	f7fc fd9f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD51A, 0x02);
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003edc:	f7fc fd9a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD51B, 0x01);
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003ee6:	f7fc fd95 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD51C, 0x02);
 8003eea:	2102      	movs	r1, #2
 8003eec:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003ef0:	f7fc fd90 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD51D, 0x34);
 8003ef4:	2134      	movs	r1, #52	; 0x34
 8003ef6:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003efa:	f7fc fd8b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD51E, 0x02);
 8003efe:	2102      	movs	r1, #2
 8003f00:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003f04:	f7fc fd86 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD51F, 0x67);
 8003f08:	2167      	movs	r1, #103	; 0x67
 8003f0a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003f0e:	f7fc fd81 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD520, 0x02);
 8003f12:	2102      	movs	r1, #2
 8003f14:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003f18:	f7fc fd7c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD521, 0x84);
 8003f1c:	2184      	movs	r1, #132	; 0x84
 8003f1e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003f22:	f7fc fd77 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD522, 0x02);
 8003f26:	2102      	movs	r1, #2
 8003f28:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003f2c:	f7fc fd72 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD523, 0xA4);
 8003f30:	21a4      	movs	r1, #164	; 0xa4
 8003f32:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003f36:	f7fc fd6d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD524, 0x02);
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003f40:	f7fc fd68 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD525, 0xB7);
 8003f44:	21b7      	movs	r1, #183	; 0xb7
 8003f46:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003f4a:	f7fc fd63 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD526, 0x02);
 8003f4e:	2102      	movs	r1, #2
 8003f50:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003f54:	f7fc fd5e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD527, 0xCF);
 8003f58:	21cf      	movs	r1, #207	; 0xcf
 8003f5a:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003f5e:	f7fc fd59 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD528, 0x02);
 8003f62:	2102      	movs	r1, #2
 8003f64:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003f68:	f7fc fd54 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD529, 0xDE);
 8003f6c:	21de      	movs	r1, #222	; 0xde
 8003f6e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003f72:	f7fc fd4f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD52A, 0x02);
 8003f76:	2102      	movs	r1, #2
 8003f78:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003f7c:	f7fc fd4a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD52B, 0xF2);
 8003f80:	21f2      	movs	r1, #242	; 0xf2
 8003f82:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003f86:	f7fc fd45 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD52C, 0x02);
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003f90:	f7fc fd40 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD52D, 0xFE);
 8003f94:	21fe      	movs	r1, #254	; 0xfe
 8003f96:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003f9a:	f7fc fd3b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD52E, 0x03);
 8003f9e:	2103      	movs	r1, #3
 8003fa0:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003fa4:	f7fc fd36 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD52F, 0x10);
 8003fa8:	2110      	movs	r1, #16
 8003faa:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003fae:	f7fc fd31 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD530, 0x03);
 8003fb2:	2103      	movs	r1, #3
 8003fb4:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003fb8:	f7fc fd2c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD531, 0x33);
 8003fbc:	2133      	movs	r1, #51	; 0x33
 8003fbe:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003fc2:	f7fc fd27 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD532, 0x03);
 8003fc6:	2103      	movs	r1, #3
 8003fc8:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003fcc:	f7fc fd22 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD533, 0x6D);
 8003fd0:	216d      	movs	r1, #109	; 0x6d
 8003fd2:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003fd6:	f7fc fd1d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD600, 0x00);
 8003fda:	2100      	movs	r1, #0
 8003fdc:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003fe0:	f7fc fd18 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD601, 0x33);
 8003fe4:	2133      	movs	r1, #51	; 0x33
 8003fe6:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003fea:	f7fc fd13 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD602, 0x00);
 8003fee:	2100      	movs	r1, #0
 8003ff0:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003ff4:	f7fc fd0e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD603, 0x34);
 8003ff8:	2134      	movs	r1, #52	; 0x34
 8003ffa:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003ffe:	f7fc fd09 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD604, 0x00);
 8004002:	2100      	movs	r1, #0
 8004004:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004008:	f7fc fd04 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD605, 0x3A);
 800400c:	213a      	movs	r1, #58	; 0x3a
 800400e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8004012:	f7fc fcff 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD606, 0x00);
 8004016:	2100      	movs	r1, #0
 8004018:	f24d 6006 	movw	r0, #54790	; 0xd606
 800401c:	f7fc fcfa 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD607, 0x4A);
 8004020:	214a      	movs	r1, #74	; 0x4a
 8004022:	f24d 6007 	movw	r0, #54791	; 0xd607
 8004026:	f7fc fcf5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD608, 0x00);
 800402a:	2100      	movs	r1, #0
 800402c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8004030:	f7fc fcf0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD609, 0x5C);
 8004034:	215c      	movs	r1, #92	; 0x5c
 8004036:	f24d 6009 	movw	r0, #54793	; 0xd609
 800403a:	f7fc fceb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD60A, 0x00);
 800403e:	2100      	movs	r1, #0
 8004040:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8004044:	f7fc fce6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD60B, 0x81);
 8004048:	2181      	movs	r1, #129	; 0x81
 800404a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 800404e:	f7fc fce1 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0xD60C, 0x00);
 8004052:	2100      	movs	r1, #0
 8004054:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004058:	f7fc fcdc 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD60D, 0xA6);
 800405c:	21a6      	movs	r1, #166	; 0xa6
 800405e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8004062:	f7fc fcd7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD60E, 0x00);
 8004066:	2100      	movs	r1, #0
 8004068:	f24d 600e 	movw	r0, #54798	; 0xd60e
 800406c:	f7fc fcd2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD60F, 0xE5);
 8004070:	21e5      	movs	r1, #229	; 0xe5
 8004072:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8004076:	f7fc fccd 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD610, 0x01);
 800407a:	2101      	movs	r1, #1
 800407c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004080:	f7fc fcc8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD611, 0x13);
 8004084:	2113      	movs	r1, #19
 8004086:	f24d 6011 	movw	r0, #54801	; 0xd611
 800408a:	f7fc fcc3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD612, 0x01);
 800408e:	2101      	movs	r1, #1
 8004090:	f24d 6012 	movw	r0, #54802	; 0xd612
 8004094:	f7fc fcbe 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD613, 0x54);
 8004098:	2154      	movs	r1, #84	; 0x54
 800409a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800409e:	f7fc fcb9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD614, 0x01);
 80040a2:	2101      	movs	r1, #1
 80040a4:	f24d 6014 	movw	r0, #54804	; 0xd614
 80040a8:	f7fc fcb4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD615, 0x82);
 80040ac:	2182      	movs	r1, #130	; 0x82
 80040ae:	f24d 6015 	movw	r0, #54805	; 0xd615
 80040b2:	f7fc fcaf 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD616, 0x01);
 80040b6:	2101      	movs	r1, #1
 80040b8:	f24d 6016 	movw	r0, #54806	; 0xd616
 80040bc:	f7fc fcaa 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD617, 0xCA);
 80040c0:	21ca      	movs	r1, #202	; 0xca
 80040c2:	f24d 6017 	movw	r0, #54807	; 0xd617
 80040c6:	f7fc fca5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD618, 0x02);
 80040ca:	2102      	movs	r1, #2
 80040cc:	f24d 6018 	movw	r0, #54808	; 0xd618
 80040d0:	f7fc fca0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD619, 0x00);
 80040d4:	2100      	movs	r1, #0
 80040d6:	f24d 6019 	movw	r0, #54809	; 0xd619
 80040da:	f7fc fc9b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD61A, 0x02);
 80040de:	2102      	movs	r1, #2
 80040e0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80040e4:	f7fc fc96 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD61B, 0x01);
 80040e8:	2101      	movs	r1, #1
 80040ea:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80040ee:	f7fc fc91 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD61C, 0x02);
 80040f2:	2102      	movs	r1, #2
 80040f4:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80040f8:	f7fc fc8c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD61D, 0x34);
 80040fc:	2134      	movs	r1, #52	; 0x34
 80040fe:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004102:	f7fc fc87 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD61E, 0x02);
 8004106:	2102      	movs	r1, #2
 8004108:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800410c:	f7fc fc82 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD61F, 0x67);
 8004110:	2167      	movs	r1, #103	; 0x67
 8004112:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8004116:	f7fc fc7d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD620, 0x02);
 800411a:	2102      	movs	r1, #2
 800411c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8004120:	f7fc fc78 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD621, 0x84);
 8004124:	2184      	movs	r1, #132	; 0x84
 8004126:	f24d 6021 	movw	r0, #54817	; 0xd621
 800412a:	f7fc fc73 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD622, 0x02);
 800412e:	2102      	movs	r1, #2
 8004130:	f24d 6022 	movw	r0, #54818	; 0xd622
 8004134:	f7fc fc6e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD623, 0xA4);
 8004138:	21a4      	movs	r1, #164	; 0xa4
 800413a:	f24d 6023 	movw	r0, #54819	; 0xd623
 800413e:	f7fc fc69 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD624, 0x02);
 8004142:	2102      	movs	r1, #2
 8004144:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004148:	f7fc fc64 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD625, 0xB7);
 800414c:	21b7      	movs	r1, #183	; 0xb7
 800414e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8004152:	f7fc fc5f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD626, 0x02);
 8004156:	2102      	movs	r1, #2
 8004158:	f24d 6026 	movw	r0, #54822	; 0xd626
 800415c:	f7fc fc5a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD627, 0xCF);
 8004160:	21cf      	movs	r1, #207	; 0xcf
 8004162:	f24d 6027 	movw	r0, #54823	; 0xd627
 8004166:	f7fc fc55 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD628, 0x02);
 800416a:	2102      	movs	r1, #2
 800416c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004170:	f7fc fc50 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD629, 0xDE);
 8004174:	21de      	movs	r1, #222	; 0xde
 8004176:	f24d 6029 	movw	r0, #54825	; 0xd629
 800417a:	f7fc fc4b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD62A, 0x02);
 800417e:	2102      	movs	r1, #2
 8004180:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004184:	f7fc fc46 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD62B, 0xF2);
 8004188:	21f2      	movs	r1, #242	; 0xf2
 800418a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800418e:	f7fc fc41 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD62C, 0x02);
 8004192:	2102      	movs	r1, #2
 8004194:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004198:	f7fc fc3c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD62D, 0xFE);
 800419c:	21fe      	movs	r1, #254	; 0xfe
 800419e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 80041a2:	f7fc fc37 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD62E, 0x03);
 80041a6:	2103      	movs	r1, #3
 80041a8:	f24d 602e 	movw	r0, #54830	; 0xd62e
 80041ac:	f7fc fc32 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD62F, 0x10);
 80041b0:	2110      	movs	r1, #16
 80041b2:	f24d 602f 	movw	r0, #54831	; 0xd62f
 80041b6:	f7fc fc2d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD630, 0x03);
 80041ba:	2103      	movs	r1, #3
 80041bc:	f24d 6030 	movw	r0, #54832	; 0xd630
 80041c0:	f7fc fc28 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD631, 0x33);
 80041c4:	2133      	movs	r1, #51	; 0x33
 80041c6:	f24d 6031 	movw	r0, #54833	; 0xd631
 80041ca:	f7fc fc23 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD632, 0x03);
 80041ce:	2103      	movs	r1, #3
 80041d0:	f24d 6032 	movw	r0, #54834	; 0xd632
 80041d4:	f7fc fc1e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xD633, 0x6D);
 80041d8:	216d      	movs	r1, #109	; 0x6d
 80041da:	f24d 6033 	movw	r0, #54835	; 0xd633
 80041de:	f7fc fc19 	bl	8000a14 <LCD_WriteReg>
        //LV2 Page 0 enable
        LCD_WriteReg(0xF000, 0x55);
 80041e2:	2155      	movs	r1, #85	; 0x55
 80041e4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80041e8:	f7fc fc14 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xF001, 0xAA);
 80041ec:	21aa      	movs	r1, #170	; 0xaa
 80041ee:	f24f 0001 	movw	r0, #61441	; 0xf001
 80041f2:	f7fc fc0f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xF002, 0x52);
 80041f6:	2152      	movs	r1, #82	; 0x52
 80041f8:	f24f 0002 	movw	r0, #61442	; 0xf002
 80041fc:	f7fc fc0a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xF003, 0x08);
 8004200:	2108      	movs	r1, #8
 8004202:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004206:	f7fc fc05 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xF004, 0x00);
 800420a:	2100      	movs	r1, #0
 800420c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004210:	f7fc fc00 	bl	8000a14 <LCD_WriteReg>
        //Display control
        LCD_WriteReg(0xB100, 0xCC);
 8004214:	21cc      	movs	r1, #204	; 0xcc
 8004216:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800421a:	f7fc fbfb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB101, 0x00);
 800421e:	2100      	movs	r1, #0
 8004220:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004224:	f7fc fbf6 	bl	8000a14 <LCD_WriteReg>
        //Source hold time
        LCD_WriteReg(0xB600, 0x05);
 8004228:	2105      	movs	r1, #5
 800422a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800422e:	f7fc fbf1 	bl	8000a14 <LCD_WriteReg>
        //Gate EQ control
        LCD_WriteReg(0xB700, 0x70);
 8004232:	2170      	movs	r1, #112	; 0x70
 8004234:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004238:	f7fc fbec 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB701, 0x70);
 800423c:	2170      	movs	r1, #112	; 0x70
 800423e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004242:	f7fc fbe7 	bl	8000a14 <LCD_WriteReg>
        //Source EQ control (Mode 2)
        LCD_WriteReg(0xB800, 0x01);
 8004246:	2101      	movs	r1, #1
 8004248:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800424c:	f7fc fbe2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB801, 0x03);
 8004250:	2103      	movs	r1, #3
 8004252:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004256:	f7fc fbdd 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB802, 0x03);
 800425a:	2103      	movs	r1, #3
 800425c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004260:	f7fc fbd8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xB803, 0x03);
 8004264:	2103      	movs	r1, #3
 8004266:	f64b 0003 	movw	r0, #47107	; 0xb803
 800426a:	f7fc fbd3 	bl	8000a14 <LCD_WriteReg>
        //Inversion mode (2-dot)
        LCD_WriteReg(0xBC00, 0x02);
 800426e:	2102      	movs	r1, #2
 8004270:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004274:	f7fc fbce 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xBC01, 0x00);
 8004278:	2100      	movs	r1, #0
 800427a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800427e:	f7fc fbc9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xBC02, 0x00);
 8004282:	2100      	movs	r1, #0
 8004284:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004288:	f7fc fbc4 	bl	8000a14 <LCD_WriteReg>
        //Timing control 4H w/ 4-delay
        LCD_WriteReg(0xC900, 0xD0);
 800428c:	21d0      	movs	r1, #208	; 0xd0
 800428e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004292:	f7fc fbbf 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xC901, 0x02);
 8004296:	2102      	movs	r1, #2
 8004298:	f64c 1001 	movw	r0, #51457	; 0xc901
 800429c:	f7fc fbba 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xC902, 0x50);
 80042a0:	2150      	movs	r1, #80	; 0x50
 80042a2:	f64c 1002 	movw	r0, #51458	; 0xc902
 80042a6:	f7fc fbb5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xC903, 0x50);
 80042aa:	2150      	movs	r1, #80	; 0x50
 80042ac:	f64c 1003 	movw	r0, #51459	; 0xc903
 80042b0:	f7fc fbb0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xC904, 0x50);
 80042b4:	2150      	movs	r1, #80	; 0x50
 80042b6:	f64c 1004 	movw	r0, #51460	; 0xc904
 80042ba:	f7fc fbab 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x3500, 0x00);
 80042be:	2100      	movs	r1, #0
 80042c0:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 80042c4:	f7fc fba6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 80042c8:	2155      	movs	r1, #85	; 0x55
 80042ca:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 80042ce:	f7fc fba1 	bl	8000a14 <LCD_WriteReg>
        LCD_WR_REG(0x1100);
 80042d2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80042d6:	f7fc fb11 	bl	80008fc <LCD_WR_REG>
//		delay_us(120); // us
        HAL_Delay(1);
 80042da:	2001      	movs	r0, #1
 80042dc:	f002 f8da 	bl	8006494 <HAL_Delay>
        LCD_WR_REG(0x2900);
 80042e0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80042e4:	f7fc fb0a 	bl	80008fc <LCD_WR_REG>
 80042e8:	f001 bd18 	b.w	8005d1c <LCD_Init+0x3e34>
    } else if (lcddev.id == 0x9325)  //9325
 80042ec:	4bec      	ldr	r3, [pc, #944]	; (80046a0 <LCD_Init+0x27b8>)
 80042ee:	889b      	ldrh	r3, [r3, #4]
 80042f0:	f249 3225 	movw	r2, #37669	; 0x9325
 80042f4:	4293      	cmp	r3, r2
 80042f6:	f040 80d7 	bne.w	80044a8 <LCD_Init+0x25c0>
    {
        LCD_WriteReg(0x00E5, 0x78F0);
 80042fa:	f647 01f0 	movw	r1, #30960	; 0x78f0
 80042fe:	20e5      	movs	r0, #229	; 0xe5
 8004300:	f7fc fb88 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0001, 0x0100);
 8004304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004308:	2001      	movs	r0, #1
 800430a:	f7fc fb83 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0002, 0x0700);
 800430e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004312:	2002      	movs	r0, #2
 8004314:	f7fc fb7e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0003, 0x1030);
 8004318:	f241 0130 	movw	r1, #4144	; 0x1030
 800431c:	2003      	movs	r0, #3
 800431e:	f7fc fb79 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0004, 0x0000);
 8004322:	2100      	movs	r1, #0
 8004324:	2004      	movs	r0, #4
 8004326:	f7fc fb75 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0008, 0x0202);
 800432a:	f240 2102 	movw	r1, #514	; 0x202
 800432e:	2008      	movs	r0, #8
 8004330:	f7fc fb70 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0009, 0x0000);
 8004334:	2100      	movs	r1, #0
 8004336:	2009      	movs	r0, #9
 8004338:	f7fc fb6c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000A, 0x0000);
 800433c:	2100      	movs	r1, #0
 800433e:	200a      	movs	r0, #10
 8004340:	f7fc fb68 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000C, 0x0000);
 8004344:	2100      	movs	r1, #0
 8004346:	200c      	movs	r0, #12
 8004348:	f7fc fb64 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000D, 0x0000);
 800434c:	2100      	movs	r1, #0
 800434e:	200d      	movs	r0, #13
 8004350:	f7fc fb60 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000F, 0x0000);
 8004354:	2100      	movs	r1, #0
 8004356:	200f      	movs	r0, #15
 8004358:	f7fc fb5c 	bl	8000a14 <LCD_WriteReg>
        //power on sequence VGHVGL
        LCD_WriteReg(0x0010, 0x0000);
 800435c:	2100      	movs	r1, #0
 800435e:	2010      	movs	r0, #16
 8004360:	f7fc fb58 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0011, 0x0007);
 8004364:	2107      	movs	r1, #7
 8004366:	2011      	movs	r0, #17
 8004368:	f7fc fb54 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0012, 0x0000);
 800436c:	2100      	movs	r1, #0
 800436e:	2012      	movs	r0, #18
 8004370:	f7fc fb50 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0013, 0x0000);
 8004374:	2100      	movs	r1, #0
 8004376:	2013      	movs	r0, #19
 8004378:	f7fc fb4c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0007, 0x0000);
 800437c:	2100      	movs	r1, #0
 800437e:	2007      	movs	r0, #7
 8004380:	f7fc fb48 	bl	8000a14 <LCD_WriteReg>
        //vgh
        LCD_WriteReg(0x0010, 0x1690);
 8004384:	f241 6190 	movw	r1, #5776	; 0x1690
 8004388:	2010      	movs	r0, #16
 800438a:	f7fc fb43 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0011, 0x0227);
 800438e:	f240 2127 	movw	r1, #551	; 0x227
 8004392:	2011      	movs	r0, #17
 8004394:	f7fc fb3e 	bl	8000a14 <LCD_WriteReg>
        //delayms(100);
        //vregiout
        LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004398:	219d      	movs	r1, #157	; 0x9d
 800439a:	2012      	movs	r0, #18
 800439c:	f7fc fb3a 	bl	8000a14 <LCD_WriteReg>
        //delayms(100);
        //vom amplitude
        LCD_WriteReg(0x0013, 0x1900);
 80043a0:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80043a4:	2013      	movs	r0, #19
 80043a6:	f7fc fb35 	bl	8000a14 <LCD_WriteReg>
        //delayms(100);
        //vom H
        LCD_WriteReg(0x0029, 0x0025);
 80043aa:	2125      	movs	r1, #37	; 0x25
 80043ac:	2029      	movs	r0, #41	; 0x29
 80043ae:	f7fc fb31 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x002B, 0x000D);
 80043b2:	210d      	movs	r1, #13
 80043b4:	202b      	movs	r0, #43	; 0x2b
 80043b6:	f7fc fb2d 	bl	8000a14 <LCD_WriteReg>
        //gamma
        LCD_WriteReg(0x0030, 0x0007);
 80043ba:	2107      	movs	r1, #7
 80043bc:	2030      	movs	r0, #48	; 0x30
 80043be:	f7fc fb29 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0031, 0x0303);
 80043c2:	f240 3103 	movw	r1, #771	; 0x303
 80043c6:	2031      	movs	r0, #49	; 0x31
 80043c8:	f7fc fb24 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0032, 0x0003);		// 0006
 80043cc:	2103      	movs	r1, #3
 80043ce:	2032      	movs	r0, #50	; 0x32
 80043d0:	f7fc fb20 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0035, 0x0206);
 80043d4:	f240 2106 	movw	r1, #518	; 0x206
 80043d8:	2035      	movs	r0, #53	; 0x35
 80043da:	f7fc fb1b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0036, 0x0008);
 80043de:	2108      	movs	r1, #8
 80043e0:	2036      	movs	r0, #54	; 0x36
 80043e2:	f7fc fb17 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0037, 0x0406);
 80043e6:	f240 4106 	movw	r1, #1030	; 0x406
 80043ea:	2037      	movs	r0, #55	; 0x37
 80043ec:	f7fc fb12 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0038, 0x0304);		//0200
 80043f0:	f44f 7141 	mov.w	r1, #772	; 0x304
 80043f4:	2038      	movs	r0, #56	; 0x38
 80043f6:	f7fc fb0d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0039, 0x0007);
 80043fa:	2107      	movs	r1, #7
 80043fc:	2039      	movs	r0, #57	; 0x39
 80043fe:	f7fc fb09 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x003C, 0x0602);		// 0504
 8004402:	f240 6102 	movw	r1, #1538	; 0x602
 8004406:	203c      	movs	r0, #60	; 0x3c
 8004408:	f7fc fb04 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x003D, 0x0008);
 800440c:	2108      	movs	r1, #8
 800440e:	203d      	movs	r0, #61	; 0x3d
 8004410:	f7fc fb00 	bl	8000a14 <LCD_WriteReg>
        //ram
        LCD_WriteReg(0x0050, 0x0000);
 8004414:	2100      	movs	r1, #0
 8004416:	2050      	movs	r0, #80	; 0x50
 8004418:	f7fc fafc 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0051, 0x00EF);
 800441c:	21ef      	movs	r1, #239	; 0xef
 800441e:	2051      	movs	r0, #81	; 0x51
 8004420:	f7fc faf8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0052, 0x0000);
 8004424:	2100      	movs	r1, #0
 8004426:	2052      	movs	r0, #82	; 0x52
 8004428:	f7fc faf4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0053, 0x013F);
 800442c:	f240 113f 	movw	r1, #319	; 0x13f
 8004430:	2053      	movs	r0, #83	; 0x53
 8004432:	f7fc faef 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0060, 0xA700);
 8004436:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800443a:	2060      	movs	r0, #96	; 0x60
 800443c:	f7fc faea 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0061, 0x0001);
 8004440:	2101      	movs	r1, #1
 8004442:	2061      	movs	r0, #97	; 0x61
 8004444:	f7fc fae6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x006A, 0x0000);
 8004448:	2100      	movs	r1, #0
 800444a:	206a      	movs	r0, #106	; 0x6a
 800444c:	f7fc fae2 	bl	8000a14 <LCD_WriteReg>
        //
        LCD_WriteReg(0x0080, 0x0000);
 8004450:	2100      	movs	r1, #0
 8004452:	2080      	movs	r0, #128	; 0x80
 8004454:	f7fc fade 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0081, 0x0000);
 8004458:	2100      	movs	r1, #0
 800445a:	2081      	movs	r0, #129	; 0x81
 800445c:	f7fc fada 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0082, 0x0000);
 8004460:	2100      	movs	r1, #0
 8004462:	2082      	movs	r0, #130	; 0x82
 8004464:	f7fc fad6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0083, 0x0000);
 8004468:	2100      	movs	r1, #0
 800446a:	2083      	movs	r0, #131	; 0x83
 800446c:	f7fc fad2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0084, 0x0000);
 8004470:	2100      	movs	r1, #0
 8004472:	2084      	movs	r0, #132	; 0x84
 8004474:	f7fc face 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0085, 0x0000);
 8004478:	2100      	movs	r1, #0
 800447a:	2085      	movs	r0, #133	; 0x85
 800447c:	f7fc faca 	bl	8000a14 <LCD_WriteReg>
        //
        LCD_WriteReg(0x0090, 0x0010);
 8004480:	2110      	movs	r1, #16
 8004482:	2090      	movs	r0, #144	; 0x90
 8004484:	f7fc fac6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0092, 0x0600);
 8004488:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800448c:	2092      	movs	r0, #146	; 0x92
 800448e:	f7fc fac1 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x0007, 0x0133);
 8004492:	f240 1133 	movw	r1, #307	; 0x133
 8004496:	2007      	movs	r0, #7
 8004498:	f7fc fabc 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x00, 0x0022);		//
 800449c:	2122      	movs	r1, #34	; 0x22
 800449e:	2000      	movs	r0, #0
 80044a0:	f7fc fab8 	bl	8000a14 <LCD_WriteReg>
 80044a4:	f001 bc3a 	b.w	8005d1c <LCD_Init+0x3e34>
    } else if (lcddev.id == 0x9328)		//ILI9328   OK
 80044a8:	4b7d      	ldr	r3, [pc, #500]	; (80046a0 <LCD_Init+0x27b8>)
 80044aa:	889b      	ldrh	r3, [r3, #4]
 80044ac:	f249 3228 	movw	r2, #37672	; 0x9328
 80044b0:	4293      	cmp	r3, r2
 80044b2:	f040 80f7 	bne.w	80046a4 <LCD_Init+0x27bc>
    {
        LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 80044b6:	f241 018f 	movw	r1, #4239	; 0x108f
 80044ba:	20ec      	movs	r0, #236	; 0xec
 80044bc:	f7fc faaa 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80044c0:	f241 2134 	movw	r1, #4660	; 0x1234
 80044c4:	20ef      	movs	r0, #239	; 0xef
 80044c6:	f7fc faa5 	bl	8000a14 <LCD_WriteReg>
        //LCD_WriteReg(0x00e7,0x0010);
        //LCD_WriteReg(0x0000,0x0001);//寮€鍚唴閮ㄦ椂閽�
        LCD_WriteReg(0x0001, 0x0100);
 80044ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044ce:	2001      	movs	r0, #1
 80044d0:	f7fc faa0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0002, 0x0700);        //鐢垫簮寮€鍚�
 80044d4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80044d8:	2002      	movs	r0, #2
 80044da:	f7fc fa9b 	bl	8000a14 <LCD_WriteReg>
        // 1  1   0    D->U	L->R
        // 0  0   1	   R->L U->D
        // 1  0   1    U->D	R->L
        // 0  1   1    L->R U->D 姝ｅ父灏辩敤杩欎釜.
        // 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 80044de:	f241 0130 	movw	r1, #4144	; 0x1030
 80044e2:	2003      	movs	r0, #3
 80044e4:	f7fc fa96 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0004, 0x0000);
 80044e8:	2100      	movs	r1, #0
 80044ea:	2004      	movs	r0, #4
 80044ec:	f7fc fa92 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0008, 0x0202);
 80044f0:	f240 2102 	movw	r1, #514	; 0x202
 80044f4:	2008      	movs	r0, #8
 80044f6:	f7fc fa8d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0009, 0x0000);
 80044fa:	2100      	movs	r1, #0
 80044fc:	2009      	movs	r0, #9
 80044fe:	f7fc fa89 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000a, 0x0000);		//display setting
 8004502:	2100      	movs	r1, #0
 8004504:	200a      	movs	r0, #10
 8004506:	f7fc fa85 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000c, 0x0001);		//display setting
 800450a:	2101      	movs	r1, #1
 800450c:	200c      	movs	r0, #12
 800450e:	f7fc fa81 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8004512:	2100      	movs	r1, #0
 8004514:	200d      	movs	r0, #13
 8004516:	f7fc fa7d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000f, 0x0000);
 800451a:	2100      	movs	r1, #0
 800451c:	200f      	movs	r0, #15
 800451e:	f7fc fa79 	bl	8000a14 <LCD_WriteReg>
        //鐢垫簮閰嶇疆
        LCD_WriteReg(0x0010, 0x0000);
 8004522:	2100      	movs	r1, #0
 8004524:	2010      	movs	r0, #16
 8004526:	f7fc fa75 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0011, 0x0007);
 800452a:	2107      	movs	r1, #7
 800452c:	2011      	movs	r0, #17
 800452e:	f7fc fa71 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0012, 0x0000);
 8004532:	2100      	movs	r1, #0
 8004534:	2012      	movs	r0, #18
 8004536:	f7fc fa6d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0013, 0x0000);
 800453a:	2100      	movs	r1, #0
 800453c:	2013      	movs	r0, #19
 800453e:	f7fc fa69 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0007, 0x0001);
 8004542:	2101      	movs	r1, #1
 8004544:	2007      	movs	r0, #7
 8004546:	f7fc fa65 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50);
 800454a:	2032      	movs	r0, #50	; 0x32
 800454c:	f001 ffa2 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0010, 0x1490);
 8004550:	f241 4190 	movw	r1, #5264	; 0x1490
 8004554:	2010      	movs	r0, #16
 8004556:	f7fc fa5d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0011, 0x0227);
 800455a:	f240 2127 	movw	r1, #551	; 0x227
 800455e:	2011      	movs	r0, #17
 8004560:	f7fc fa58 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50);
 8004564:	2032      	movs	r0, #50	; 0x32
 8004566:	f001 ff95 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0012, 0x008A);
 800456a:	218a      	movs	r1, #138	; 0x8a
 800456c:	2012      	movs	r0, #18
 800456e:	f7fc fa51 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50);
 8004572:	2032      	movs	r0, #50	; 0x32
 8004574:	f001 ff8e 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0013, 0x1a00);
 8004578:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800457c:	2013      	movs	r0, #19
 800457e:	f7fc fa49 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0029, 0x0006);
 8004582:	2106      	movs	r1, #6
 8004584:	2029      	movs	r0, #41	; 0x29
 8004586:	f7fc fa45 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x002b, 0x000d);
 800458a:	210d      	movs	r1, #13
 800458c:	202b      	movs	r0, #43	; 0x2b
 800458e:	f7fc fa41 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50);
 8004592:	2032      	movs	r0, #50	; 0x32
 8004594:	f001 ff7e 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0020, 0x0000);
 8004598:	2100      	movs	r1, #0
 800459a:	2020      	movs	r0, #32
 800459c:	f7fc fa3a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0021, 0x0000);
 80045a0:	2100      	movs	r1, #0
 80045a2:	2021      	movs	r0, #33	; 0x21
 80045a4:	f7fc fa36 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50);
 80045a8:	2032      	movs	r0, #50	; 0x32
 80045aa:	f001 ff73 	bl	8006494 <HAL_Delay>
        //浼介┈鏍℃
        LCD_WriteReg(0x0030, 0x0000);
 80045ae:	2100      	movs	r1, #0
 80045b0:	2030      	movs	r0, #48	; 0x30
 80045b2:	f7fc fa2f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0031, 0x0604);
 80045b6:	f240 6104 	movw	r1, #1540	; 0x604
 80045ba:	2031      	movs	r0, #49	; 0x31
 80045bc:	f7fc fa2a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0032, 0x0305);
 80045c0:	f240 3105 	movw	r1, #773	; 0x305
 80045c4:	2032      	movs	r0, #50	; 0x32
 80045c6:	f7fc fa25 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0035, 0x0000);
 80045ca:	2100      	movs	r1, #0
 80045cc:	2035      	movs	r0, #53	; 0x35
 80045ce:	f7fc fa21 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0036, 0x0C09);
 80045d2:	f640 4109 	movw	r1, #3081	; 0xc09
 80045d6:	2036      	movs	r0, #54	; 0x36
 80045d8:	f7fc fa1c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0037, 0x0204);
 80045dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80045e0:	2037      	movs	r0, #55	; 0x37
 80045e2:	f7fc fa17 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0038, 0x0301);
 80045e6:	f240 3101 	movw	r1, #769	; 0x301
 80045ea:	2038      	movs	r0, #56	; 0x38
 80045ec:	f7fc fa12 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0039, 0x0707);
 80045f0:	f240 7107 	movw	r1, #1799	; 0x707
 80045f4:	2039      	movs	r0, #57	; 0x39
 80045f6:	f7fc fa0d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x003c, 0x0000);
 80045fa:	2100      	movs	r1, #0
 80045fc:	203c      	movs	r0, #60	; 0x3c
 80045fe:	f7fc fa09 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x003d, 0x0a0a);
 8004602:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004606:	203d      	movs	r0, #61	; 0x3d
 8004608:	f7fc fa04 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50);
 800460c:	2032      	movs	r0, #50	; 0x32
 800460e:	f001 ff41 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0050, 0x0000); //姘村钩GRAM璧峰浣嶇疆
 8004612:	2100      	movs	r1, #0
 8004614:	2050      	movs	r0, #80	; 0x50
 8004616:	f7fc f9fd 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0051, 0x00ef); //姘村钩GRAM缁堟浣嶇疆
 800461a:	21ef      	movs	r1, #239	; 0xef
 800461c:	2051      	movs	r0, #81	; 0x51
 800461e:	f7fc f9f9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0052, 0x0000); //鍨傜洿GRAM璧峰浣嶇疆
 8004622:	2100      	movs	r1, #0
 8004624:	2052      	movs	r0, #82	; 0x52
 8004626:	f7fc f9f5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0053, 0x013f); //鍨傜洿GRAM缁堟浣嶇疆
 800462a:	f240 113f 	movw	r1, #319	; 0x13f
 800462e:	2053      	movs	r0, #83	; 0x53
 8004630:	f7fc f9f0 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x0060, 0xa700);
 8004634:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004638:	2060      	movs	r0, #96	; 0x60
 800463a:	f7fc f9eb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0061, 0x0001);
 800463e:	2101      	movs	r1, #1
 8004640:	2061      	movs	r0, #97	; 0x61
 8004642:	f7fc f9e7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x006a, 0x0000);
 8004646:	2100      	movs	r1, #0
 8004648:	206a      	movs	r0, #106	; 0x6a
 800464a:	f7fc f9e3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0080, 0x0000);
 800464e:	2100      	movs	r1, #0
 8004650:	2080      	movs	r0, #128	; 0x80
 8004652:	f7fc f9df 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0081, 0x0000);
 8004656:	2100      	movs	r1, #0
 8004658:	2081      	movs	r0, #129	; 0x81
 800465a:	f7fc f9db 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0082, 0x0000);
 800465e:	2100      	movs	r1, #0
 8004660:	2082      	movs	r0, #130	; 0x82
 8004662:	f7fc f9d7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0083, 0x0000);
 8004666:	2100      	movs	r1, #0
 8004668:	2083      	movs	r0, #131	; 0x83
 800466a:	f7fc f9d3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0084, 0x0000);
 800466e:	2100      	movs	r1, #0
 8004670:	2084      	movs	r0, #132	; 0x84
 8004672:	f7fc f9cf 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0085, 0x0000);
 8004676:	2100      	movs	r1, #0
 8004678:	2085      	movs	r0, #133	; 0x85
 800467a:	f7fc f9cb 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x0090, 0x0010);
 800467e:	2110      	movs	r1, #16
 8004680:	2090      	movs	r0, #144	; 0x90
 8004682:	f7fc f9c7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0092, 0x0600);
 8004686:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800468a:	2092      	movs	r0, #146	; 0x92
 800468c:	f7fc f9c2 	bl	8000a14 <LCD_WriteReg>
        //寮€鍚樉绀鸿缃�
        LCD_WriteReg(0x0007, 0x0133);
 8004690:	f240 1133 	movw	r1, #307	; 0x133
 8004694:	2007      	movs	r0, #7
 8004696:	f7fc f9bd 	bl	8000a14 <LCD_WriteReg>
 800469a:	f001 bb3f 	b.w	8005d1c <LCD_Init+0x3e34>
 800469e:	bf00      	nop
 80046a0:	20000030 	.word	0x20000030
    } else if (lcddev.id == 0x9320) //娴嬭瘯OK.
 80046a4:	4bce      	ldr	r3, [pc, #824]	; (80049e0 <LCD_Init+0x2af8>)
 80046a6:	889b      	ldrh	r3, [r3, #4]
 80046a8:	f249 3220 	movw	r2, #37664	; 0x9320
 80046ac:	4293      	cmp	r3, r2
 80046ae:	f040 80ad 	bne.w	800480c <LCD_Init+0x2924>
    {
        LCD_WriteReg(0x00, 0x0000);
 80046b2:	2100      	movs	r1, #0
 80046b4:	2000      	movs	r0, #0
 80046b6:	f7fc f9ad 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 80046ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046be:	2001      	movs	r0, #1
 80046c0:	f7fc f9a8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80046c4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80046c8:	2002      	movs	r0, #2
 80046ca:	f7fc f9a3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 80046ce:	f241 0130 	movw	r1, #4144	; 0x1030
 80046d2:	2003      	movs	r0, #3
 80046d4:	f7fc f99e 	bl	8000a14 <LCD_WriteReg>
        //LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

        LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80046d8:	2100      	movs	r1, #0
 80046da:	2004      	movs	r0, #4
 80046dc:	f7fc f99a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80046e0:	f240 2102 	movw	r1, #514	; 0x202
 80046e4:	2008      	movs	r0, #8
 80046e6:	f7fc f995 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80046ea:	2100      	movs	r1, #0
 80046ec:	2009      	movs	r0, #9
 80046ee:	f7fc f991 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 80046f2:	2100      	movs	r1, #0
 80046f4:	200a      	movs	r0, #10
 80046f6:	f7fc f98d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 80046fa:	2101      	movs	r1, #1
 80046fc:	200c      	movs	r0, #12
 80046fe:	f7fc f989 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004702:	2100      	movs	r1, #0
 8004704:	200d      	movs	r0, #13
 8004706:	f7fc f985 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800470a:	2100      	movs	r1, #0
 800470c:	200f      	movs	r0, #15
 800470e:	f7fc f981 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50);
 8004712:	2032      	movs	r0, #50	; 0x32
 8004714:	f001 febe 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004718:	f240 1101 	movw	r1, #257	; 0x101
 800471c:	2007      	movs	r0, #7
 800471e:	f7fc f979 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50);
 8004722:	2032      	movs	r0, #50	; 0x32
 8004724:	f001 feb6 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004728:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800472c:	2010      	movs	r0, #16
 800472e:	f7fc f971 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8004732:	2107      	movs	r1, #7
 8004734:	2011      	movs	r0, #17
 8004736:	f7fc f96d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 800473a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800473e:	2012      	movs	r0, #18
 8004740:	f7fc f968 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8004744:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004748:	2013      	movs	r0, #19
 800474a:	f7fc f963 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 800474e:	2100      	movs	r1, #0
 8004750:	2029      	movs	r0, #41	; 0x29
 8004752:	f7fc f95f 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8004756:	f244 0110 	movw	r1, #16400	; 0x4010
 800475a:	202b      	movs	r0, #43	; 0x2b
 800475c:	f7fc f95a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x50, 0);	//Set X Star
 8004760:	2100      	movs	r1, #0
 8004762:	2050      	movs	r0, #80	; 0x50
 8004764:	f7fc f956 	bl	8000a14 <LCD_WriteReg>
        //姘村钩GRAM缁堟浣嶇疆Set X End.
        LCD_WriteReg(0x51, 239);	//Set Y Star
 8004768:	21ef      	movs	r1, #239	; 0xef
 800476a:	2051      	movs	r0, #81	; 0x51
 800476c:	f7fc f952 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004770:	2100      	movs	r1, #0
 8004772:	2052      	movs	r0, #82	; 0x52
 8004774:	f7fc f94e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x53, 319);	//
 8004778:	f240 113f 	movw	r1, #319	; 0x13f
 800477c:	2053      	movs	r0, #83	; 0x53
 800477e:	f7fc f949 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004782:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004786:	2060      	movs	r0, #96	; 0x60
 8004788:	f7fc f944 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800478c:	2101      	movs	r1, #1
 800478e:	2061      	movs	r0, #97	; 0x61
 8004790:	f7fc f940 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004794:	2100      	movs	r1, #0
 8004796:	206a      	movs	r0, #106	; 0x6a
 8004798:	f7fc f93c 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800479c:	2100      	movs	r1, #0
 800479e:	2080      	movs	r0, #128	; 0x80
 80047a0:	f7fc f938 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 80047a4:	2100      	movs	r1, #0
 80047a6:	2081      	movs	r0, #129	; 0x81
 80047a8:	f7fc f934 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 80047ac:	2100      	movs	r1, #0
 80047ae:	2082      	movs	r0, #130	; 0x82
 80047b0:	f7fc f930 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 80047b4:	2100      	movs	r1, #0
 80047b6:	2083      	movs	r0, #131	; 0x83
 80047b8:	f7fc f92c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 80047bc:	2100      	movs	r1, #0
 80047be:	2084      	movs	r0, #132	; 0x84
 80047c0:	f7fc f928 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 80047c4:	2100      	movs	r1, #0
 80047c6:	2085      	movs	r0, #133	; 0x85
 80047c8:	f7fc f924 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 80047cc:	2110      	movs	r1, #16
 80047ce:	2090      	movs	r0, #144	; 0x90
 80047d0:	f7fc f920 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 80047d4:	2100      	movs	r1, #0
 80047d6:	2092      	movs	r0, #146	; 0x92
 80047d8:	f7fc f91c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80047dc:	2101      	movs	r1, #1
 80047de:	2093      	movs	r0, #147	; 0x93
 80047e0:	f7fc f918 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80047e4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80047e8:	2095      	movs	r0, #149	; 0x95
 80047ea:	f7fc f913 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x97, (0 << 8));	//
 80047ee:	2100      	movs	r1, #0
 80047f0:	2097      	movs	r0, #151	; 0x97
 80047f2:	f7fc f90f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 80047f6:	2100      	movs	r1, #0
 80047f8:	2098      	movs	r0, #152	; 0x98
 80047fa:	f7fc f90b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 80047fe:	f240 1173 	movw	r1, #371	; 0x173
 8004802:	2007      	movs	r0, #7
 8004804:	f7fc f906 	bl	8000a14 <LCD_WriteReg>
 8004808:	f001 ba88 	b.w	8005d1c <LCD_Init+0x3e34>
    } else if (lcddev.id == 0X9331)	//OK |/|/|
 800480c:	4b74      	ldr	r3, [pc, #464]	; (80049e0 <LCD_Init+0x2af8>)
 800480e:	889b      	ldrh	r3, [r3, #4]
 8004810:	f249 3231 	movw	r2, #37681	; 0x9331
 8004814:	4293      	cmp	r3, r2
 8004816:	f040 80e5 	bne.w	80049e4 <LCD_Init+0x2afc>
    {
        LCD_WriteReg(0x00E7, 0x1014);
 800481a:	f241 0114 	movw	r1, #4116	; 0x1014
 800481e:	20e7      	movs	r0, #231	; 0xe7
 8004820:	f7fc f8f8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004828:	2001      	movs	r0, #1
 800482a:	f7fc f8f3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 800482e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004832:	2002      	movs	r0, #2
 8004834:	f7fc f8ee 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004838:	f241 0138 	movw	r1, #4152	; 0x1038
 800483c:	2003      	movs	r0, #3
 800483e:	f7fc f8e9 	bl	8000a14 <LCD_WriteReg>
        //LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
        LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004842:	f240 2102 	movw	r1, #514	; 0x202
 8004846:	2008      	movs	r0, #8
 8004848:	f7fc f8e4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800484c:	2100      	movs	r1, #0
 800484e:	2009      	movs	r0, #9
 8004850:	f7fc f8e0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004854:	2100      	movs	r1, #0
 8004856:	200a      	movs	r0, #10
 8004858:	f7fc f8dc 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800485c:	2100      	movs	r1, #0
 800485e:	200c      	movs	r0, #12
 8004860:	f7fc f8d8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004864:	2100      	movs	r1, #0
 8004866:	200d      	movs	r0, #13
 8004868:	f7fc f8d4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 800486c:	2100      	movs	r1, #0
 800486e:	200f      	movs	r0, #15
 8004870:	f7fc f8d0 	bl	8000a14 <LCD_WriteReg>
        //*************Power On sequence ****************//
        LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004874:	2100      	movs	r1, #0
 8004876:	2010      	movs	r0, #16
 8004878:	f7fc f8cc 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 800487c:	2107      	movs	r1, #7
 800487e:	2011      	movs	r0, #17
 8004880:	f7fc f8c8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004884:	2100      	movs	r1, #0
 8004886:	2012      	movs	r0, #18
 8004888:	f7fc f8c4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800488c:	2100      	movs	r1, #0
 800488e:	2013      	movs	r0, #19
 8004890:	f7fc f8c0 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(200); // Dis-charge capacitor power voltage
 8004894:	20c8      	movs	r0, #200	; 0xc8
 8004896:	f001 fdfd 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800489a:	f241 6190 	movw	r1, #5776	; 0x1690
 800489e:	2010      	movs	r0, #16
 80048a0:	f7fc f8b8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 80048a4:	f240 2127 	movw	r1, #551	; 0x227
 80048a8:	2011      	movs	r0, #17
 80048aa:	f7fc f8b3 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50); // Delay 50ms
 80048ae:	2032      	movs	r0, #50	; 0x32
 80048b0:	f001 fdf0 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 80048b4:	210c      	movs	r1, #12
 80048b6:	2012      	movs	r0, #18
 80048b8:	f7fc f8ac 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50); // Delay 50ms
 80048bc:	2032      	movs	r0, #50	; 0x32
 80048be:	f001 fde9 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 80048c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048c6:	2013      	movs	r0, #19
 80048c8:	f7fc f8a4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 80048cc:	2111      	movs	r1, #17
 80048ce:	2029      	movs	r0, #41	; 0x29
 80048d0:	f7fc f8a0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 80048d4:	210b      	movs	r1, #11
 80048d6:	202b      	movs	r0, #43	; 0x2b
 80048d8:	f7fc f89c 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50); // Delay 50ms
 80048dc:	2032      	movs	r0, #50	; 0x32
 80048de:	f001 fdd9 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80048e2:	2100      	movs	r1, #0
 80048e4:	2020      	movs	r0, #32
 80048e6:	f7fc f895 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80048ea:	f240 113f 	movw	r1, #319	; 0x13f
 80048ee:	2021      	movs	r0, #33	; 0x21
 80048f0:	f7fc f890 	bl	8000a14 <LCD_WriteReg>
        // ----------- Adjust the Gamma Curve ----------//
        LCD_WriteReg(0x0030, 0x0000);
 80048f4:	2100      	movs	r1, #0
 80048f6:	2030      	movs	r0, #48	; 0x30
 80048f8:	f7fc f88c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0031, 0x0106);
 80048fc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004900:	2031      	movs	r0, #49	; 0x31
 8004902:	f7fc f887 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0032, 0x0000);
 8004906:	2100      	movs	r1, #0
 8004908:	2032      	movs	r0, #50	; 0x32
 800490a:	f7fc f883 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0035, 0x0204);
 800490e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004912:	2035      	movs	r0, #53	; 0x35
 8004914:	f7fc f87e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0036, 0x160A);
 8004918:	f241 610a 	movw	r1, #5642	; 0x160a
 800491c:	2036      	movs	r0, #54	; 0x36
 800491e:	f7fc f879 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0037, 0x0707);
 8004922:	f240 7107 	movw	r1, #1799	; 0x707
 8004926:	2037      	movs	r0, #55	; 0x37
 8004928:	f7fc f874 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0038, 0x0106);
 800492c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004930:	2038      	movs	r0, #56	; 0x38
 8004932:	f7fc f86f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0039, 0x0707);
 8004936:	f240 7107 	movw	r1, #1799	; 0x707
 800493a:	2039      	movs	r0, #57	; 0x39
 800493c:	f7fc f86a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x003C, 0x0402);
 8004940:	f240 4102 	movw	r1, #1026	; 0x402
 8004944:	203c      	movs	r0, #60	; 0x3c
 8004946:	f7fc f865 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x003D, 0x0C0F);
 800494a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800494e:	203d      	movs	r0, #61	; 0x3d
 8004950:	f7fc f860 	bl	8000a14 <LCD_WriteReg>
        //------------------ Set GRAM area ---------------//
        LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004954:	2100      	movs	r1, #0
 8004956:	2050      	movs	r0, #80	; 0x50
 8004958:	f7fc f85c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800495c:	21ef      	movs	r1, #239	; 0xef
 800495e:	2051      	movs	r0, #81	; 0x51
 8004960:	f7fc f858 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004964:	2100      	movs	r1, #0
 8004966:	2052      	movs	r0, #82	; 0x52
 8004968:	f7fc f854 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 800496c:	f240 113f 	movw	r1, #319	; 0x13f
 8004970:	2053      	movs	r0, #83	; 0x53
 8004972:	f7fc f84f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004976:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800497a:	2060      	movs	r0, #96	; 0x60
 800497c:	f7fc f84a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 8004980:	2101      	movs	r1, #1
 8004982:	2061      	movs	r0, #97	; 0x61
 8004984:	f7fc f846 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004988:	2100      	movs	r1, #0
 800498a:	206a      	movs	r0, #106	; 0x6a
 800498c:	f7fc f842 	bl	8000a14 <LCD_WriteReg>
        //-------------- Partial Display Control ---------//
        LCD_WriteReg(0x0080, 0x0000);
 8004990:	2100      	movs	r1, #0
 8004992:	2080      	movs	r0, #128	; 0x80
 8004994:	f7fc f83e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0081, 0x0000);
 8004998:	2100      	movs	r1, #0
 800499a:	2081      	movs	r0, #129	; 0x81
 800499c:	f7fc f83a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0082, 0x0000);
 80049a0:	2100      	movs	r1, #0
 80049a2:	2082      	movs	r0, #130	; 0x82
 80049a4:	f7fc f836 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0083, 0x0000);
 80049a8:	2100      	movs	r1, #0
 80049aa:	2083      	movs	r0, #131	; 0x83
 80049ac:	f7fc f832 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0084, 0x0000);
 80049b0:	2100      	movs	r1, #0
 80049b2:	2084      	movs	r0, #132	; 0x84
 80049b4:	f7fc f82e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0085, 0x0000);
 80049b8:	2100      	movs	r1, #0
 80049ba:	2085      	movs	r0, #133	; 0x85
 80049bc:	f7fc f82a 	bl	8000a14 <LCD_WriteReg>
        //-------------- Panel Control -------------------//
        LCD_WriteReg(0x0090, 0x0010);
 80049c0:	2110      	movs	r1, #16
 80049c2:	2090      	movs	r0, #144	; 0x90
 80049c4:	f7fc f826 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0092, 0x0600);
 80049c8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80049cc:	2092      	movs	r0, #146	; 0x92
 80049ce:	f7fc f821 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80049d2:	f240 1133 	movw	r1, #307	; 0x133
 80049d6:	2007      	movs	r0, #7
 80049d8:	f7fc f81c 	bl	8000a14 <LCD_WriteReg>
 80049dc:	f001 b99e 	b.w	8005d1c <LCD_Init+0x3e34>
 80049e0:	20000030 	.word	0x20000030
    } else if (lcddev.id == 0x5408) {
 80049e4:	4be2      	ldr	r3, [pc, #904]	; (8004d70 <LCD_Init+0x2e88>)
 80049e6:	889b      	ldrh	r3, [r3, #4]
 80049e8:	f245 4208 	movw	r2, #21512	; 0x5408
 80049ec:	4293      	cmp	r3, r2
 80049ee:	f040 80a3 	bne.w	8004b38 <LCD_Init+0x2c50>
        LCD_WriteReg(0x01, 0x0100);
 80049f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049f6:	2001      	movs	r0, #1
 80049f8:	f7fc f80c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 80049fc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004a00:	2002      	movs	r0, #2
 8004a02:	f7fc f807 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x03, 0x1030); //Entry Mode璁剧疆
 8004a06:	f241 0130 	movw	r1, #4144	; 0x1030
 8004a0a:	2003      	movs	r0, #3
 8004a0c:	f7fc f802 	bl	8000a14 <LCD_WriteReg>
        //鎸囬拡浠庡乏鑷冲彸鑷笂鑰屼笅鐨勮嚜鍔ㄥ妯″紡
        //Normal Mode(Window Mode disable)
        //RGB鏍煎紡
        //16浣嶆暟鎹�2娆′紶杈撶殑8鎬荤嚎璁剧疆
        LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004a10:	2100      	movs	r1, #0
 8004a12:	2004      	movs	r0, #4
 8004a14:	f7fb fffe 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004a18:	f240 2107 	movw	r1, #519	; 0x207
 8004a1c:	2008      	movs	r0, #8
 8004a1e:	f7fb fff9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004a22:	2100      	movs	r1, #0
 8004a24:	2009      	movs	r0, #9
 8004a26:	f7fb fff5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	200a      	movs	r0, #10
 8004a2e:	f7fb fff1 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004a32:	2100      	movs	r1, #0
 8004a34:	200c      	movs	r0, #12
 8004a36:	f7fb ffed 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	200d      	movs	r0, #13
 8004a3e:	f7fb ffe9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004a42:	2100      	movs	r1, #0
 8004a44:	200f      	movs	r0, #15
 8004a46:	f7fb ffe5 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 8004a4a:	2014      	movs	r0, #20
 8004a4c:	f001 fd22 	bl	8006494 <HAL_Delay>
        //TFT 娑叉櫠褰╄壊鍥惧儚鏄剧ず鏂规硶14
        LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004a50:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004a54:	2010      	movs	r0, #16
 8004a56:	f7fb ffdd 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	2011      	movs	r0, #17
 8004a5e:	f7fb ffd9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004a62:	2101      	movs	r1, #1
 8004a64:	2017      	movs	r0, #23
 8004a66:	f7fb ffd5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004a6a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004a6e:	2012      	movs	r0, #18
 8004a70:	f7fb ffd0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004a74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a78:	2013      	movs	r0, #19
 8004a7a:	f7fb ffcb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004a7e:	2109      	movs	r1, #9
 8004a80:	2029      	movs	r0, #41	; 0x29
 8004a82:	f7fb ffc7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004a86:	2109      	movs	r1, #9
 8004a88:	202a      	movs	r0, #42	; 0x2a
 8004a8a:	f7fb ffc3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0xa4, 0x0000);
 8004a8e:	2100      	movs	r1, #0
 8004a90:	20a4      	movs	r0, #164	; 0xa4
 8004a92:	f7fb ffbf 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x50, 0x0000); //璁剧疆鎿嶄綔绐楀彛鐨刋杞村紑濮嬪垪
 8004a96:	2100      	movs	r1, #0
 8004a98:	2050      	movs	r0, #80	; 0x50
 8004a9a:	f7fb ffbb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x51, 0x00EF); //璁剧疆鎿嶄綔绐楀彛鐨刋杞寸粨鏉熷垪
 8004a9e:	21ef      	movs	r1, #239	; 0xef
 8004aa0:	2051      	movs	r0, #81	; 0x51
 8004aa2:	f7fb ffb7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x52, 0x0000); //璁剧疆鎿嶄綔绐楀彛鐨刌杞村紑濮嬭
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	2052      	movs	r0, #82	; 0x52
 8004aaa:	f7fb ffb3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x53, 0x013F); //璁剧疆鎿嶄綔绐楀彛鐨刌杞寸粨鏉熻
 8004aae:	f240 113f 	movw	r1, #319	; 0x13f
 8004ab2:	2053      	movs	r0, #83	; 0x53
 8004ab4:	f7fb ffae 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004ab8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004abc:	2060      	movs	r0, #96	; 0x60
 8004abe:	f7fb ffa9 	bl	8000a14 <LCD_WriteReg>
        //璁剧疆灞忓箷鐨勭偣鏁颁互鍙婃壂鎻忕殑璧峰琛�
        LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	2061      	movs	r0, #97	; 0x61
 8004ac6:	f7fb ffa5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004aca:	2100      	movs	r1, #0
 8004acc:	206a      	movs	r0, #106	; 0x6a
 8004ace:	f7fb ffa1 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x80, 0x0000); //Display Position 鈥� Partial Display 1
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	2080      	movs	r0, #128	; 0x80
 8004ad6:	f7fb ff9d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x81, 0x0000); //RAM Address Start 鈥� Partial Display 1
 8004ada:	2100      	movs	r1, #0
 8004adc:	2081      	movs	r0, #129	; 0x81
 8004ade:	f7fb ff99 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	2082      	movs	r0, #130	; 0x82
 8004ae6:	f7fb ff95 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x83, 0x0000); //Display Position 鈥� Partial Display 2
 8004aea:	2100      	movs	r1, #0
 8004aec:	2083      	movs	r0, #131	; 0x83
 8004aee:	f7fb ff91 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x84, 0x0000); //RAM Address Start 鈥� Partial Display 2
 8004af2:	2100      	movs	r1, #0
 8004af4:	2084      	movs	r0, #132	; 0x84
 8004af6:	f7fb ff8d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x85, 0x0000); //RAM address End 鈥� Partail Display2
 8004afa:	2100      	movs	r1, #0
 8004afc:	2085      	movs	r0, #133	; 0x85
 8004afe:	f7fb ff89 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004b02:	2113      	movs	r1, #19
 8004b04:	2090      	movs	r0, #144	; 0x90
 8004b06:	f7fb ff85 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	2092      	movs	r0, #146	; 0x92
 8004b0e:	f7fb ff81 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004b12:	2103      	movs	r1, #3
 8004b14:	2093      	movs	r0, #147	; 0x93
 8004b16:	f7fb ff7d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004b1a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004b1e:	2095      	movs	r0, #149	; 0x95
 8004b20:	f7fb ff78 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x07, 0x0173);
 8004b24:	f240 1173 	movw	r1, #371	; 0x173
 8004b28:	2007      	movs	r0, #7
 8004b2a:	f7fb ff73 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50);
 8004b2e:	2032      	movs	r0, #50	; 0x32
 8004b30:	f001 fcb0 	bl	8006494 <HAL_Delay>
 8004b34:	f001 b8f2 	b.w	8005d1c <LCD_Init+0x3e34>
    } else if (lcddev.id == 0x1505)  //OK
 8004b38:	4b8d      	ldr	r3, [pc, #564]	; (8004d70 <LCD_Init+0x2e88>)
 8004b3a:	889b      	ldrh	r3, [r3, #4]
 8004b3c:	f241 5205 	movw	r2, #5381	; 0x1505
 8004b40:	4293      	cmp	r3, r2
 8004b42:	f040 8117 	bne.w	8004d74 <LCD_Init+0x2e8c>
    {
        // second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007, 0x0000);
 8004b46:	2100      	movs	r1, #0
 8004b48:	2007      	movs	r0, #7
 8004b4a:	f7fb ff63 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50);
 8004b4e:	2032      	movs	r0, #50	; 0x32
 8004b50:	f001 fca0 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004b54:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004b58:	2012      	movs	r0, #18
 8004b5a:	f7fb ff5b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004b5e:	2101      	movs	r1, #1
 8004b60:	20a4      	movs	r0, #164	; 0xa4
 8004b62:	f7fb ff57 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0008, 0x000F);
 8004b66:	210f      	movs	r1, #15
 8004b68:	2008      	movs	r0, #8
 8004b6a:	f7fb ff53 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000A, 0x0008);
 8004b6e:	2108      	movs	r1, #8
 8004b70:	200a      	movs	r0, #10
 8004b72:	f7fb ff4f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000D, 0x0008);
 8004b76:	2108      	movs	r1, #8
 8004b78:	200d      	movs	r0, #13
 8004b7a:	f7fb ff4b 	bl	8000a14 <LCD_WriteReg>
        //浼介┈鏍℃
        LCD_WriteReg(0x0030, 0x0707);
 8004b7e:	f240 7107 	movw	r1, #1799	; 0x707
 8004b82:	2030      	movs	r0, #48	; 0x30
 8004b84:	f7fb ff46 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004b88:	2107      	movs	r1, #7
 8004b8a:	2031      	movs	r0, #49	; 0x31
 8004b8c:	f7fb ff42 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0032, 0x0603);
 8004b90:	f240 6103 	movw	r1, #1539	; 0x603
 8004b94:	2032      	movs	r0, #50	; 0x32
 8004b96:	f7fb ff3d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0033, 0x0700);
 8004b9a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004b9e:	2033      	movs	r0, #51	; 0x33
 8004ba0:	f7fb ff38 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0034, 0x0202);
 8004ba4:	f240 2102 	movw	r1, #514	; 0x202
 8004ba8:	2034      	movs	r0, #52	; 0x34
 8004baa:	f7fb ff33 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004bae:	2102      	movs	r1, #2
 8004bb0:	2035      	movs	r0, #53	; 0x35
 8004bb2:	f7fb ff2f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0036, 0x1F0F);
 8004bb6:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004bba:	2036      	movs	r0, #54	; 0x36
 8004bbc:	f7fb ff2a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004bc0:	f240 7107 	movw	r1, #1799	; 0x707
 8004bc4:	2037      	movs	r0, #55	; 0x37
 8004bc6:	f7fb ff25 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0038, 0x0000);
 8004bca:	2100      	movs	r1, #0
 8004bcc:	2038      	movs	r0, #56	; 0x38
 8004bce:	f7fb ff21 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0039, 0x0000);
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	2039      	movs	r0, #57	; 0x39
 8004bd6:	f7fb ff1d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x003A, 0x0707);
 8004bda:	f240 7107 	movw	r1, #1799	; 0x707
 8004bde:	203a      	movs	r0, #58	; 0x3a
 8004be0:	f7fb ff18 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004be4:	2100      	movs	r1, #0
 8004be6:	203b      	movs	r0, #59	; 0x3b
 8004be8:	f7fb ff14 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004bec:	2107      	movs	r1, #7
 8004bee:	203c      	movs	r0, #60	; 0x3c
 8004bf0:	f7fb ff10 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	203d      	movs	r0, #61	; 0x3d
 8004bf8:	f7fb ff0c 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50);
 8004bfc:	2032      	movs	r0, #50	; 0x32
 8004bfe:	f001 fc49 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0007, 0x0001);
 8004c02:	2101      	movs	r1, #1
 8004c04:	2007      	movs	r0, #7
 8004c06:	f7fb ff05 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0017, 0x0001); //寮€鍚數婧�
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	2017      	movs	r0, #23
 8004c0e:	f7fb ff01 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(50);
 8004c12:	2032      	movs	r0, #50	; 0x32
 8004c14:	f001 fc3e 	bl	8006494 <HAL_Delay>
        //鐢垫簮閰嶇疆
        LCD_WriteReg(0x0010, 0x17A0);
 8004c18:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004c1c:	2010      	movs	r0, #16
 8004c1e:	f7fb fef9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004c22:	f240 2117 	movw	r1, #535	; 0x217
 8004c26:	2011      	movs	r0, #17
 8004c28:	f7fb fef4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004c2c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004c30:	2012      	movs	r0, #18
 8004c32:	f7fb feef 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004c36:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004c3a:	2013      	movs	r0, #19
 8004c3c:	f7fb feea 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x002A, 0x0000);
 8004c40:	2100      	movs	r1, #0
 8004c42:	202a      	movs	r0, #42	; 0x2a
 8004c44:	f7fb fee6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004c48:	210a      	movs	r1, #10
 8004c4a:	2029      	movs	r0, #41	; 0x29
 8004c4c:	f7fb fee2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004c50:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004c54:	2012      	movs	r0, #18
 8004c56:	f7fb fedd 	bl	8000a14 <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	2050      	movs	r0, #80	; 0x50
 8004c5e:	f7fb fed9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0051, 0x00EF);
 8004c62:	21ef      	movs	r1, #239	; 0xef
 8004c64:	2051      	movs	r0, #81	; 0x51
 8004c66:	f7fb fed5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0052, 0x0000);
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	2052      	movs	r0, #82	; 0x52
 8004c6e:	f7fb fed1 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0053, 0x013F);
 8004c72:	f240 113f 	movw	r1, #319	; 0x13f
 8004c76:	2053      	movs	r0, #83	; 0x53
 8004c78:	f7fb fecc 	bl	8000a14 <LCD_WriteReg>
        //Pannel Image Control//
        LCD_WriteReg(0x0060, 0x2700);
 8004c7c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004c80:	2060      	movs	r0, #96	; 0x60
 8004c82:	f7fb fec7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0061, 0x0001);
 8004c86:	2101      	movs	r1, #1
 8004c88:	2061      	movs	r0, #97	; 0x61
 8004c8a:	f7fb fec3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x006A, 0x0000);
 8004c8e:	2100      	movs	r1, #0
 8004c90:	206a      	movs	r0, #106	; 0x6a
 8004c92:	f7fb febf 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0080, 0x0000);
 8004c96:	2100      	movs	r1, #0
 8004c98:	2080      	movs	r0, #128	; 0x80
 8004c9a:	f7fb febb 	bl	8000a14 <LCD_WriteReg>
        //Partial Image Control//
        LCD_WriteReg(0x0081, 0x0000);
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	2081      	movs	r0, #129	; 0x81
 8004ca2:	f7fb feb7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0082, 0x0000);
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	2082      	movs	r0, #130	; 0x82
 8004caa:	f7fb feb3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0083, 0x0000);
 8004cae:	2100      	movs	r1, #0
 8004cb0:	2083      	movs	r0, #131	; 0x83
 8004cb2:	f7fb feaf 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0084, 0x0000);
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	2084      	movs	r0, #132	; 0x84
 8004cba:	f7fb feab 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0085, 0x0000);
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	2085      	movs	r0, #133	; 0x85
 8004cc2:	f7fb fea7 	bl	8000a14 <LCD_WriteReg>
        //Panel Interface Control//
        LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004cc6:	2113      	movs	r1, #19
 8004cc8:	2090      	movs	r0, #144	; 0x90
 8004cca:	f7fb fea3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0092, 0x0300);
 8004cce:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004cd2:	2092      	movs	r0, #146	; 0x92
 8004cd4:	f7fb fe9e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0093, 0x0005);
 8004cd8:	2105      	movs	r1, #5
 8004cda:	2093      	movs	r0, #147	; 0x93
 8004cdc:	f7fb fe9a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0095, 0x0000);
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	2095      	movs	r0, #149	; 0x95
 8004ce4:	f7fb fe96 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0097, 0x0000);
 8004ce8:	2100      	movs	r1, #0
 8004cea:	2097      	movs	r0, #151	; 0x97
 8004cec:	f7fb fe92 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0098, 0x0000);
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	2098      	movs	r0, #152	; 0x98
 8004cf4:	f7fb fe8e 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x0001, 0x0100);
 8004cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	f7fb fe89 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0002, 0x0700);
 8004d02:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004d06:	2002      	movs	r0, #2
 8004d08:	f7fb fe84 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0003, 0x1038);        //鎵弿鏂瑰悜 涓�->涓�  宸�->鍙�
 8004d0c:	f241 0138 	movw	r1, #4152	; 0x1038
 8004d10:	2003      	movs	r0, #3
 8004d12:	f7fb fe7f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0004, 0x0000);
 8004d16:	2100      	movs	r1, #0
 8004d18:	2004      	movs	r0, #4
 8004d1a:	f7fb fe7b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000C, 0x0000);
 8004d1e:	2100      	movs	r1, #0
 8004d20:	200c      	movs	r0, #12
 8004d22:	f7fb fe77 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000F, 0x0000);
 8004d26:	2100      	movs	r1, #0
 8004d28:	200f      	movs	r0, #15
 8004d2a:	f7fb fe73 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0020, 0x0000);
 8004d2e:	2100      	movs	r1, #0
 8004d30:	2020      	movs	r0, #32
 8004d32:	f7fb fe6f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0021, 0x0000);
 8004d36:	2100      	movs	r1, #0
 8004d38:	2021      	movs	r0, #33	; 0x21
 8004d3a:	f7fb fe6b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0007, 0x0021);
 8004d3e:	2121      	movs	r1, #33	; 0x21
 8004d40:	2007      	movs	r0, #7
 8004d42:	f7fb fe67 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 8004d46:	2014      	movs	r0, #20
 8004d48:	f001 fba4 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0007, 0x0061);
 8004d4c:	2161      	movs	r1, #97	; 0x61
 8004d4e:	2007      	movs	r0, #7
 8004d50:	f7fb fe60 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 8004d54:	2014      	movs	r0, #20
 8004d56:	f001 fb9d 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0007, 0x0173);
 8004d5a:	f240 1173 	movw	r1, #371	; 0x173
 8004d5e:	2007      	movs	r0, #7
 8004d60:	f7fb fe58 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 8004d64:	2014      	movs	r0, #20
 8004d66:	f001 fb95 	bl	8006494 <HAL_Delay>
 8004d6a:	f000 bfd7 	b.w	8005d1c <LCD_Init+0x3e34>
 8004d6e:	bf00      	nop
 8004d70:	20000030 	.word	0x20000030
    } else if (lcddev.id == 0xB505) {
 8004d74:	4bf0      	ldr	r3, [pc, #960]	; (8005138 <LCD_Init+0x3250>)
 8004d76:	889b      	ldrh	r3, [r3, #4]
 8004d78:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	f040 8103 	bne.w	8004f88 <LCD_Init+0x30a0>
        LCD_WriteReg(0x0000, 0x0000);
 8004d82:	2100      	movs	r1, #0
 8004d84:	2000      	movs	r0, #0
 8004d86:	f7fb fe45 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0000, 0x0000);
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	f7fb fe41 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0000, 0x0000);
 8004d92:	2100      	movs	r1, #0
 8004d94:	2000      	movs	r0, #0
 8004d96:	f7fb fe3d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0000, 0x0000);
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	f7fb fe39 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x00a4, 0x0001);
 8004da2:	2101      	movs	r1, #1
 8004da4:	20a4      	movs	r0, #164	; 0xa4
 8004da6:	f7fb fe35 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 8004daa:	2014      	movs	r0, #20
 8004dac:	f001 fb72 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0060, 0x2700);
 8004db0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004db4:	2060      	movs	r0, #96	; 0x60
 8004db6:	f7fb fe2d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0008, 0x0202);
 8004dba:	f240 2102 	movw	r1, #514	; 0x202
 8004dbe:	2008      	movs	r0, #8
 8004dc0:	f7fb fe28 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x0030, 0x0214);
 8004dc4:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004dc8:	2030      	movs	r0, #48	; 0x30
 8004dca:	f7fb fe23 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0031, 0x3715);
 8004dce:	f243 7115 	movw	r1, #14101	; 0x3715
 8004dd2:	2031      	movs	r0, #49	; 0x31
 8004dd4:	f7fb fe1e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0032, 0x0604);
 8004dd8:	f240 6104 	movw	r1, #1540	; 0x604
 8004ddc:	2032      	movs	r0, #50	; 0x32
 8004dde:	f7fb fe19 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0033, 0x0e16);
 8004de2:	f640 6116 	movw	r1, #3606	; 0xe16
 8004de6:	2033      	movs	r0, #51	; 0x33
 8004de8:	f7fb fe14 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0034, 0x2211);
 8004dec:	f242 2111 	movw	r1, #8721	; 0x2211
 8004df0:	2034      	movs	r0, #52	; 0x34
 8004df2:	f7fb fe0f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0035, 0x1500);
 8004df6:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004dfa:	2035      	movs	r0, #53	; 0x35
 8004dfc:	f7fb fe0a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0036, 0x8507);
 8004e00:	f248 5107 	movw	r1, #34055	; 0x8507
 8004e04:	2036      	movs	r0, #54	; 0x36
 8004e06:	f7fb fe05 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0037, 0x1407);
 8004e0a:	f241 4107 	movw	r1, #5127	; 0x1407
 8004e0e:	2037      	movs	r0, #55	; 0x37
 8004e10:	f7fb fe00 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0038, 0x1403);
 8004e14:	f241 4103 	movw	r1, #5123	; 0x1403
 8004e18:	2038      	movs	r0, #56	; 0x38
 8004e1a:	f7fb fdfb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0039, 0x0020);
 8004e1e:	2120      	movs	r1, #32
 8004e20:	2039      	movs	r0, #57	; 0x39
 8004e22:	f7fb fdf7 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x0090, 0x001a);
 8004e26:	211a      	movs	r1, #26
 8004e28:	2090      	movs	r0, #144	; 0x90
 8004e2a:	f7fb fdf3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0010, 0x0000);
 8004e2e:	2100      	movs	r1, #0
 8004e30:	2010      	movs	r0, #16
 8004e32:	f7fb fdef 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0011, 0x0007);
 8004e36:	2107      	movs	r1, #7
 8004e38:	2011      	movs	r0, #17
 8004e3a:	f7fb fdeb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0012, 0x0000);
 8004e3e:	2100      	movs	r1, #0
 8004e40:	2012      	movs	r0, #18
 8004e42:	f7fb fde7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0013, 0x0000);
 8004e46:	2100      	movs	r1, #0
 8004e48:	2013      	movs	r0, #19
 8004e4a:	f7fb fde3 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 8004e4e:	2014      	movs	r0, #20
 8004e50:	f001 fb20 	bl	8006494 <HAL_Delay>

        LCD_WriteReg(0x0010, 0x0730);
 8004e54:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004e58:	2010      	movs	r0, #16
 8004e5a:	f7fb fddb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0011, 0x0137);
 8004e5e:	f240 1137 	movw	r1, #311	; 0x137
 8004e62:	2011      	movs	r0, #17
 8004e64:	f7fb fdd6 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 8004e68:	2014      	movs	r0, #20
 8004e6a:	f001 fb13 	bl	8006494 <HAL_Delay>

        LCD_WriteReg(0x0012, 0x01b8);
 8004e6e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004e72:	2012      	movs	r0, #18
 8004e74:	f7fb fdce 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 8004e78:	2014      	movs	r0, #20
 8004e7a:	f001 fb0b 	bl	8006494 <HAL_Delay>

        LCD_WriteReg(0x0013, 0x0f00);
 8004e7e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004e82:	2013      	movs	r0, #19
 8004e84:	f7fb fdc6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x002a, 0x0080);
 8004e88:	2180      	movs	r1, #128	; 0x80
 8004e8a:	202a      	movs	r0, #42	; 0x2a
 8004e8c:	f7fb fdc2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0029, 0x0048);
 8004e90:	2148      	movs	r1, #72	; 0x48
 8004e92:	2029      	movs	r0, #41	; 0x29
 8004e94:	f7fb fdbe 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 8004e98:	2014      	movs	r0, #20
 8004e9a:	f001 fafb 	bl	8006494 <HAL_Delay>

        LCD_WriteReg(0x0001, 0x0100);
 8004e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	f7fb fdb6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0002, 0x0700);
 8004ea8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004eac:	2002      	movs	r0, #2
 8004eae:	f7fb fdb1 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0003, 0x1038);        //鎵弿鏂瑰悜 涓�->涓�  宸�->鍙�
 8004eb2:	f241 0138 	movw	r1, #4152	; 0x1038
 8004eb6:	2003      	movs	r0, #3
 8004eb8:	f7fb fdac 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0008, 0x0202);
 8004ebc:	f240 2102 	movw	r1, #514	; 0x202
 8004ec0:	2008      	movs	r0, #8
 8004ec2:	f7fb fda7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000a, 0x0000);
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	200a      	movs	r0, #10
 8004eca:	f7fb fda3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000c, 0x0000);
 8004ece:	2100      	movs	r1, #0
 8004ed0:	200c      	movs	r0, #12
 8004ed2:	f7fb fd9f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000d, 0x0000);
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	200d      	movs	r0, #13
 8004eda:	f7fb fd9b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000e, 0x0030);
 8004ede:	2130      	movs	r1, #48	; 0x30
 8004ee0:	200e      	movs	r0, #14
 8004ee2:	f7fb fd97 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0050, 0x0000);
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	2050      	movs	r0, #80	; 0x50
 8004eea:	f7fb fd93 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0051, 0x00ef);
 8004eee:	21ef      	movs	r1, #239	; 0xef
 8004ef0:	2051      	movs	r0, #81	; 0x51
 8004ef2:	f7fb fd8f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0052, 0x0000);
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	2052      	movs	r0, #82	; 0x52
 8004efa:	f7fb fd8b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0053, 0x013f);
 8004efe:	f240 113f 	movw	r1, #319	; 0x13f
 8004f02:	2053      	movs	r0, #83	; 0x53
 8004f04:	f7fb fd86 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0060, 0x2700);
 8004f08:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f0c:	2060      	movs	r0, #96	; 0x60
 8004f0e:	f7fb fd81 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0061, 0x0001);
 8004f12:	2101      	movs	r1, #1
 8004f14:	2061      	movs	r0, #97	; 0x61
 8004f16:	f7fb fd7d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x006a, 0x0000);
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	206a      	movs	r0, #106	; 0x6a
 8004f1e:	f7fb fd79 	bl	8000a14 <LCD_WriteReg>
        //LCD_WriteReg(0x0080,0x0000);
        //LCD_WriteReg(0x0081,0x0000);
        LCD_WriteReg(0x0090, 0X0011);
 8004f22:	2111      	movs	r1, #17
 8004f24:	2090      	movs	r0, #144	; 0x90
 8004f26:	f7fb fd75 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0092, 0x0600);
 8004f2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f2e:	2092      	movs	r0, #146	; 0x92
 8004f30:	f7fb fd70 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0093, 0x0402);
 8004f34:	f240 4102 	movw	r1, #1026	; 0x402
 8004f38:	2093      	movs	r0, #147	; 0x93
 8004f3a:	f7fb fd6b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0094, 0x0002);
 8004f3e:	2102      	movs	r1, #2
 8004f40:	2094      	movs	r0, #148	; 0x94
 8004f42:	f7fb fd67 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 8004f46:	2014      	movs	r0, #20
 8004f48:	f001 faa4 	bl	8006494 <HAL_Delay>

        LCD_WriteReg(0x0007, 0x0001);
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	2007      	movs	r0, #7
 8004f50:	f7fb fd60 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 8004f54:	2014      	movs	r0, #20
 8004f56:	f001 fa9d 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0007, 0x0061);
 8004f5a:	2161      	movs	r1, #97	; 0x61
 8004f5c:	2007      	movs	r0, #7
 8004f5e:	f7fb fd59 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0007, 0x0173);
 8004f62:	f240 1173 	movw	r1, #371	; 0x173
 8004f66:	2007      	movs	r0, #7
 8004f68:	f7fb fd54 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x0020, 0x0000);
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	2020      	movs	r0, #32
 8004f70:	f7fb fd50 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0021, 0x0000);
 8004f74:	2100      	movs	r1, #0
 8004f76:	2021      	movs	r0, #33	; 0x21
 8004f78:	f7fb fd4c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x00, 0x22);
 8004f7c:	2122      	movs	r1, #34	; 0x22
 8004f7e:	2000      	movs	r0, #0
 8004f80:	f7fb fd48 	bl	8000a14 <LCD_WriteReg>
 8004f84:	f000 beca 	b.w	8005d1c <LCD_Init+0x3e34>
    } else if (lcddev.id == 0xC505) {
 8004f88:	4b6b      	ldr	r3, [pc, #428]	; (8005138 <LCD_Init+0x3250>)
 8004f8a:	889b      	ldrh	r3, [r3, #4]
 8004f8c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004f90:	4293      	cmp	r3, r2
 8004f92:	f040 80d3 	bne.w	800513c <LCD_Init+0x3254>
        LCD_WriteReg(0x0000, 0x0000);
 8004f96:	2100      	movs	r1, #0
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f7fb fd3b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0000, 0x0000);
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f7fb fd37 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 8004fa6:	2014      	movs	r0, #20
 8004fa8:	f001 fa74 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0000, 0x0000);
 8004fac:	2100      	movs	r1, #0
 8004fae:	2000      	movs	r0, #0
 8004fb0:	f7fb fd30 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0000, 0x0000);
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	f7fb fd2c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0000, 0x0000);
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	f7fb fd28 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0000, 0x0000);
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	f7fb fd24 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x00a4, 0x0001);
 8004fcc:	2101      	movs	r1, #1
 8004fce:	20a4      	movs	r0, #164	; 0xa4
 8004fd0:	f7fb fd20 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 8004fd4:	2014      	movs	r0, #20
 8004fd6:	f001 fa5d 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0060, 0x2700);
 8004fda:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004fde:	2060      	movs	r0, #96	; 0x60
 8004fe0:	f7fb fd18 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0008, 0x0806);
 8004fe4:	f640 0106 	movw	r1, #2054	; 0x806
 8004fe8:	2008      	movs	r0, #8
 8004fea:	f7fb fd13 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004fee:	f240 7103 	movw	r1, #1795	; 0x703
 8004ff2:	2030      	movs	r0, #48	; 0x30
 8004ff4:	f7fb fd0e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0031, 0x0001);
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	2031      	movs	r0, #49	; 0x31
 8004ffc:	f7fb fd0a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0032, 0x0004);
 8005000:	2104      	movs	r1, #4
 8005002:	2032      	movs	r0, #50	; 0x32
 8005004:	f7fb fd06 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0033, 0x0102);
 8005008:	f44f 7181 	mov.w	r1, #258	; 0x102
 800500c:	2033      	movs	r0, #51	; 0x33
 800500e:	f7fb fd01 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0034, 0x0300);
 8005012:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005016:	2034      	movs	r0, #52	; 0x34
 8005018:	f7fb fcfc 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0035, 0x0103);
 800501c:	f240 1103 	movw	r1, #259	; 0x103
 8005020:	2035      	movs	r0, #53	; 0x35
 8005022:	f7fb fcf7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0036, 0x001F);
 8005026:	211f      	movs	r1, #31
 8005028:	2036      	movs	r0, #54	; 0x36
 800502a:	f7fb fcf3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0037, 0x0703);
 800502e:	f240 7103 	movw	r1, #1795	; 0x703
 8005032:	2037      	movs	r0, #55	; 0x37
 8005034:	f7fb fcee 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0038, 0x0001);
 8005038:	2101      	movs	r1, #1
 800503a:	2038      	movs	r0, #56	; 0x38
 800503c:	f7fb fcea 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0039, 0x0004);
 8005040:	2104      	movs	r1, #4
 8005042:	2039      	movs	r0, #57	; 0x39
 8005044:	f7fb fce6 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8005048:	2115      	movs	r1, #21
 800504a:	2090      	movs	r0, #144	; 0x90
 800504c:	f7fb fce2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8005050:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005054:	2010      	movs	r0, #16
 8005056:	f7fb fcdd 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 800505a:	f240 2147 	movw	r1, #583	; 0x247
 800505e:	2011      	movs	r0, #17
 8005060:	f7fb fcd8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0012, 0x01BC);
 8005064:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005068:	2012      	movs	r0, #18
 800506a:	f7fb fcd3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0013, 0x0e00);
 800506e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8005072:	2013      	movs	r0, #19
 8005074:	f7fb fcce 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(120);
 8005078:	2078      	movs	r0, #120	; 0x78
 800507a:	f001 fa0b 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0001, 0x0100);
 800507e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005082:	2001      	movs	r0, #1
 8005084:	f7fb fcc6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0002, 0x0200);
 8005088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800508c:	2002      	movs	r0, #2
 800508e:	f7fb fcc1 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0003, 0x1030);
 8005092:	f241 0130 	movw	r1, #4144	; 0x1030
 8005096:	2003      	movs	r0, #3
 8005098:	f7fb fcbc 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x000A, 0x0008);
 800509c:	2108      	movs	r1, #8
 800509e:	200a      	movs	r0, #10
 80050a0:	f7fb fcb8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000C, 0x0000);
 80050a4:	2100      	movs	r1, #0
 80050a6:	200c      	movs	r0, #12
 80050a8:	f7fb fcb4 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x000E, 0x0020);
 80050ac:	2120      	movs	r1, #32
 80050ae:	200e      	movs	r0, #14
 80050b0:	f7fb fcb0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000F, 0x0000);
 80050b4:	2100      	movs	r1, #0
 80050b6:	200f      	movs	r0, #15
 80050b8:	f7fb fcac 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0020, 0x0000);	//H Start
 80050bc:	2100      	movs	r1, #0
 80050be:	2020      	movs	r0, #32
 80050c0:	f7fb fca8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0021, 0x0000);	//V Start
 80050c4:	2100      	movs	r1, #0
 80050c6:	2021      	movs	r0, #33	; 0x21
 80050c8:	f7fb fca4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x002A, 0x003D);	//vcom2
 80050cc:	213d      	movs	r1, #61	; 0x3d
 80050ce:	202a      	movs	r0, #42	; 0x2a
 80050d0:	f7fb fca0 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(20);
 80050d4:	2014      	movs	r0, #20
 80050d6:	f001 f9dd 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0x0029, 0x002d);
 80050da:	212d      	movs	r1, #45	; 0x2d
 80050dc:	2029      	movs	r0, #41	; 0x29
 80050de:	f7fb fc99 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0050, 0x0000);
 80050e2:	2100      	movs	r1, #0
 80050e4:	2050      	movs	r0, #80	; 0x50
 80050e6:	f7fb fc95 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0051, 0xD0EF);
 80050ea:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 80050ee:	2051      	movs	r0, #81	; 0x51
 80050f0:	f7fb fc90 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0052, 0x0000);
 80050f4:	2100      	movs	r1, #0
 80050f6:	2052      	movs	r0, #82	; 0x52
 80050f8:	f7fb fc8c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0053, 0x013F);
 80050fc:	f240 113f 	movw	r1, #319	; 0x13f
 8005100:	2053      	movs	r0, #83	; 0x53
 8005102:	f7fb fc87 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0061, 0x0000);
 8005106:	2100      	movs	r1, #0
 8005108:	2061      	movs	r0, #97	; 0x61
 800510a:	f7fb fc83 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x006A, 0x0000);
 800510e:	2100      	movs	r1, #0
 8005110:	206a      	movs	r0, #106	; 0x6a
 8005112:	f7fb fc7f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0092, 0x0300);
 8005116:	f44f 7140 	mov.w	r1, #768	; 0x300
 800511a:	2092      	movs	r0, #146	; 0x92
 800511c:	f7fb fc7a 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0x0093, 0x0005);
 8005120:	2105      	movs	r1, #5
 8005122:	2093      	movs	r0, #147	; 0x93
 8005124:	f7fb fc76 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0007, 0x0100);
 8005128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800512c:	2007      	movs	r0, #7
 800512e:	f7fb fc71 	bl	8000a14 <LCD_WriteReg>
 8005132:	f000 bdf3 	b.w	8005d1c <LCD_Init+0x3e34>
 8005136:	bf00      	nop
 8005138:	20000030 	.word	0x20000030
    } else if (lcddev.id == 0x8989)	//OK |/|/|
 800513c:	4bc2      	ldr	r3, [pc, #776]	; (8005448 <LCD_Init+0x3560>)
 800513e:	889b      	ldrh	r3, [r3, #4]
 8005140:	f648 1289 	movw	r2, #35209	; 0x8989
 8005144:	4293      	cmp	r3, r2
 8005146:	f040 80bc 	bne.w	80052c2 <LCD_Init+0x33da>
    {
        LCD_WriteReg(0x0000, 0x0001);	//鎵撳紑鏅舵尟
 800514a:	2101      	movs	r1, #1
 800514c:	2000      	movs	r0, #0
 800514e:	f7fb fc61 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8005152:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8005156:	2003      	movs	r0, #3
 8005158:	f7fb fc5c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000C, 0x0000);
 800515c:	2100      	movs	r1, #0
 800515e:	200c      	movs	r0, #12
 8005160:	f7fb fc58 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000D, 0x080C);
 8005164:	f640 010c 	movw	r1, #2060	; 0x80c
 8005168:	200d      	movs	r0, #13
 800516a:	f7fb fc53 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000E, 0x2B00);
 800516e:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8005172:	200e      	movs	r0, #14
 8005174:	f7fb fc4e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x001E, 0x00B0);
 8005178:	21b0      	movs	r1, #176	; 0xb0
 800517a:	201e      	movs	r0, #30
 800517c:	f7fb fc4a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0001, 0x2B3F);	//椹卞姩杈撳嚭鎺у埗320*240  0x6B3F
 8005180:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8005184:	2001      	movs	r0, #1
 8005186:	f7fb fc45 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0002, 0x0600);
 800518a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800518e:	2002      	movs	r0, #2
 8005190:	f7fb fc40 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0010, 0x0000);
 8005194:	2100      	movs	r1, #0
 8005196:	2010      	movs	r0, #16
 8005198:	f7fb fc3c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0011, 0x6078); //瀹氫箟鏁版嵁鏍煎紡  16浣嶈壊 		妯睆 0x6058
 800519c:	f246 0178 	movw	r1, #24696	; 0x6078
 80051a0:	2011      	movs	r0, #17
 80051a2:	f7fb fc37 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0005, 0x0000);
 80051a6:	2100      	movs	r1, #0
 80051a8:	2005      	movs	r0, #5
 80051aa:	f7fb fc33 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0006, 0x0000);
 80051ae:	2100      	movs	r1, #0
 80051b0:	2006      	movs	r0, #6
 80051b2:	f7fb fc2f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0016, 0xEF1C);
 80051b6:	f64e 711c 	movw	r1, #61212	; 0xef1c
 80051ba:	2016      	movs	r0, #22
 80051bc:	f7fb fc2a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0017, 0x0003);
 80051c0:	2103      	movs	r1, #3
 80051c2:	2017      	movs	r0, #23
 80051c4:	f7fb fc26 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0007, 0x0233); //0x0233
 80051c8:	f240 2133 	movw	r1, #563	; 0x233
 80051cc:	2007      	movs	r0, #7
 80051ce:	f7fb fc21 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000B, 0x0000);
 80051d2:	2100      	movs	r1, #0
 80051d4:	200b      	movs	r0, #11
 80051d6:	f7fb fc1d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x000F, 0x0000); //鎵弿寮€濮嬪湴鍧€
 80051da:	2100      	movs	r1, #0
 80051dc:	200f      	movs	r0, #15
 80051de:	f7fb fc19 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0041, 0x0000);
 80051e2:	2100      	movs	r1, #0
 80051e4:	2041      	movs	r0, #65	; 0x41
 80051e6:	f7fb fc15 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0042, 0x0000);
 80051ea:	2100      	movs	r1, #0
 80051ec:	2042      	movs	r0, #66	; 0x42
 80051ee:	f7fb fc11 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0048, 0x0000);
 80051f2:	2100      	movs	r1, #0
 80051f4:	2048      	movs	r0, #72	; 0x48
 80051f6:	f7fb fc0d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0049, 0x013F);
 80051fa:	f240 113f 	movw	r1, #319	; 0x13f
 80051fe:	2049      	movs	r0, #73	; 0x49
 8005200:	f7fb fc08 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x004A, 0x0000);
 8005204:	2100      	movs	r1, #0
 8005206:	204a      	movs	r0, #74	; 0x4a
 8005208:	f7fb fc04 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x004B, 0x0000);
 800520c:	2100      	movs	r1, #0
 800520e:	204b      	movs	r0, #75	; 0x4b
 8005210:	f7fb fc00 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0044, 0xEF00);
 8005214:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005218:	2044      	movs	r0, #68	; 0x44
 800521a:	f7fb fbfb 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0045, 0x0000);
 800521e:	2100      	movs	r1, #0
 8005220:	2045      	movs	r0, #69	; 0x45
 8005222:	f7fb fbf7 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0046, 0x013F);
 8005226:	f240 113f 	movw	r1, #319	; 0x13f
 800522a:	2046      	movs	r0, #70	; 0x46
 800522c:	f7fb fbf2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0030, 0x0707);
 8005230:	f240 7107 	movw	r1, #1799	; 0x707
 8005234:	2030      	movs	r0, #48	; 0x30
 8005236:	f7fb fbed 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0031, 0x0204);
 800523a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800523e:	2031      	movs	r0, #49	; 0x31
 8005240:	f7fb fbe8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0032, 0x0204);
 8005244:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005248:	2032      	movs	r0, #50	; 0x32
 800524a:	f7fb fbe3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0033, 0x0502);
 800524e:	f240 5102 	movw	r1, #1282	; 0x502
 8005252:	2033      	movs	r0, #51	; 0x33
 8005254:	f7fb fbde 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0034, 0x0507);
 8005258:	f240 5107 	movw	r1, #1287	; 0x507
 800525c:	2034      	movs	r0, #52	; 0x34
 800525e:	f7fb fbd9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0035, 0x0204);
 8005262:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005266:	2035      	movs	r0, #53	; 0x35
 8005268:	f7fb fbd4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0036, 0x0204);
 800526c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005270:	2036      	movs	r0, #54	; 0x36
 8005272:	f7fb fbcf 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0037, 0x0502);
 8005276:	f240 5102 	movw	r1, #1282	; 0x502
 800527a:	2037      	movs	r0, #55	; 0x37
 800527c:	f7fb fbca 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x003A, 0x0302);
 8005280:	f240 3102 	movw	r1, #770	; 0x302
 8005284:	203a      	movs	r0, #58	; 0x3a
 8005286:	f7fb fbc5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x003B, 0x0302);
 800528a:	f240 3102 	movw	r1, #770	; 0x302
 800528e:	203b      	movs	r0, #59	; 0x3b
 8005290:	f7fb fbc0 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0023, 0x0000);
 8005294:	2100      	movs	r1, #0
 8005296:	2023      	movs	r0, #35	; 0x23
 8005298:	f7fb fbbc 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0024, 0x0000);
 800529c:	2100      	movs	r1, #0
 800529e:	2024      	movs	r0, #36	; 0x24
 80052a0:	f7fb fbb8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x0025, 0x8000);
 80052a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052a8:	2025      	movs	r0, #37	; 0x25
 80052aa:	f7fb fbb3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x004f, 0);        //琛岄鍧€0
 80052ae:	2100      	movs	r1, #0
 80052b0:	204f      	movs	r0, #79	; 0x4f
 80052b2:	f7fb fbaf 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0x004e, 0);        //鍒楅鍧€0
 80052b6:	2100      	movs	r1, #0
 80052b8:	204e      	movs	r0, #78	; 0x4e
 80052ba:	f7fb fbab 	bl	8000a14 <LCD_WriteReg>
 80052be:	f000 bd2d 	b.w	8005d1c <LCD_Init+0x3e34>
    } else if (lcddev.id == 0x4531)        //OK |/|/|
 80052c2:	4b61      	ldr	r3, [pc, #388]	; (8005448 <LCD_Init+0x3560>)
 80052c4:	889b      	ldrh	r3, [r3, #4]
 80052c6:	f244 5231 	movw	r2, #17713	; 0x4531
 80052ca:	4293      	cmp	r3, r2
 80052cc:	f040 80be 	bne.w	800544c <LCD_Init+0x3564>
    {
        LCD_WriteReg(0X00, 0X0001);
 80052d0:	2101      	movs	r1, #1
 80052d2:	2000      	movs	r0, #0
 80052d4:	f7fb fb9e 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(10);
 80052d8:	200a      	movs	r0, #10
 80052da:	f001 f8db 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0X10, 0X1628);
 80052de:	f241 6128 	movw	r1, #5672	; 0x1628
 80052e2:	2010      	movs	r0, #16
 80052e4:	f7fb fb96 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X12, 0X000e);        //0x0006
 80052e8:	210e      	movs	r1, #14
 80052ea:	2012      	movs	r0, #18
 80052ec:	f7fb fb92 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X13, 0X0A39);
 80052f0:	f640 2139 	movw	r1, #2617	; 0xa39
 80052f4:	2013      	movs	r0, #19
 80052f6:	f7fb fb8d 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(10);
 80052fa:	200a      	movs	r0, #10
 80052fc:	f001 f8ca 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0X11, 0X0040);
 8005300:	2140      	movs	r1, #64	; 0x40
 8005302:	2011      	movs	r0, #17
 8005304:	f7fb fb86 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X15, 0X0050);
 8005308:	2150      	movs	r1, #80	; 0x50
 800530a:	2015      	movs	r0, #21
 800530c:	f7fb fb82 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(10);
 8005310:	200a      	movs	r0, #10
 8005312:	f001 f8bf 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0X12, 0X001e);        //16
 8005316:	211e      	movs	r1, #30
 8005318:	2012      	movs	r0, #18
 800531a:	f7fb fb7b 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(10);
 800531e:	200a      	movs	r0, #10
 8005320:	f001 f8b8 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0X10, 0X1620);
 8005324:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005328:	2010      	movs	r0, #16
 800532a:	f7fb fb73 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X13, 0X2A39);
 800532e:	f642 2139 	movw	r1, #10809	; 0x2a39
 8005332:	2013      	movs	r0, #19
 8005334:	f7fb fb6e 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(10);
 8005338:	200a      	movs	r0, #10
 800533a:	f001 f8ab 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0X01, 0X0100);
 800533e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005342:	2001      	movs	r0, #1
 8005344:	f7fb fb66 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X02, 0X0300);
 8005348:	f44f 7140 	mov.w	r1, #768	; 0x300
 800534c:	2002      	movs	r0, #2
 800534e:	f7fb fb61 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X03, 0X1038);        //鏀瑰彉鏂瑰悜鐨�
 8005352:	f241 0138 	movw	r1, #4152	; 0x1038
 8005356:	2003      	movs	r0, #3
 8005358:	f7fb fb5c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X08, 0X0202);
 800535c:	f240 2102 	movw	r1, #514	; 0x202
 8005360:	2008      	movs	r0, #8
 8005362:	f7fb fb57 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X0A, 0X0008);
 8005366:	2108      	movs	r1, #8
 8005368:	200a      	movs	r0, #10
 800536a:	f7fb fb53 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X30, 0X0000);
 800536e:	2100      	movs	r1, #0
 8005370:	2030      	movs	r0, #48	; 0x30
 8005372:	f7fb fb4f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X31, 0X0402);
 8005376:	f240 4102 	movw	r1, #1026	; 0x402
 800537a:	2031      	movs	r0, #49	; 0x31
 800537c:	f7fb fb4a 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X32, 0X0106);
 8005380:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005384:	2032      	movs	r0, #50	; 0x32
 8005386:	f7fb fb45 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X33, 0X0503);
 800538a:	f240 5103 	movw	r1, #1283	; 0x503
 800538e:	2033      	movs	r0, #51	; 0x33
 8005390:	f7fb fb40 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X34, 0X0104);
 8005394:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005398:	2034      	movs	r0, #52	; 0x34
 800539a:	f7fb fb3b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X35, 0X0301);
 800539e:	f240 3101 	movw	r1, #769	; 0x301
 80053a2:	2035      	movs	r0, #53	; 0x35
 80053a4:	f7fb fb36 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X36, 0X0707);
 80053a8:	f240 7107 	movw	r1, #1799	; 0x707
 80053ac:	2036      	movs	r0, #54	; 0x36
 80053ae:	f7fb fb31 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X37, 0X0305);
 80053b2:	f240 3105 	movw	r1, #773	; 0x305
 80053b6:	2037      	movs	r0, #55	; 0x37
 80053b8:	f7fb fb2c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X38, 0X0208);
 80053bc:	f44f 7102 	mov.w	r1, #520	; 0x208
 80053c0:	2038      	movs	r0, #56	; 0x38
 80053c2:	f7fb fb27 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X39, 0X0F0B);
 80053c6:	f640 710b 	movw	r1, #3851	; 0xf0b
 80053ca:	2039      	movs	r0, #57	; 0x39
 80053cc:	f7fb fb22 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X41, 0X0002);
 80053d0:	2102      	movs	r1, #2
 80053d2:	2041      	movs	r0, #65	; 0x41
 80053d4:	f7fb fb1e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X60, 0X2700);
 80053d8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80053dc:	2060      	movs	r0, #96	; 0x60
 80053de:	f7fb fb19 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X61, 0X0001);
 80053e2:	2101      	movs	r1, #1
 80053e4:	2061      	movs	r0, #97	; 0x61
 80053e6:	f7fb fb15 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X90, 0X0210);
 80053ea:	f44f 7104 	mov.w	r1, #528	; 0x210
 80053ee:	2090      	movs	r0, #144	; 0x90
 80053f0:	f7fb fb10 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X92, 0X010A);
 80053f4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80053f8:	2092      	movs	r0, #146	; 0x92
 80053fa:	f7fb fb0b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X93, 0X0004);
 80053fe:	2104      	movs	r1, #4
 8005400:	2093      	movs	r0, #147	; 0x93
 8005402:	f7fb fb07 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0XA0, 0X0100);
 8005406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800540a:	20a0      	movs	r0, #160	; 0xa0
 800540c:	f7fb fb02 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X07, 0X0001);
 8005410:	2101      	movs	r1, #1
 8005412:	2007      	movs	r0, #7
 8005414:	f7fb fafe 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X07, 0X0021);
 8005418:	2121      	movs	r1, #33	; 0x21
 800541a:	2007      	movs	r0, #7
 800541c:	f7fb fafa 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X07, 0X0023);
 8005420:	2123      	movs	r1, #35	; 0x23
 8005422:	2007      	movs	r0, #7
 8005424:	f7fb faf6 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X07, 0X0033);
 8005428:	2133      	movs	r1, #51	; 0x33
 800542a:	2007      	movs	r0, #7
 800542c:	f7fb faf2 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X07, 0X0133);
 8005430:	f240 1133 	movw	r1, #307	; 0x133
 8005434:	2007      	movs	r0, #7
 8005436:	f7fb faed 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0XA0, 0X0000);
 800543a:	2100      	movs	r1, #0
 800543c:	20a0      	movs	r0, #160	; 0xa0
 800543e:	f7fb fae9 	bl	8000a14 <LCD_WriteReg>
 8005442:	f000 bc6b 	b.w	8005d1c <LCD_Init+0x3e34>
 8005446:	bf00      	nop
 8005448:	20000030 	.word	0x20000030
    } else if (lcddev.id == 0x4535) {
 800544c:	4b5b      	ldr	r3, [pc, #364]	; (80055bc <LCD_Init+0x36d4>)
 800544e:	889b      	ldrh	r3, [r3, #4]
 8005450:	f244 5235 	movw	r2, #17717	; 0x4535
 8005454:	4293      	cmp	r3, r2
 8005456:	f040 80b3 	bne.w	80055c0 <LCD_Init+0x36d8>
        LCD_WriteReg(0X15, 0X0030);
 800545a:	2130      	movs	r1, #48	; 0x30
 800545c:	2015      	movs	r0, #21
 800545e:	f7fb fad9 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X9A, 0X0010);
 8005462:	2110      	movs	r1, #16
 8005464:	209a      	movs	r0, #154	; 0x9a
 8005466:	f7fb fad5 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X11, 0X0020);
 800546a:	2120      	movs	r1, #32
 800546c:	2011      	movs	r0, #17
 800546e:	f7fb fad1 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X10, 0X3428);
 8005472:	f243 4128 	movw	r1, #13352	; 0x3428
 8005476:	2010      	movs	r0, #16
 8005478:	f7fb facc 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X12, 0X0002);        //16
 800547c:	2102      	movs	r1, #2
 800547e:	2012      	movs	r0, #18
 8005480:	f7fb fac8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X13, 0X1038);
 8005484:	f241 0138 	movw	r1, #4152	; 0x1038
 8005488:	2013      	movs	r0, #19
 800548a:	f7fb fac3 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(40);
 800548e:	2028      	movs	r0, #40	; 0x28
 8005490:	f001 f800 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0X12, 0X0012);        //16
 8005494:	2112      	movs	r1, #18
 8005496:	2012      	movs	r0, #18
 8005498:	f7fb fabc 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(40);
 800549c:	2028      	movs	r0, #40	; 0x28
 800549e:	f000 fff9 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0X10, 0X3420);
 80054a2:	f243 4120 	movw	r1, #13344	; 0x3420
 80054a6:	2010      	movs	r0, #16
 80054a8:	f7fb fab4 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X13, 0X3038);
 80054ac:	f243 0138 	movw	r1, #12344	; 0x3038
 80054b0:	2013      	movs	r0, #19
 80054b2:	f7fb faaf 	bl	8000a14 <LCD_WriteReg>
        HAL_Delay(70);
 80054b6:	2046      	movs	r0, #70	; 0x46
 80054b8:	f000 ffec 	bl	8006494 <HAL_Delay>
        LCD_WriteReg(0X30, 0X0000);
 80054bc:	2100      	movs	r1, #0
 80054be:	2030      	movs	r0, #48	; 0x30
 80054c0:	f7fb faa8 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X31, 0X0402);
 80054c4:	f240 4102 	movw	r1, #1026	; 0x402
 80054c8:	2031      	movs	r0, #49	; 0x31
 80054ca:	f7fb faa3 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X32, 0X0307);
 80054ce:	f240 3107 	movw	r1, #775	; 0x307
 80054d2:	2032      	movs	r0, #50	; 0x32
 80054d4:	f7fb fa9e 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X33, 0X0304);
 80054d8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80054dc:	2033      	movs	r0, #51	; 0x33
 80054de:	f7fb fa99 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X34, 0X0004);
 80054e2:	2104      	movs	r1, #4
 80054e4:	2034      	movs	r0, #52	; 0x34
 80054e6:	f7fb fa95 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X35, 0X0401);
 80054ea:	f240 4101 	movw	r1, #1025	; 0x401
 80054ee:	2035      	movs	r0, #53	; 0x35
 80054f0:	f7fb fa90 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X36, 0X0707);
 80054f4:	f240 7107 	movw	r1, #1799	; 0x707
 80054f8:	2036      	movs	r0, #54	; 0x36
 80054fa:	f7fb fa8b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X37, 0X0305);
 80054fe:	f240 3105 	movw	r1, #773	; 0x305
 8005502:	2037      	movs	r0, #55	; 0x37
 8005504:	f7fb fa86 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X38, 0X0610);
 8005508:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800550c:	2038      	movs	r0, #56	; 0x38
 800550e:	f7fb fa81 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X39, 0X0610);
 8005512:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005516:	2039      	movs	r0, #57	; 0x39
 8005518:	f7fb fa7c 	bl	8000a14 <LCD_WriteReg>

        LCD_WriteReg(0X01, 0X0100);
 800551c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005520:	2001      	movs	r0, #1
 8005522:	f7fb fa77 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X02, 0X0300);
 8005526:	f44f 7140 	mov.w	r1, #768	; 0x300
 800552a:	2002      	movs	r0, #2
 800552c:	f7fb fa72 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X03, 0X1030);        //鏀瑰彉鏂瑰悜鐨�
 8005530:	f241 0130 	movw	r1, #4144	; 0x1030
 8005534:	2003      	movs	r0, #3
 8005536:	f7fb fa6d 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X08, 0X0808);
 800553a:	f640 0108 	movw	r1, #2056	; 0x808
 800553e:	2008      	movs	r0, #8
 8005540:	f7fb fa68 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X0A, 0X0008);
 8005544:	2108      	movs	r1, #8
 8005546:	200a      	movs	r0, #10
 8005548:	f7fb fa64 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X60, 0X2700);
 800554c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005550:	2060      	movs	r0, #96	; 0x60
 8005552:	f7fb fa5f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X61, 0X0001);
 8005556:	2101      	movs	r1, #1
 8005558:	2061      	movs	r0, #97	; 0x61
 800555a:	f7fb fa5b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X90, 0X013E);
 800555e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005562:	2090      	movs	r0, #144	; 0x90
 8005564:	f7fb fa56 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X92, 0X0100);
 8005568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800556c:	2092      	movs	r0, #146	; 0x92
 800556e:	f7fb fa51 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X93, 0X0100);
 8005572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005576:	2093      	movs	r0, #147	; 0x93
 8005578:	f7fb fa4c 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0XA0, 0X3000);
 800557c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005580:	20a0      	movs	r0, #160	; 0xa0
 8005582:	f7fb fa47 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0XA3, 0X0010);
 8005586:	2110      	movs	r1, #16
 8005588:	20a3      	movs	r0, #163	; 0xa3
 800558a:	f7fb fa43 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X07, 0X0001);
 800558e:	2101      	movs	r1, #1
 8005590:	2007      	movs	r0, #7
 8005592:	f7fb fa3f 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X07, 0X0021);
 8005596:	2121      	movs	r1, #33	; 0x21
 8005598:	2007      	movs	r0, #7
 800559a:	f7fb fa3b 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X07, 0X0023);
 800559e:	2123      	movs	r1, #35	; 0x23
 80055a0:	2007      	movs	r0, #7
 80055a2:	f7fb fa37 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X07, 0X0033);
 80055a6:	2133      	movs	r1, #51	; 0x33
 80055a8:	2007      	movs	r0, #7
 80055aa:	f7fb fa33 	bl	8000a14 <LCD_WriteReg>
        LCD_WriteReg(0X07, 0X0133);
 80055ae:	f240 1133 	movw	r1, #307	; 0x133
 80055b2:	2007      	movs	r0, #7
 80055b4:	f7fb fa2e 	bl	8000a14 <LCD_WriteReg>
 80055b8:	e3b0      	b.n	8005d1c <LCD_Init+0x3e34>
 80055ba:	bf00      	nop
 80055bc:	20000030 	.word	0x20000030
    } else if (lcddev.id == 0X1963) {
 80055c0:	4ba8      	ldr	r3, [pc, #672]	; (8005864 <LCD_Init+0x397c>)
 80055c2:	889b      	ldrh	r3, [r3, #4]
 80055c4:	f641 1263 	movw	r2, #6499	; 0x1963
 80055c8:	4293      	cmp	r3, r2
 80055ca:	f040 83a7 	bne.w	8005d1c <LCD_Init+0x3e34>
        LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80055ce:	20e2      	movs	r0, #226	; 0xe2
 80055d0:	f7fb f994 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(0x1D);		//鍙傛暟1
 80055d4:	4ba4      	ldr	r3, [pc, #656]	; (8005868 <LCD_Init+0x3980>)
 80055d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055da:	611a      	str	r2, [r3, #16]
 80055dc:	4ba2      	ldr	r3, [pc, #648]	; (8005868 <LCD_Init+0x3980>)
 80055de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e2:	615a      	str	r2, [r3, #20]
 80055e4:	4ba1      	ldr	r3, [pc, #644]	; (800586c <LCD_Init+0x3984>)
 80055e6:	221d      	movs	r2, #29
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	4b9f      	ldr	r3, [pc, #636]	; (8005868 <LCD_Init+0x3980>)
 80055ec:	2280      	movs	r2, #128	; 0x80
 80055ee:	615a      	str	r2, [r3, #20]
 80055f0:	4b9d      	ldr	r3, [pc, #628]	; (8005868 <LCD_Init+0x3980>)
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	611a      	str	r2, [r3, #16]
 80055f6:	4b9c      	ldr	r3, [pc, #624]	; (8005868 <LCD_Init+0x3980>)
 80055f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055fc:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x02);		//鍙傛暟2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80055fe:	4b9a      	ldr	r3, [pc, #616]	; (8005868 <LCD_Init+0x3980>)
 8005600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005604:	611a      	str	r2, [r3, #16]
 8005606:	4b98      	ldr	r3, [pc, #608]	; (8005868 <LCD_Init+0x3980>)
 8005608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560c:	615a      	str	r2, [r3, #20]
 800560e:	4b97      	ldr	r3, [pc, #604]	; (800586c <LCD_Init+0x3984>)
 8005610:	2202      	movs	r2, #2
 8005612:	60da      	str	r2, [r3, #12]
 8005614:	4b94      	ldr	r3, [pc, #592]	; (8005868 <LCD_Init+0x3980>)
 8005616:	2280      	movs	r2, #128	; 0x80
 8005618:	615a      	str	r2, [r3, #20]
 800561a:	4b93      	ldr	r3, [pc, #588]	; (8005868 <LCD_Init+0x3980>)
 800561c:	2280      	movs	r2, #128	; 0x80
 800561e:	611a      	str	r2, [r3, #16]
 8005620:	4b91      	ldr	r3, [pc, #580]	; (8005868 <LCD_Init+0x3980>)
 8005622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005626:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x04);		//鍙傛暟3 Validate M and N values
 8005628:	4b8f      	ldr	r3, [pc, #572]	; (8005868 <LCD_Init+0x3980>)
 800562a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800562e:	611a      	str	r2, [r3, #16]
 8005630:	4b8d      	ldr	r3, [pc, #564]	; (8005868 <LCD_Init+0x3980>)
 8005632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005636:	615a      	str	r2, [r3, #20]
 8005638:	4b8c      	ldr	r3, [pc, #560]	; (800586c <LCD_Init+0x3984>)
 800563a:	2204      	movs	r2, #4
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	4b8a      	ldr	r3, [pc, #552]	; (8005868 <LCD_Init+0x3980>)
 8005640:	2280      	movs	r2, #128	; 0x80
 8005642:	615a      	str	r2, [r3, #20]
 8005644:	4b88      	ldr	r3, [pc, #544]	; (8005868 <LCD_Init+0x3980>)
 8005646:	2280      	movs	r2, #128	; 0x80
 8005648:	611a      	str	r2, [r3, #16]
 800564a:	4b87      	ldr	r3, [pc, #540]	; (8005868 <LCD_Init+0x3980>)
 800564c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005650:	611a      	str	r2, [r3, #16]
//		delay_us(100);
        HAL_Delay(1);
 8005652:	2001      	movs	r0, #1
 8005654:	f000 ff1e 	bl	8006494 <HAL_Delay>
        LCD_WR_REG(0xE0);		// Start PLL command
 8005658:	20e0      	movs	r0, #224	; 0xe0
 800565a:	f7fb f94f 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(0x01);		// enable PLL
 800565e:	4b82      	ldr	r3, [pc, #520]	; (8005868 <LCD_Init+0x3980>)
 8005660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005664:	611a      	str	r2, [r3, #16]
 8005666:	4b80      	ldr	r3, [pc, #512]	; (8005868 <LCD_Init+0x3980>)
 8005668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800566c:	615a      	str	r2, [r3, #20]
 800566e:	4b7f      	ldr	r3, [pc, #508]	; (800586c <LCD_Init+0x3984>)
 8005670:	2201      	movs	r2, #1
 8005672:	60da      	str	r2, [r3, #12]
 8005674:	4b7c      	ldr	r3, [pc, #496]	; (8005868 <LCD_Init+0x3980>)
 8005676:	2280      	movs	r2, #128	; 0x80
 8005678:	615a      	str	r2, [r3, #20]
 800567a:	4b7b      	ldr	r3, [pc, #492]	; (8005868 <LCD_Init+0x3980>)
 800567c:	2280      	movs	r2, #128	; 0x80
 800567e:	611a      	str	r2, [r3, #16]
 8005680:	4b79      	ldr	r3, [pc, #484]	; (8005868 <LCD_Init+0x3980>)
 8005682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005686:	611a      	str	r2, [r3, #16]
        HAL_Delay(10);
 8005688:	200a      	movs	r0, #10
 800568a:	f000 ff03 	bl	8006494 <HAL_Delay>
        LCD_WR_REG(0xE0);		// Start PLL command again
 800568e:	20e0      	movs	r0, #224	; 0xe0
 8005690:	f7fb f934 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8005694:	4b74      	ldr	r3, [pc, #464]	; (8005868 <LCD_Init+0x3980>)
 8005696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800569a:	611a      	str	r2, [r3, #16]
 800569c:	4b72      	ldr	r3, [pc, #456]	; (8005868 <LCD_Init+0x3980>)
 800569e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a2:	615a      	str	r2, [r3, #20]
 80056a4:	4b71      	ldr	r3, [pc, #452]	; (800586c <LCD_Init+0x3984>)
 80056a6:	2203      	movs	r2, #3
 80056a8:	60da      	str	r2, [r3, #12]
 80056aa:	4b6f      	ldr	r3, [pc, #444]	; (8005868 <LCD_Init+0x3980>)
 80056ac:	2280      	movs	r2, #128	; 0x80
 80056ae:	615a      	str	r2, [r3, #20]
 80056b0:	4b6d      	ldr	r3, [pc, #436]	; (8005868 <LCD_Init+0x3980>)
 80056b2:	2280      	movs	r2, #128	; 0x80
 80056b4:	611a      	str	r2, [r3, #16]
 80056b6:	4b6c      	ldr	r3, [pc, #432]	; (8005868 <LCD_Init+0x3980>)
 80056b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056bc:	611a      	str	r2, [r3, #16]
        HAL_Delay(12);
 80056be:	200c      	movs	r0, #12
 80056c0:	f000 fee8 	bl	8006494 <HAL_Delay>
        LCD_WR_REG(0x01);		//杞浣�
 80056c4:	2001      	movs	r0, #1
 80056c6:	f7fb f919 	bl	80008fc <LCD_WR_REG>
        HAL_Delay(10);
 80056ca:	200a      	movs	r0, #10
 80056cc:	f000 fee2 	bl	8006494 <HAL_Delay>

        LCD_WR_REG(0xE6);		//璁剧疆鍍忕礌棰戠巼,33Mhz
 80056d0:	20e6      	movs	r0, #230	; 0xe6
 80056d2:	f7fb f913 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(0x2F);
 80056d6:	4b64      	ldr	r3, [pc, #400]	; (8005868 <LCD_Init+0x3980>)
 80056d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056dc:	611a      	str	r2, [r3, #16]
 80056de:	4b62      	ldr	r3, [pc, #392]	; (8005868 <LCD_Init+0x3980>)
 80056e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e4:	615a      	str	r2, [r3, #20]
 80056e6:	4b61      	ldr	r3, [pc, #388]	; (800586c <LCD_Init+0x3984>)
 80056e8:	222f      	movs	r2, #47	; 0x2f
 80056ea:	60da      	str	r2, [r3, #12]
 80056ec:	4b5e      	ldr	r3, [pc, #376]	; (8005868 <LCD_Init+0x3980>)
 80056ee:	2280      	movs	r2, #128	; 0x80
 80056f0:	615a      	str	r2, [r3, #20]
 80056f2:	4b5d      	ldr	r3, [pc, #372]	; (8005868 <LCD_Init+0x3980>)
 80056f4:	2280      	movs	r2, #128	; 0x80
 80056f6:	611a      	str	r2, [r3, #16]
 80056f8:	4b5b      	ldr	r3, [pc, #364]	; (8005868 <LCD_Init+0x3980>)
 80056fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fe:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0xFF);
 8005700:	4b59      	ldr	r3, [pc, #356]	; (8005868 <LCD_Init+0x3980>)
 8005702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005706:	611a      	str	r2, [r3, #16]
 8005708:	4b57      	ldr	r3, [pc, #348]	; (8005868 <LCD_Init+0x3980>)
 800570a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800570e:	615a      	str	r2, [r3, #20]
 8005710:	4b56      	ldr	r3, [pc, #344]	; (800586c <LCD_Init+0x3984>)
 8005712:	22ff      	movs	r2, #255	; 0xff
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	4b54      	ldr	r3, [pc, #336]	; (8005868 <LCD_Init+0x3980>)
 8005718:	2280      	movs	r2, #128	; 0x80
 800571a:	615a      	str	r2, [r3, #20]
 800571c:	4b52      	ldr	r3, [pc, #328]	; (8005868 <LCD_Init+0x3980>)
 800571e:	2280      	movs	r2, #128	; 0x80
 8005720:	611a      	str	r2, [r3, #16]
 8005722:	4b51      	ldr	r3, [pc, #324]	; (8005868 <LCD_Init+0x3980>)
 8005724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005728:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0xFF);
 800572a:	4b4f      	ldr	r3, [pc, #316]	; (8005868 <LCD_Init+0x3980>)
 800572c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005730:	611a      	str	r2, [r3, #16]
 8005732:	4b4d      	ldr	r3, [pc, #308]	; (8005868 <LCD_Init+0x3980>)
 8005734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005738:	615a      	str	r2, [r3, #20]
 800573a:	4b4c      	ldr	r3, [pc, #304]	; (800586c <LCD_Init+0x3984>)
 800573c:	22ff      	movs	r2, #255	; 0xff
 800573e:	60da      	str	r2, [r3, #12]
 8005740:	4b49      	ldr	r3, [pc, #292]	; (8005868 <LCD_Init+0x3980>)
 8005742:	2280      	movs	r2, #128	; 0x80
 8005744:	615a      	str	r2, [r3, #20]
 8005746:	4b48      	ldr	r3, [pc, #288]	; (8005868 <LCD_Init+0x3980>)
 8005748:	2280      	movs	r2, #128	; 0x80
 800574a:	611a      	str	r2, [r3, #16]
 800574c:	4b46      	ldr	r3, [pc, #280]	; (8005868 <LCD_Init+0x3980>)
 800574e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005752:	611a      	str	r2, [r3, #16]

        LCD_WR_REG(0xB0);		//璁剧疆LCD妯″紡
 8005754:	20b0      	movs	r0, #176	; 0xb0
 8005756:	f7fb f8d1 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(0x20);		//24浣嶆ā寮�
 800575a:	4b43      	ldr	r3, [pc, #268]	; (8005868 <LCD_Init+0x3980>)
 800575c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005760:	611a      	str	r2, [r3, #16]
 8005762:	4b41      	ldr	r3, [pc, #260]	; (8005868 <LCD_Init+0x3980>)
 8005764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005768:	615a      	str	r2, [r3, #20]
 800576a:	4b40      	ldr	r3, [pc, #256]	; (800586c <LCD_Init+0x3984>)
 800576c:	2220      	movs	r2, #32
 800576e:	60da      	str	r2, [r3, #12]
 8005770:	4b3d      	ldr	r3, [pc, #244]	; (8005868 <LCD_Init+0x3980>)
 8005772:	2280      	movs	r2, #128	; 0x80
 8005774:	615a      	str	r2, [r3, #20]
 8005776:	4b3c      	ldr	r3, [pc, #240]	; (8005868 <LCD_Init+0x3980>)
 8005778:	2280      	movs	r2, #128	; 0x80
 800577a:	611a      	str	r2, [r3, #16]
 800577c:	4b3a      	ldr	r3, [pc, #232]	; (8005868 <LCD_Init+0x3980>)
 800577e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005782:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x00);		//TFT 妯″紡
 8005784:	4b38      	ldr	r3, [pc, #224]	; (8005868 <LCD_Init+0x3980>)
 8005786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800578a:	611a      	str	r2, [r3, #16]
 800578c:	4b36      	ldr	r3, [pc, #216]	; (8005868 <LCD_Init+0x3980>)
 800578e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005792:	615a      	str	r2, [r3, #20]
 8005794:	4b35      	ldr	r3, [pc, #212]	; (800586c <LCD_Init+0x3984>)
 8005796:	2200      	movs	r2, #0
 8005798:	60da      	str	r2, [r3, #12]
 800579a:	4b33      	ldr	r3, [pc, #204]	; (8005868 <LCD_Init+0x3980>)
 800579c:	2280      	movs	r2, #128	; 0x80
 800579e:	615a      	str	r2, [r3, #20]
 80057a0:	4b31      	ldr	r3, [pc, #196]	; (8005868 <LCD_Init+0x3980>)
 80057a2:	2280      	movs	r2, #128	; 0x80
 80057a4:	611a      	str	r2, [r3, #16]
 80057a6:	4b30      	ldr	r3, [pc, #192]	; (8005868 <LCD_Init+0x3980>)
 80057a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ac:	611a      	str	r2, [r3, #16]

        LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//璁剧疆LCD姘村钩鍍忕礌
 80057ae:	4b2e      	ldr	r3, [pc, #184]	; (8005868 <LCD_Init+0x3980>)
 80057b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057b4:	611a      	str	r2, [r3, #16]
 80057b6:	4b2c      	ldr	r3, [pc, #176]	; (8005868 <LCD_Init+0x3980>)
 80057b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057bc:	615a      	str	r2, [r3, #20]
 80057be:	4b2b      	ldr	r3, [pc, #172]	; (800586c <LCD_Init+0x3984>)
 80057c0:	2203      	movs	r2, #3
 80057c2:	60da      	str	r2, [r3, #12]
 80057c4:	4b28      	ldr	r3, [pc, #160]	; (8005868 <LCD_Init+0x3980>)
 80057c6:	2280      	movs	r2, #128	; 0x80
 80057c8:	615a      	str	r2, [r3, #20]
 80057ca:	4b27      	ldr	r3, [pc, #156]	; (8005868 <LCD_Init+0x3980>)
 80057cc:	2280      	movs	r2, #128	; 0x80
 80057ce:	611a      	str	r2, [r3, #16]
 80057d0:	4b25      	ldr	r3, [pc, #148]	; (8005868 <LCD_Init+0x3980>)
 80057d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d6:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80057d8:	4b23      	ldr	r3, [pc, #140]	; (8005868 <LCD_Init+0x3980>)
 80057da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057de:	611a      	str	r2, [r3, #16]
 80057e0:	4b21      	ldr	r3, [pc, #132]	; (8005868 <LCD_Init+0x3980>)
 80057e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e6:	615a      	str	r2, [r3, #20]
 80057e8:	4b20      	ldr	r3, [pc, #128]	; (800586c <LCD_Init+0x3984>)
 80057ea:	f240 321f 	movw	r2, #799	; 0x31f
 80057ee:	60da      	str	r2, [r3, #12]
 80057f0:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <LCD_Init+0x3980>)
 80057f2:	2280      	movs	r2, #128	; 0x80
 80057f4:	615a      	str	r2, [r3, #20]
 80057f6:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <LCD_Init+0x3980>)
 80057f8:	2280      	movs	r2, #128	; 0x80
 80057fa:	611a      	str	r2, [r3, #16]
 80057fc:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <LCD_Init+0x3980>)
 80057fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005802:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//璁剧疆LCD鍨傜洿鍍忕礌
 8005804:	4b18      	ldr	r3, [pc, #96]	; (8005868 <LCD_Init+0x3980>)
 8005806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800580a:	611a      	str	r2, [r3, #16]
 800580c:	4b16      	ldr	r3, [pc, #88]	; (8005868 <LCD_Init+0x3980>)
 800580e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005812:	615a      	str	r2, [r3, #20]
 8005814:	4b15      	ldr	r3, [pc, #84]	; (800586c <LCD_Init+0x3984>)
 8005816:	2201      	movs	r2, #1
 8005818:	60da      	str	r2, [r3, #12]
 800581a:	4b13      	ldr	r3, [pc, #76]	; (8005868 <LCD_Init+0x3980>)
 800581c:	2280      	movs	r2, #128	; 0x80
 800581e:	615a      	str	r2, [r3, #20]
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <LCD_Init+0x3980>)
 8005822:	2280      	movs	r2, #128	; 0x80
 8005824:	611a      	str	r2, [r3, #16]
 8005826:	4b10      	ldr	r3, [pc, #64]	; (8005868 <LCD_Init+0x3980>)
 8005828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582c:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 800582e:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <LCD_Init+0x3980>)
 8005830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005834:	611a      	str	r2, [r3, #16]
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <LCD_Init+0x3980>)
 8005838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583c:	615a      	str	r2, [r3, #20]
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <LCD_Init+0x3984>)
 8005840:	f240 12df 	movw	r2, #479	; 0x1df
 8005844:	60da      	str	r2, [r3, #12]
 8005846:	4b08      	ldr	r3, [pc, #32]	; (8005868 <LCD_Init+0x3980>)
 8005848:	2280      	movs	r2, #128	; 0x80
 800584a:	615a      	str	r2, [r3, #20]
 800584c:	4b06      	ldr	r3, [pc, #24]	; (8005868 <LCD_Init+0x3980>)
 800584e:	2280      	movs	r2, #128	; 0x80
 8005850:	611a      	str	r2, [r3, #16]
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <LCD_Init+0x3980>)
 8005854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005858:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x00);		//RGB搴忓垪
 800585a:	4b03      	ldr	r3, [pc, #12]	; (8005868 <LCD_Init+0x3980>)
 800585c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005860:	e006      	b.n	8005870 <LCD_Init+0x3988>
 8005862:	bf00      	nop
 8005864:	20000030 	.word	0x20000030
 8005868:	40011000 	.word	0x40011000
 800586c:	40010c00 	.word	0x40010c00
 8005870:	611a      	str	r2, [r3, #16]
 8005872:	4ba3      	ldr	r3, [pc, #652]	; (8005b00 <LCD_Init+0x3c18>)
 8005874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005878:	615a      	str	r2, [r3, #20]
 800587a:	4ba2      	ldr	r3, [pc, #648]	; (8005b04 <LCD_Init+0x3c1c>)
 800587c:	2200      	movs	r2, #0
 800587e:	60da      	str	r2, [r3, #12]
 8005880:	4b9f      	ldr	r3, [pc, #636]	; (8005b00 <LCD_Init+0x3c18>)
 8005882:	2280      	movs	r2, #128	; 0x80
 8005884:	615a      	str	r2, [r3, #20]
 8005886:	4b9e      	ldr	r3, [pc, #632]	; (8005b00 <LCD_Init+0x3c18>)
 8005888:	2280      	movs	r2, #128	; 0x80
 800588a:	611a      	str	r2, [r3, #16]
 800588c:	4b9c      	ldr	r3, [pc, #624]	; (8005b00 <LCD_Init+0x3c18>)
 800588e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005892:	611a      	str	r2, [r3, #16]

        LCD_WR_REG(0xB4);		//Set horizontal period
 8005894:	20b4      	movs	r0, #180	; 0xb4
 8005896:	f7fb f831 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA((SSD_HT-1)>>8);
 800589a:	4b99      	ldr	r3, [pc, #612]	; (8005b00 <LCD_Init+0x3c18>)
 800589c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058a0:	611a      	str	r2, [r3, #16]
 80058a2:	4b97      	ldr	r3, [pc, #604]	; (8005b00 <LCD_Init+0x3c18>)
 80058a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a8:	615a      	str	r2, [r3, #20]
 80058aa:	4b96      	ldr	r3, [pc, #600]	; (8005b04 <LCD_Init+0x3c1c>)
 80058ac:	2204      	movs	r2, #4
 80058ae:	60da      	str	r2, [r3, #12]
 80058b0:	4b93      	ldr	r3, [pc, #588]	; (8005b00 <LCD_Init+0x3c18>)
 80058b2:	2280      	movs	r2, #128	; 0x80
 80058b4:	615a      	str	r2, [r3, #20]
 80058b6:	4b92      	ldr	r3, [pc, #584]	; (8005b00 <LCD_Init+0x3c18>)
 80058b8:	2280      	movs	r2, #128	; 0x80
 80058ba:	611a      	str	r2, [r3, #16]
 80058bc:	4b90      	ldr	r3, [pc, #576]	; (8005b00 <LCD_Init+0x3c18>)
 80058be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c2:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(SSD_HT-1);
 80058c4:	4b8e      	ldr	r3, [pc, #568]	; (8005b00 <LCD_Init+0x3c18>)
 80058c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ca:	611a      	str	r2, [r3, #16]
 80058cc:	4b8c      	ldr	r3, [pc, #560]	; (8005b00 <LCD_Init+0x3c18>)
 80058ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d2:	615a      	str	r2, [r3, #20]
 80058d4:	4b8b      	ldr	r3, [pc, #556]	; (8005b04 <LCD_Init+0x3c1c>)
 80058d6:	f240 421f 	movw	r2, #1055	; 0x41f
 80058da:	60da      	str	r2, [r3, #12]
 80058dc:	4b88      	ldr	r3, [pc, #544]	; (8005b00 <LCD_Init+0x3c18>)
 80058de:	2280      	movs	r2, #128	; 0x80
 80058e0:	615a      	str	r2, [r3, #20]
 80058e2:	4b87      	ldr	r3, [pc, #540]	; (8005b00 <LCD_Init+0x3c18>)
 80058e4:	2280      	movs	r2, #128	; 0x80
 80058e6:	611a      	str	r2, [r3, #16]
 80058e8:	4b85      	ldr	r3, [pc, #532]	; (8005b00 <LCD_Init+0x3c18>)
 80058ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ee:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(SSD_HPS>>8);
 80058f0:	4b83      	ldr	r3, [pc, #524]	; (8005b00 <LCD_Init+0x3c18>)
 80058f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058f6:	611a      	str	r2, [r3, #16]
 80058f8:	4b81      	ldr	r3, [pc, #516]	; (8005b00 <LCD_Init+0x3c18>)
 80058fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058fe:	615a      	str	r2, [r3, #20]
 8005900:	4b80      	ldr	r3, [pc, #512]	; (8005b04 <LCD_Init+0x3c1c>)
 8005902:	2200      	movs	r2, #0
 8005904:	60da      	str	r2, [r3, #12]
 8005906:	4b7e      	ldr	r3, [pc, #504]	; (8005b00 <LCD_Init+0x3c18>)
 8005908:	2280      	movs	r2, #128	; 0x80
 800590a:	615a      	str	r2, [r3, #20]
 800590c:	4b7c      	ldr	r3, [pc, #496]	; (8005b00 <LCD_Init+0x3c18>)
 800590e:	2280      	movs	r2, #128	; 0x80
 8005910:	611a      	str	r2, [r3, #16]
 8005912:	4b7b      	ldr	r3, [pc, #492]	; (8005b00 <LCD_Init+0x3c18>)
 8005914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005918:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(SSD_HPS);
 800591a:	4b79      	ldr	r3, [pc, #484]	; (8005b00 <LCD_Init+0x3c18>)
 800591c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005920:	611a      	str	r2, [r3, #16]
 8005922:	4b77      	ldr	r3, [pc, #476]	; (8005b00 <LCD_Init+0x3c18>)
 8005924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005928:	615a      	str	r2, [r3, #20]
 800592a:	4b76      	ldr	r3, [pc, #472]	; (8005b04 <LCD_Init+0x3c1c>)
 800592c:	222e      	movs	r2, #46	; 0x2e
 800592e:	60da      	str	r2, [r3, #12]
 8005930:	4b73      	ldr	r3, [pc, #460]	; (8005b00 <LCD_Init+0x3c18>)
 8005932:	2280      	movs	r2, #128	; 0x80
 8005934:	615a      	str	r2, [r3, #20]
 8005936:	4b72      	ldr	r3, [pc, #456]	; (8005b00 <LCD_Init+0x3c18>)
 8005938:	2280      	movs	r2, #128	; 0x80
 800593a:	611a      	str	r2, [r3, #16]
 800593c:	4b70      	ldr	r3, [pc, #448]	; (8005b00 <LCD_Init+0x3c18>)
 800593e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005942:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005944:	4b6e      	ldr	r3, [pc, #440]	; (8005b00 <LCD_Init+0x3c18>)
 8005946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800594a:	611a      	str	r2, [r3, #16]
 800594c:	4b6c      	ldr	r3, [pc, #432]	; (8005b00 <LCD_Init+0x3c18>)
 800594e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005952:	615a      	str	r2, [r3, #20]
 8005954:	4b6b      	ldr	r3, [pc, #428]	; (8005b04 <LCD_Init+0x3c1c>)
 8005956:	2200      	movs	r2, #0
 8005958:	60da      	str	r2, [r3, #12]
 800595a:	4b69      	ldr	r3, [pc, #420]	; (8005b00 <LCD_Init+0x3c18>)
 800595c:	2280      	movs	r2, #128	; 0x80
 800595e:	615a      	str	r2, [r3, #20]
 8005960:	4b67      	ldr	r3, [pc, #412]	; (8005b00 <LCD_Init+0x3c18>)
 8005962:	2280      	movs	r2, #128	; 0x80
 8005964:	611a      	str	r2, [r3, #16]
 8005966:	4b66      	ldr	r3, [pc, #408]	; (8005b00 <LCD_Init+0x3c18>)
 8005968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800596c:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x00);
 800596e:	4b64      	ldr	r3, [pc, #400]	; (8005b00 <LCD_Init+0x3c18>)
 8005970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005974:	611a      	str	r2, [r3, #16]
 8005976:	4b62      	ldr	r3, [pc, #392]	; (8005b00 <LCD_Init+0x3c18>)
 8005978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597c:	615a      	str	r2, [r3, #20]
 800597e:	4b61      	ldr	r3, [pc, #388]	; (8005b04 <LCD_Init+0x3c1c>)
 8005980:	2200      	movs	r2, #0
 8005982:	60da      	str	r2, [r3, #12]
 8005984:	4b5e      	ldr	r3, [pc, #376]	; (8005b00 <LCD_Init+0x3c18>)
 8005986:	2280      	movs	r2, #128	; 0x80
 8005988:	615a      	str	r2, [r3, #20]
 800598a:	4b5d      	ldr	r3, [pc, #372]	; (8005b00 <LCD_Init+0x3c18>)
 800598c:	2280      	movs	r2, #128	; 0x80
 800598e:	611a      	str	r2, [r3, #16]
 8005990:	4b5b      	ldr	r3, [pc, #364]	; (8005b00 <LCD_Init+0x3c18>)
 8005992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005996:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x00);
 8005998:	4b59      	ldr	r3, [pc, #356]	; (8005b00 <LCD_Init+0x3c18>)
 800599a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800599e:	611a      	str	r2, [r3, #16]
 80059a0:	4b57      	ldr	r3, [pc, #348]	; (8005b00 <LCD_Init+0x3c18>)
 80059a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a6:	615a      	str	r2, [r3, #20]
 80059a8:	4b56      	ldr	r3, [pc, #344]	; (8005b04 <LCD_Init+0x3c1c>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	60da      	str	r2, [r3, #12]
 80059ae:	4b54      	ldr	r3, [pc, #336]	; (8005b00 <LCD_Init+0x3c18>)
 80059b0:	2280      	movs	r2, #128	; 0x80
 80059b2:	615a      	str	r2, [r3, #20]
 80059b4:	4b52      	ldr	r3, [pc, #328]	; (8005b00 <LCD_Init+0x3c18>)
 80059b6:	2280      	movs	r2, #128	; 0x80
 80059b8:	611a      	str	r2, [r3, #16]
 80059ba:	4b51      	ldr	r3, [pc, #324]	; (8005b00 <LCD_Init+0x3c18>)
 80059bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c0:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x00);
 80059c2:	4b4f      	ldr	r3, [pc, #316]	; (8005b00 <LCD_Init+0x3c18>)
 80059c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c8:	611a      	str	r2, [r3, #16]
 80059ca:	4b4d      	ldr	r3, [pc, #308]	; (8005b00 <LCD_Init+0x3c18>)
 80059cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d0:	615a      	str	r2, [r3, #20]
 80059d2:	4b4c      	ldr	r3, [pc, #304]	; (8005b04 <LCD_Init+0x3c1c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	60da      	str	r2, [r3, #12]
 80059d8:	4b49      	ldr	r3, [pc, #292]	; (8005b00 <LCD_Init+0x3c18>)
 80059da:	2280      	movs	r2, #128	; 0x80
 80059dc:	615a      	str	r2, [r3, #20]
 80059de:	4b48      	ldr	r3, [pc, #288]	; (8005b00 <LCD_Init+0x3c18>)
 80059e0:	2280      	movs	r2, #128	; 0x80
 80059e2:	611a      	str	r2, [r3, #16]
 80059e4:	4b46      	ldr	r3, [pc, #280]	; (8005b00 <LCD_Init+0x3c18>)
 80059e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ea:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(0xB6);		//Set vertical period
 80059ec:	20b6      	movs	r0, #182	; 0xb6
 80059ee:	f7fa ff85 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA((SSD_VT-1)>>8);
 80059f2:	4b43      	ldr	r3, [pc, #268]	; (8005b00 <LCD_Init+0x3c18>)
 80059f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059f8:	611a      	str	r2, [r3, #16]
 80059fa:	4b41      	ldr	r3, [pc, #260]	; (8005b00 <LCD_Init+0x3c18>)
 80059fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a00:	615a      	str	r2, [r3, #20]
 8005a02:	4b40      	ldr	r3, [pc, #256]	; (8005b04 <LCD_Init+0x3c1c>)
 8005a04:	2202      	movs	r2, #2
 8005a06:	60da      	str	r2, [r3, #12]
 8005a08:	4b3d      	ldr	r3, [pc, #244]	; (8005b00 <LCD_Init+0x3c18>)
 8005a0a:	2280      	movs	r2, #128	; 0x80
 8005a0c:	615a      	str	r2, [r3, #20]
 8005a0e:	4b3c      	ldr	r3, [pc, #240]	; (8005b00 <LCD_Init+0x3c18>)
 8005a10:	2280      	movs	r2, #128	; 0x80
 8005a12:	611a      	str	r2, [r3, #16]
 8005a14:	4b3a      	ldr	r3, [pc, #232]	; (8005b00 <LCD_Init+0x3c18>)
 8005a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1a:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(SSD_VT-1);
 8005a1c:	4b38      	ldr	r3, [pc, #224]	; (8005b00 <LCD_Init+0x3c18>)
 8005a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a22:	611a      	str	r2, [r3, #16]
 8005a24:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <LCD_Init+0x3c18>)
 8005a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a2a:	615a      	str	r2, [r3, #20]
 8005a2c:	4b35      	ldr	r3, [pc, #212]	; (8005b04 <LCD_Init+0x3c1c>)
 8005a2e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	4b32      	ldr	r3, [pc, #200]	; (8005b00 <LCD_Init+0x3c18>)
 8005a36:	2280      	movs	r2, #128	; 0x80
 8005a38:	615a      	str	r2, [r3, #20]
 8005a3a:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <LCD_Init+0x3c18>)
 8005a3c:	2280      	movs	r2, #128	; 0x80
 8005a3e:	611a      	str	r2, [r3, #16]
 8005a40:	4b2f      	ldr	r3, [pc, #188]	; (8005b00 <LCD_Init+0x3c18>)
 8005a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a46:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(SSD_VPS>>8);
 8005a48:	4b2d      	ldr	r3, [pc, #180]	; (8005b00 <LCD_Init+0x3c18>)
 8005a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a4e:	611a      	str	r2, [r3, #16]
 8005a50:	4b2b      	ldr	r3, [pc, #172]	; (8005b00 <LCD_Init+0x3c18>)
 8005a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a56:	615a      	str	r2, [r3, #20]
 8005a58:	4b2a      	ldr	r3, [pc, #168]	; (8005b04 <LCD_Init+0x3c1c>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	60da      	str	r2, [r3, #12]
 8005a5e:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <LCD_Init+0x3c18>)
 8005a60:	2280      	movs	r2, #128	; 0x80
 8005a62:	615a      	str	r2, [r3, #20]
 8005a64:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <LCD_Init+0x3c18>)
 8005a66:	2280      	movs	r2, #128	; 0x80
 8005a68:	611a      	str	r2, [r3, #16]
 8005a6a:	4b25      	ldr	r3, [pc, #148]	; (8005b00 <LCD_Init+0x3c18>)
 8005a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a70:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(SSD_VPS);
 8005a72:	4b23      	ldr	r3, [pc, #140]	; (8005b00 <LCD_Init+0x3c18>)
 8005a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a78:	611a      	str	r2, [r3, #16]
 8005a7a:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <LCD_Init+0x3c18>)
 8005a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a80:	615a      	str	r2, [r3, #20]
 8005a82:	4b20      	ldr	r3, [pc, #128]	; (8005b04 <LCD_Init+0x3c1c>)
 8005a84:	2217      	movs	r2, #23
 8005a86:	60da      	str	r2, [r3, #12]
 8005a88:	4b1d      	ldr	r3, [pc, #116]	; (8005b00 <LCD_Init+0x3c18>)
 8005a8a:	2280      	movs	r2, #128	; 0x80
 8005a8c:	615a      	str	r2, [r3, #20]
 8005a8e:	4b1c      	ldr	r3, [pc, #112]	; (8005b00 <LCD_Init+0x3c18>)
 8005a90:	2280      	movs	r2, #128	; 0x80
 8005a92:	611a      	str	r2, [r3, #16]
 8005a94:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <LCD_Init+0x3c18>)
 8005a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a9a:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005a9c:	4b18      	ldr	r3, [pc, #96]	; (8005b00 <LCD_Init+0x3c18>)
 8005a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aa2:	611a      	str	r2, [r3, #16]
 8005aa4:	4b16      	ldr	r3, [pc, #88]	; (8005b00 <LCD_Init+0x3c18>)
 8005aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aaa:	615a      	str	r2, [r3, #20]
 8005aac:	4b15      	ldr	r3, [pc, #84]	; (8005b04 <LCD_Init+0x3c1c>)
 8005aae:	2215      	movs	r2, #21
 8005ab0:	60da      	str	r2, [r3, #12]
 8005ab2:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <LCD_Init+0x3c18>)
 8005ab4:	2280      	movs	r2, #128	; 0x80
 8005ab6:	615a      	str	r2, [r3, #20]
 8005ab8:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <LCD_Init+0x3c18>)
 8005aba:	2280      	movs	r2, #128	; 0x80
 8005abc:	611a      	str	r2, [r3, #16]
 8005abe:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <LCD_Init+0x3c18>)
 8005ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac4:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x00);
 8005ac6:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <LCD_Init+0x3c18>)
 8005ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005acc:	611a      	str	r2, [r3, #16]
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <LCD_Init+0x3c18>)
 8005ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad4:	615a      	str	r2, [r3, #20]
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <LCD_Init+0x3c1c>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	60da      	str	r2, [r3, #12]
 8005adc:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <LCD_Init+0x3c18>)
 8005ade:	2280      	movs	r2, #128	; 0x80
 8005ae0:	615a      	str	r2, [r3, #20]
 8005ae2:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <LCD_Init+0x3c18>)
 8005ae4:	2280      	movs	r2, #128	; 0x80
 8005ae6:	611a      	str	r2, [r3, #16]
 8005ae8:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <LCD_Init+0x3c18>)
 8005aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aee:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x00);
 8005af0:	4b03      	ldr	r3, [pc, #12]	; (8005b00 <LCD_Init+0x3c18>)
 8005af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005af6:	611a      	str	r2, [r3, #16]
 8005af8:	4b01      	ldr	r3, [pc, #4]	; (8005b00 <LCD_Init+0x3c18>)
 8005afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005afe:	e003      	b.n	8005b08 <LCD_Init+0x3c20>
 8005b00:	40011000 	.word	0x40011000
 8005b04:	40010c00 	.word	0x40010c00
 8005b08:	615a      	str	r2, [r3, #20]
 8005b0a:	4b8b      	ldr	r3, [pc, #556]	; (8005d38 <LCD_Init+0x3e50>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	60da      	str	r2, [r3, #12]
 8005b10:	4b8a      	ldr	r3, [pc, #552]	; (8005d3c <LCD_Init+0x3e54>)
 8005b12:	2280      	movs	r2, #128	; 0x80
 8005b14:	615a      	str	r2, [r3, #20]
 8005b16:	4b89      	ldr	r3, [pc, #548]	; (8005d3c <LCD_Init+0x3e54>)
 8005b18:	2280      	movs	r2, #128	; 0x80
 8005b1a:	611a      	str	r2, [r3, #16]
 8005b1c:	4b87      	ldr	r3, [pc, #540]	; (8005d3c <LCD_Init+0x3e54>)
 8005b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b22:	611a      	str	r2, [r3, #16]

        LCD_WR_REG(0xF0);	//璁剧疆SSD1963涓嶤PU鎺ュ彛涓�16bit
 8005b24:	20f0      	movs	r0, #240	; 0xf0
 8005b26:	f7fa fee9 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8005b2a:	4b84      	ldr	r3, [pc, #528]	; (8005d3c <LCD_Init+0x3e54>)
 8005b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b30:	611a      	str	r2, [r3, #16]
 8005b32:	4b82      	ldr	r3, [pc, #520]	; (8005d3c <LCD_Init+0x3e54>)
 8005b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b38:	615a      	str	r2, [r3, #20]
 8005b3a:	4b7f      	ldr	r3, [pc, #508]	; (8005d38 <LCD_Init+0x3e50>)
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	60da      	str	r2, [r3, #12]
 8005b40:	4b7e      	ldr	r3, [pc, #504]	; (8005d3c <LCD_Init+0x3e54>)
 8005b42:	2280      	movs	r2, #128	; 0x80
 8005b44:	615a      	str	r2, [r3, #20]
 8005b46:	4b7d      	ldr	r3, [pc, #500]	; (8005d3c <LCD_Init+0x3e54>)
 8005b48:	2280      	movs	r2, #128	; 0x80
 8005b4a:	611a      	str	r2, [r3, #16]
 8005b4c:	4b7b      	ldr	r3, [pc, #492]	; (8005d3c <LCD_Init+0x3e54>)
 8005b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b52:	611a      	str	r2, [r3, #16]

        LCD_WR_REG(0x29);	//寮€鍚樉绀�
 8005b54:	2029      	movs	r0, #41	; 0x29
 8005b56:	f7fa fed1 	bl	80008fc <LCD_WR_REG>
        //璁剧疆PWM杈撳嚭  鑳屽厜閫氳繃鍗犵┖姣斿彲璋�
        LCD_WR_REG(0xD0);	//璁剧疆鑷姩鐧藉钩琛BC
 8005b5a:	20d0      	movs	r0, #208	; 0xd0
 8005b5c:	f7fa fece 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(0x00);	//disable
 8005b60:	4b76      	ldr	r3, [pc, #472]	; (8005d3c <LCD_Init+0x3e54>)
 8005b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b66:	611a      	str	r2, [r3, #16]
 8005b68:	4b74      	ldr	r3, [pc, #464]	; (8005d3c <LCD_Init+0x3e54>)
 8005b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b6e:	615a      	str	r2, [r3, #20]
 8005b70:	4b71      	ldr	r3, [pc, #452]	; (8005d38 <LCD_Init+0x3e50>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	60da      	str	r2, [r3, #12]
 8005b76:	4b71      	ldr	r3, [pc, #452]	; (8005d3c <LCD_Init+0x3e54>)
 8005b78:	2280      	movs	r2, #128	; 0x80
 8005b7a:	615a      	str	r2, [r3, #20]
 8005b7c:	4b6f      	ldr	r3, [pc, #444]	; (8005d3c <LCD_Init+0x3e54>)
 8005b7e:	2280      	movs	r2, #128	; 0x80
 8005b80:	611a      	str	r2, [r3, #16]
 8005b82:	4b6e      	ldr	r3, [pc, #440]	; (8005d3c <LCD_Init+0x3e54>)
 8005b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b88:	611a      	str	r2, [r3, #16]

        LCD_WR_REG(0xBE);	//閰嶇疆PWM杈撳嚭
 8005b8a:	20be      	movs	r0, #190	; 0xbe
 8005b8c:	f7fa feb6 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(0x05);	//1璁剧疆PWM棰戠巼
 8005b90:	4b6a      	ldr	r3, [pc, #424]	; (8005d3c <LCD_Init+0x3e54>)
 8005b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b96:	611a      	str	r2, [r3, #16]
 8005b98:	4b68      	ldr	r3, [pc, #416]	; (8005d3c <LCD_Init+0x3e54>)
 8005b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b9e:	615a      	str	r2, [r3, #20]
 8005ba0:	4b65      	ldr	r3, [pc, #404]	; (8005d38 <LCD_Init+0x3e50>)
 8005ba2:	2205      	movs	r2, #5
 8005ba4:	60da      	str	r2, [r3, #12]
 8005ba6:	4b65      	ldr	r3, [pc, #404]	; (8005d3c <LCD_Init+0x3e54>)
 8005ba8:	2280      	movs	r2, #128	; 0x80
 8005baa:	615a      	str	r2, [r3, #20]
 8005bac:	4b63      	ldr	r3, [pc, #396]	; (8005d3c <LCD_Init+0x3e54>)
 8005bae:	2280      	movs	r2, #128	; 0x80
 8005bb0:	611a      	str	r2, [r3, #16]
 8005bb2:	4b62      	ldr	r3, [pc, #392]	; (8005d3c <LCD_Init+0x3e54>)
 8005bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb8:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0xFE);	//2璁剧疆PWM鍗犵┖姣�
 8005bba:	4b60      	ldr	r3, [pc, #384]	; (8005d3c <LCD_Init+0x3e54>)
 8005bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bc0:	611a      	str	r2, [r3, #16]
 8005bc2:	4b5e      	ldr	r3, [pc, #376]	; (8005d3c <LCD_Init+0x3e54>)
 8005bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc8:	615a      	str	r2, [r3, #20]
 8005bca:	4b5b      	ldr	r3, [pc, #364]	; (8005d38 <LCD_Init+0x3e50>)
 8005bcc:	22fe      	movs	r2, #254	; 0xfe
 8005bce:	60da      	str	r2, [r3, #12]
 8005bd0:	4b5a      	ldr	r3, [pc, #360]	; (8005d3c <LCD_Init+0x3e54>)
 8005bd2:	2280      	movs	r2, #128	; 0x80
 8005bd4:	615a      	str	r2, [r3, #20]
 8005bd6:	4b59      	ldr	r3, [pc, #356]	; (8005d3c <LCD_Init+0x3e54>)
 8005bd8:	2280      	movs	r2, #128	; 0x80
 8005bda:	611a      	str	r2, [r3, #16]
 8005bdc:	4b57      	ldr	r3, [pc, #348]	; (8005d3c <LCD_Init+0x3e54>)
 8005bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be2:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x01);	//3璁剧疆C
 8005be4:	4b55      	ldr	r3, [pc, #340]	; (8005d3c <LCD_Init+0x3e54>)
 8005be6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bea:	611a      	str	r2, [r3, #16]
 8005bec:	4b53      	ldr	r3, [pc, #332]	; (8005d3c <LCD_Init+0x3e54>)
 8005bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf2:	615a      	str	r2, [r3, #20]
 8005bf4:	4b50      	ldr	r3, [pc, #320]	; (8005d38 <LCD_Init+0x3e50>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	4b50      	ldr	r3, [pc, #320]	; (8005d3c <LCD_Init+0x3e54>)
 8005bfc:	2280      	movs	r2, #128	; 0x80
 8005bfe:	615a      	str	r2, [r3, #20]
 8005c00:	4b4e      	ldr	r3, [pc, #312]	; (8005d3c <LCD_Init+0x3e54>)
 8005c02:	2280      	movs	r2, #128	; 0x80
 8005c04:	611a      	str	r2, [r3, #16]
 8005c06:	4b4d      	ldr	r3, [pc, #308]	; (8005d3c <LCD_Init+0x3e54>)
 8005c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c0c:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x00);	//4璁剧疆D
 8005c0e:	4b4b      	ldr	r3, [pc, #300]	; (8005d3c <LCD_Init+0x3e54>)
 8005c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c14:	611a      	str	r2, [r3, #16]
 8005c16:	4b49      	ldr	r3, [pc, #292]	; (8005d3c <LCD_Init+0x3e54>)
 8005c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c1c:	615a      	str	r2, [r3, #20]
 8005c1e:	4b46      	ldr	r3, [pc, #280]	; (8005d38 <LCD_Init+0x3e50>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	60da      	str	r2, [r3, #12]
 8005c24:	4b45      	ldr	r3, [pc, #276]	; (8005d3c <LCD_Init+0x3e54>)
 8005c26:	2280      	movs	r2, #128	; 0x80
 8005c28:	615a      	str	r2, [r3, #20]
 8005c2a:	4b44      	ldr	r3, [pc, #272]	; (8005d3c <LCD_Init+0x3e54>)
 8005c2c:	2280      	movs	r2, #128	; 0x80
 8005c2e:	611a      	str	r2, [r3, #16]
 8005c30:	4b42      	ldr	r3, [pc, #264]	; (8005d3c <LCD_Init+0x3e54>)
 8005c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c36:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x00);	//5璁剧疆E
 8005c38:	4b40      	ldr	r3, [pc, #256]	; (8005d3c <LCD_Init+0x3e54>)
 8005c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c3e:	611a      	str	r2, [r3, #16]
 8005c40:	4b3e      	ldr	r3, [pc, #248]	; (8005d3c <LCD_Init+0x3e54>)
 8005c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c46:	615a      	str	r2, [r3, #20]
 8005c48:	4b3b      	ldr	r3, [pc, #236]	; (8005d38 <LCD_Init+0x3e50>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	60da      	str	r2, [r3, #12]
 8005c4e:	4b3b      	ldr	r3, [pc, #236]	; (8005d3c <LCD_Init+0x3e54>)
 8005c50:	2280      	movs	r2, #128	; 0x80
 8005c52:	615a      	str	r2, [r3, #20]
 8005c54:	4b39      	ldr	r3, [pc, #228]	; (8005d3c <LCD_Init+0x3e54>)
 8005c56:	2280      	movs	r2, #128	; 0x80
 8005c58:	611a      	str	r2, [r3, #16]
 8005c5a:	4b38      	ldr	r3, [pc, #224]	; (8005d3c <LCD_Init+0x3e54>)
 8005c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c60:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x00);	//6璁剧疆F
 8005c62:	4b36      	ldr	r3, [pc, #216]	; (8005d3c <LCD_Init+0x3e54>)
 8005c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c68:	611a      	str	r2, [r3, #16]
 8005c6a:	4b34      	ldr	r3, [pc, #208]	; (8005d3c <LCD_Init+0x3e54>)
 8005c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c70:	615a      	str	r2, [r3, #20]
 8005c72:	4b31      	ldr	r3, [pc, #196]	; (8005d38 <LCD_Init+0x3e50>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	60da      	str	r2, [r3, #12]
 8005c78:	4b30      	ldr	r3, [pc, #192]	; (8005d3c <LCD_Init+0x3e54>)
 8005c7a:	2280      	movs	r2, #128	; 0x80
 8005c7c:	615a      	str	r2, [r3, #20]
 8005c7e:	4b2f      	ldr	r3, [pc, #188]	; (8005d3c <LCD_Init+0x3e54>)
 8005c80:	2280      	movs	r2, #128	; 0x80
 8005c82:	611a      	str	r2, [r3, #16]
 8005c84:	4b2d      	ldr	r3, [pc, #180]	; (8005d3c <LCD_Init+0x3e54>)
 8005c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c8a:	611a      	str	r2, [r3, #16]

        LCD_WR_REG(0xB8);	//璁剧疆GPIO閰嶇疆
 8005c8c:	20b8      	movs	r0, #184	; 0xb8
 8005c8e:	f7fa fe35 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(0x03);	//2涓狪O鍙ｈ缃垚杈撳嚭
 8005c92:	4b2a      	ldr	r3, [pc, #168]	; (8005d3c <LCD_Init+0x3e54>)
 8005c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c98:	611a      	str	r2, [r3, #16]
 8005c9a:	4b28      	ldr	r3, [pc, #160]	; (8005d3c <LCD_Init+0x3e54>)
 8005c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca0:	615a      	str	r2, [r3, #20]
 8005ca2:	4b25      	ldr	r3, [pc, #148]	; (8005d38 <LCD_Init+0x3e50>)
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	60da      	str	r2, [r3, #12]
 8005ca8:	4b24      	ldr	r3, [pc, #144]	; (8005d3c <LCD_Init+0x3e54>)
 8005caa:	2280      	movs	r2, #128	; 0x80
 8005cac:	615a      	str	r2, [r3, #20]
 8005cae:	4b23      	ldr	r3, [pc, #140]	; (8005d3c <LCD_Init+0x3e54>)
 8005cb0:	2280      	movs	r2, #128	; 0x80
 8005cb2:	611a      	str	r2, [r3, #16]
 8005cb4:	4b21      	ldr	r3, [pc, #132]	; (8005d3c <LCD_Init+0x3e54>)
 8005cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cba:	611a      	str	r2, [r3, #16]
        LCD_WR_DATA(0x01);	//GPIO浣跨敤姝ｅ父鐨処O鍔熻兘
 8005cbc:	4b1f      	ldr	r3, [pc, #124]	; (8005d3c <LCD_Init+0x3e54>)
 8005cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cc2:	611a      	str	r2, [r3, #16]
 8005cc4:	4b1d      	ldr	r3, [pc, #116]	; (8005d3c <LCD_Init+0x3e54>)
 8005cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cca:	615a      	str	r2, [r3, #20]
 8005ccc:	4b1a      	ldr	r3, [pc, #104]	; (8005d38 <LCD_Init+0x3e50>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	60da      	str	r2, [r3, #12]
 8005cd2:	4b1a      	ldr	r3, [pc, #104]	; (8005d3c <LCD_Init+0x3e54>)
 8005cd4:	2280      	movs	r2, #128	; 0x80
 8005cd6:	615a      	str	r2, [r3, #20]
 8005cd8:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <LCD_Init+0x3e54>)
 8005cda:	2280      	movs	r2, #128	; 0x80
 8005cdc:	611a      	str	r2, [r3, #16]
 8005cde:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <LCD_Init+0x3e54>)
 8005ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce4:	611a      	str	r2, [r3, #16]
        LCD_WR_REG(0xBA);
 8005ce6:	20ba      	movs	r0, #186	; 0xba
 8005ce8:	f7fa fe08 	bl	80008fc <LCD_WR_REG>
        LCD_WR_DATA(0X01);	//GPIO[1:0]=01,鎺у埗LCD鏂瑰悜
 8005cec:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <LCD_Init+0x3e54>)
 8005cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cf2:	611a      	str	r2, [r3, #16]
 8005cf4:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <LCD_Init+0x3e54>)
 8005cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfa:	615a      	str	r2, [r3, #20]
 8005cfc:	4b0e      	ldr	r3, [pc, #56]	; (8005d38 <LCD_Init+0x3e50>)
 8005cfe:	2201      	movs	r2, #1
 8005d00:	60da      	str	r2, [r3, #12]
 8005d02:	4b0e      	ldr	r3, [pc, #56]	; (8005d3c <LCD_Init+0x3e54>)
 8005d04:	2280      	movs	r2, #128	; 0x80
 8005d06:	615a      	str	r2, [r3, #20]
 8005d08:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <LCD_Init+0x3e54>)
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	611a      	str	r2, [r3, #16]
 8005d0e:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <LCD_Init+0x3e54>)
 8005d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d14:	611a      	str	r2, [r3, #16]

        LCD_SSD_BackLightSet(100);	//鑳屽厜璁剧疆涓烘渶浜�
 8005d16:	2064      	movs	r0, #100	; 0x64
 8005d18:	f7fb ff36 	bl	8001b88 <LCD_SSD_BackLightSet>
    }
    LCD_Display_Dir(0);		 	//榛樿涓虹珫灞�
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	f7fb ffd7 	bl	8001cd0 <LCD_Display_Dir>
    LCD_LED = 1;					//鐐逛寒鑳屽厜
 8005d22:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <LCD_Init+0x3e58>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
    LCD_Clear(WHITE);
 8005d28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005d2c:	f000 f80a 	bl	8005d44 <LCD_Clear>
}
 8005d30:	bf00      	nop
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40010c00 	.word	0x40010c00
 8005d3c:	40011000 	.word	0x40011000
 8005d40:	422201a8 	.word	0x422201a8

08005d44 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
    uint32_t totalpoint = lcddev.width;
 8005d52:	4b2a      	ldr	r3, [pc, #168]	; (8005dfc <LCD_Clear+0xb8>)
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	60bb      	str	r3, [r7, #8]
    totalpoint *= lcddev.height; 			//寰楀埌鎬荤偣鏁�
 8005d58:	4b28      	ldr	r3, [pc, #160]	; (8005dfc <LCD_Clear+0xb8>)
 8005d5a:	885b      	ldrh	r3, [r3, #2]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	fb02 f303 	mul.w	r3, r2, r3
 8005d64:	60bb      	str	r3, [r7, #8]
    if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804妯睆鐨勬椂鍊欑壒娈婂鐞�
 8005d66:	4b25      	ldr	r3, [pc, #148]	; (8005dfc <LCD_Clear+0xb8>)
 8005d68:	889b      	ldrh	r3, [r3, #4]
 8005d6a:	f646 0204 	movw	r2, #26628	; 0x6804
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d11a      	bne.n	8005da8 <LCD_Clear+0x64>
 8005d72:	4b22      	ldr	r3, [pc, #136]	; (8005dfc <LCD_Clear+0xb8>)
 8005d74:	799b      	ldrb	r3, [r3, #6]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d116      	bne.n	8005da8 <LCD_Clear+0x64>
    {
        lcddev.dir = 0;
 8005d7a:	4b20      	ldr	r3, [pc, #128]	; (8005dfc <LCD_Clear+0xb8>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	719a      	strb	r2, [r3, #6]
        lcddev.setxcmd = 0X2A;
 8005d80:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <LCD_Clear+0xb8>)
 8005d82:	222a      	movs	r2, #42	; 0x2a
 8005d84:	815a      	strh	r2, [r3, #10]
        lcddev.setycmd = 0X2B;
 8005d86:	4b1d      	ldr	r3, [pc, #116]	; (8005dfc <LCD_Clear+0xb8>)
 8005d88:	222b      	movs	r2, #43	; 0x2b
 8005d8a:	819a      	strh	r2, [r3, #12]
        LCD_SetCursor(0x00, 0x0000);		//璁剧疆鍏夋爣浣嶇疆
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	2000      	movs	r0, #0
 8005d90:	f7fa fe86 	bl	8000aa0 <LCD_SetCursor>
        lcddev.dir = 1;
 8005d94:	4b19      	ldr	r3, [pc, #100]	; (8005dfc <LCD_Clear+0xb8>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	719a      	strb	r2, [r3, #6]
        lcddev.setxcmd = 0X2B;
 8005d9a:	4b18      	ldr	r3, [pc, #96]	; (8005dfc <LCD_Clear+0xb8>)
 8005d9c:	222b      	movs	r2, #43	; 0x2b
 8005d9e:	815a      	strh	r2, [r3, #10]
        lcddev.setycmd = 0X2A;
 8005da0:	4b16      	ldr	r3, [pc, #88]	; (8005dfc <LCD_Clear+0xb8>)
 8005da2:	222a      	movs	r2, #42	; 0x2a
 8005da4:	819a      	strh	r2, [r3, #12]
 8005da6:	e003      	b.n	8005db0 <LCD_Clear+0x6c>
    } else
        LCD_SetCursor(0x00, 0x0000);	//璁剧疆鍏夋爣浣嶇疆
 8005da8:	2100      	movs	r1, #0
 8005daa:	2000      	movs	r0, #0
 8005dac:	f7fa fe78 	bl	8000aa0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare();     		//寮€濮嬪啓鍏RAM
 8005db0:	f7fa fe6a 	bl	8000a88 <LCD_WriteRAM_Prepare>
    for (index = 0; index < totalpoint; index++)
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	e017      	b.n	8005dea <LCD_Clear+0xa6>
    LCD_WR_DATA(color);
 8005dba:	4b11      	ldr	r3, [pc, #68]	; (8005e00 <LCD_Clear+0xbc>)
 8005dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dc0:	611a      	str	r2, [r3, #16]
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <LCD_Clear+0xbc>)
 8005dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc8:	615a      	str	r2, [r3, #20]
 8005dca:	4a0e      	ldr	r2, [pc, #56]	; (8005e04 <LCD_Clear+0xc0>)
 8005dcc:	88fb      	ldrh	r3, [r7, #6]
 8005dce:	60d3      	str	r3, [r2, #12]
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <LCD_Clear+0xbc>)
 8005dd2:	2280      	movs	r2, #128	; 0x80
 8005dd4:	615a      	str	r2, [r3, #20]
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <LCD_Clear+0xbc>)
 8005dd8:	2280      	movs	r2, #128	; 0x80
 8005dda:	611a      	str	r2, [r3, #16]
 8005ddc:	4b08      	ldr	r3, [pc, #32]	; (8005e00 <LCD_Clear+0xbc>)
 8005dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de2:	611a      	str	r2, [r3, #16]
    for (index = 0; index < totalpoint; index++)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3301      	adds	r3, #1
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d3e3      	bcc.n	8005dba <LCD_Clear+0x76>
}
 8005df2:	bf00      	nop
 8005df4:	bf00      	nop
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000030 	.word	0x20000030
 8005e00:	40011000 	.word	0x40011000
 8005e04:	40010c00 	.word	0x40010c00

08005e08 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
                  uint8_t mode) {
 8005e08:	b590      	push	{r4, r7, lr}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4604      	mov	r4, r0
 8005e10:	4608      	mov	r0, r1
 8005e12:	4611      	mov	r1, r2
 8005e14:	461a      	mov	r2, r3
 8005e16:	4623      	mov	r3, r4
 8005e18:	80fb      	strh	r3, [r7, #6]
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	80bb      	strh	r3, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	70fb      	strb	r3, [r7, #3]
 8005e22:	4613      	mov	r3, r2
 8005e24:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8005e26:	88bb      	ldrh	r3, [r7, #4]
 8005e28:	817b      	strh	r3, [r7, #10]
    uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//寰楀埌瀛椾綋涓€涓瓧绗﹀搴旂偣闃甸泦鎵€鍗犵殑瀛楄妭鏁�
 8005e2a:	78bb      	ldrb	r3, [r7, #2]
 8005e2c:	08db      	lsrs	r3, r3, #3
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	78bb      	ldrb	r3, [r7, #2]
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	bf14      	ite	ne
 8005e3e:	2301      	movne	r3, #1
 8005e40:	2300      	moveq	r3, #0
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	4413      	add	r3, r2
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	78ba      	ldrb	r2, [r7, #2]
 8005e4a:	0852      	lsrs	r2, r2, #1
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	fb02 f303 	mul.w	r3, r2, r3
 8005e52:	727b      	strb	r3, [r7, #9]
    num = num - ' ';		//寰楀埌鍋忕Щ鍚庣殑鍊硷紙ASCII瀛楀簱鏄粠绌烘牸寮€濮嬪彇妯★紝鎵€浠�-' '灏辨槸瀵瑰簲瀛楃鐨勫瓧搴擄級
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	3b20      	subs	r3, #32
 8005e58:	70fb      	strb	r3, [r7, #3]
    for (t = 0; t < csize; t++) {
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	737b      	strb	r3, [r7, #13]
 8005e5e:	e069      	b.n	8005f34 <LCD_ShowChar+0x12c>
        if (size == 12)
 8005e60:	78bb      	ldrb	r3, [r7, #2]
 8005e62:	2b0c      	cmp	r3, #12
 8005e64:	d10b      	bne.n	8005e7e <LCD_ShowChar+0x76>
            temp = asc2_1206[num][t]; 	 	//璋冪敤1206瀛椾綋
 8005e66:	78fa      	ldrb	r2, [r7, #3]
 8005e68:	7b79      	ldrb	r1, [r7, #13]
 8005e6a:	4838      	ldr	r0, [pc, #224]	; (8005f4c <LCD_ShowChar+0x144>)
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4403      	add	r3, r0
 8005e76:	440b      	add	r3, r1
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	73fb      	strb	r3, [r7, #15]
 8005e7c:	e019      	b.n	8005eb2 <LCD_ShowChar+0xaa>
        else if (size == 16)
 8005e7e:	78bb      	ldrb	r3, [r7, #2]
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d108      	bne.n	8005e96 <LCD_ShowChar+0x8e>
            temp = asc2_1608[num][t];	//璋冪敤1608瀛椾綋
 8005e84:	78fa      	ldrb	r2, [r7, #3]
 8005e86:	7b7b      	ldrb	r3, [r7, #13]
 8005e88:	4931      	ldr	r1, [pc, #196]	; (8005f50 <LCD_ShowChar+0x148>)
 8005e8a:	0112      	lsls	r2, r2, #4
 8005e8c:	440a      	add	r2, r1
 8005e8e:	4413      	add	r3, r2
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	73fb      	strb	r3, [r7, #15]
 8005e94:	e00d      	b.n	8005eb2 <LCD_ShowChar+0xaa>
        else if (size == 24)
 8005e96:	78bb      	ldrb	r3, [r7, #2]
 8005e98:	2b18      	cmp	r3, #24
 8005e9a:	d150      	bne.n	8005f3e <LCD_ShowChar+0x136>
            temp = asc2_2412[num][t];	//璋冪敤2412瀛椾綋
 8005e9c:	78fa      	ldrb	r2, [r7, #3]
 8005e9e:	7b79      	ldrb	r1, [r7, #13]
 8005ea0:	482c      	ldr	r0, [pc, #176]	; (8005f54 <LCD_ShowChar+0x14c>)
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4403      	add	r3, r0
 8005eac:	440b      	add	r3, r1
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	73fb      	strb	r3, [r7, #15]
        else
            return;								//娌℃湁鐨勫瓧搴�
        for (t1 = 0; t1 < 8; t1++) {
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	73bb      	strb	r3, [r7, #14]
 8005eb6:	e035      	b.n	8005f24 <LCD_ShowChar+0x11c>
            if (temp & 0x80)
 8005eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	da07      	bge.n	8005ed0 <LCD_ShowChar+0xc8>
                LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8005ec0:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <LCD_ShowChar+0x150>)
 8005ec2:	881a      	ldrh	r2, [r3, #0]
 8005ec4:	88b9      	ldrh	r1, [r7, #4]
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fb fbc7 	bl	800165c <LCD_Fast_DrawPoint>
 8005ece:	e00a      	b.n	8005ee6 <LCD_ShowChar+0xde>
            else if (mode == 0)
 8005ed0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <LCD_ShowChar+0xde>
                LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8005ed8:	4b20      	ldr	r3, [pc, #128]	; (8005f5c <LCD_ShowChar+0x154>)
 8005eda:	881a      	ldrh	r2, [r3, #0]
 8005edc:	88b9      	ldrh	r1, [r7, #4]
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fb fbbb 	bl	800165c <LCD_Fast_DrawPoint>
            temp <<= 1;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
            y++;
 8005eec:	88bb      	ldrh	r3, [r7, #4]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	80bb      	strh	r3, [r7, #4]
            if (y >= lcddev.height)
 8005ef2:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <LCD_ShowChar+0x158>)
 8005ef4:	885b      	ldrh	r3, [r3, #2]
 8005ef6:	88ba      	ldrh	r2, [r7, #4]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d222      	bcs.n	8005f42 <LCD_ShowChar+0x13a>
                return;		//瓒呭尯鍩熶簡
            if ((y - y0) == size) {
 8005efc:	88ba      	ldrh	r2, [r7, #4]
 8005efe:	897b      	ldrh	r3, [r7, #10]
 8005f00:	1ad2      	subs	r2, r2, r3
 8005f02:	78bb      	ldrb	r3, [r7, #2]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d10a      	bne.n	8005f1e <LCD_ShowChar+0x116>
                y = y0;
 8005f08:	897b      	ldrh	r3, [r7, #10]
 8005f0a:	80bb      	strh	r3, [r7, #4]
                x++;
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	80fb      	strh	r3, [r7, #6]
                if (x >= lcddev.width)
 8005f12:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <LCD_ShowChar+0x158>)
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	88fa      	ldrh	r2, [r7, #6]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d307      	bcc.n	8005f2c <LCD_ShowChar+0x124>
                    return;	//瓒呭尯鍩熶簡
 8005f1c:	e012      	b.n	8005f44 <LCD_ShowChar+0x13c>
        for (t1 = 0; t1 < 8; t1++) {
 8005f1e:	7bbb      	ldrb	r3, [r7, #14]
 8005f20:	3301      	adds	r3, #1
 8005f22:	73bb      	strb	r3, [r7, #14]
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	2b07      	cmp	r3, #7
 8005f28:	d9c6      	bls.n	8005eb8 <LCD_ShowChar+0xb0>
 8005f2a:	e000      	b.n	8005f2e <LCD_ShowChar+0x126>
                break;
 8005f2c:	bf00      	nop
    for (t = 0; t < csize; t++) {
 8005f2e:	7b7b      	ldrb	r3, [r7, #13]
 8005f30:	3301      	adds	r3, #1
 8005f32:	737b      	strb	r3, [r7, #13]
 8005f34:	7b7a      	ldrb	r2, [r7, #13]
 8005f36:	7a7b      	ldrb	r3, [r7, #9]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d391      	bcc.n	8005e60 <LCD_ShowChar+0x58>
 8005f3c:	e002      	b.n	8005f44 <LCD_ShowChar+0x13c>
            return;								//娌℃湁鐨勫瓧搴�
 8005f3e:	bf00      	nop
 8005f40:	e000      	b.n	8005f44 <LCD_ShowChar+0x13c>
                return;		//瓒呭尯鍩熶簡
 8005f42:	bf00      	nop
            }
        }
    }
}
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd90      	pop	{r4, r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	0800827c 	.word	0x0800827c
 8005f50:	080086f0 	.word	0x080086f0
 8005f54:	08008ce0 	.word	0x08008ce0
 8005f58:	2000002c 	.word	0x2000002c
 8005f5c:	20000000 	.word	0x20000000
 8005f60:	20000030 	.word	0x20000030

08005f64 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
                    uint8_t size, uint8_t *p) {
 8005f64:	b590      	push	{r4, r7, lr}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	4611      	mov	r1, r2
 8005f70:	461a      	mov	r2, r3
 8005f72:	4623      	mov	r3, r4
 8005f74:	80fb      	strh	r3, [r7, #6]
 8005f76:	4603      	mov	r3, r0
 8005f78:	80bb      	strh	r3, [r7, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	807b      	strh	r3, [r7, #2]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8005f82:	88fb      	ldrh	r3, [r7, #6]
 8005f84:	73fb      	strb	r3, [r7, #15]
    width += x;
 8005f86:	887a      	ldrh	r2, [r7, #2]
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	807b      	strh	r3, [r7, #2]
    height += y;
 8005f8e:	883a      	ldrh	r2, [r7, #0]
 8005f90:	88bb      	ldrh	r3, [r7, #4]
 8005f92:	4413      	add	r3, r2
 8005f94:	803b      	strh	r3, [r7, #0]
    while ((*p <= '~') && (*p >= ' '))	//鍒ゆ柇鏄笉鏄潪娉曞瓧绗�!
 8005f96:	e024      	b.n	8005fe2 <LCD_ShowString+0x7e>
    {
        if (x >= width) {
 8005f98:	88fa      	ldrh	r2, [r7, #6]
 8005f9a:	887b      	ldrh	r3, [r7, #2]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d307      	bcc.n	8005fb0 <LCD_ShowString+0x4c>
            x = x0;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	80fb      	strh	r3, [r7, #6]
            y += size;
 8005fa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	88bb      	ldrh	r3, [r7, #4]
 8005fac:	4413      	add	r3, r2
 8005fae:	80bb      	strh	r3, [r7, #4]
        }
        if (y >= height)
 8005fb0:	88ba      	ldrh	r2, [r7, #4]
 8005fb2:	883b      	ldrh	r3, [r7, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d21d      	bcs.n	8005ff4 <LCD_ShowString+0x90>
            break;	//閫€鍑�
        LCD_ShowChar(x, y, *p, size, 0);
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	781a      	ldrb	r2, [r3, #0]
 8005fbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fc0:	88b9      	ldrh	r1, [r7, #4]
 8005fc2:	88f8      	ldrh	r0, [r7, #6]
 8005fc4:	2400      	movs	r4, #0
 8005fc6:	9400      	str	r4, [sp, #0]
 8005fc8:	f7ff ff1e 	bl	8005e08 <LCD_ShowChar>
        x += size / 2;
 8005fcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	4413      	add	r3, r2
 8005fda:	80fb      	strh	r3, [r7, #6]
        p++;
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	3301      	adds	r3, #1
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' '))	//鍒ゆ柇鏄笉鏄潪娉曞瓧绗�!
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b7e      	cmp	r3, #126	; 0x7e
 8005fe8:	d805      	bhi.n	8005ff6 <LCD_ShowString+0x92>
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b1f      	cmp	r3, #31
 8005ff0:	d8d2      	bhi.n	8005f98 <LCD_ShowString+0x34>
    }
}
 8005ff2:	e000      	b.n	8005ff6 <LCD_ShowString+0x92>
            break;	//閫€鍑�
 8005ff4:	bf00      	nop
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd90      	pop	{r4, r7, pc}
	...

08006000 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8006006:	f000 f9e3 	bl	80063d0 <HAL_Init>

    /* USER CODE BEGIN Init */
    LCD_Init();
 800600a:	f7fb ff6d 	bl	8001ee8 <LCD_Init>
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800600e:	f000 f811 	bl	8006034 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8006012:	f7fa fc0f 	bl	8000834 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8006016:	f000 f937 	bl	8006288 <MX_USART1_UART_Init>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */
        LCD_ShowString(10, 40, 200, 24, 24, (uint8_t *) uRx_Data);
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <main+0x30>)
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	2318      	movs	r3, #24
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	2318      	movs	r3, #24
 8006024:	22c8      	movs	r2, #200	; 0xc8
 8006026:	2128      	movs	r1, #40	; 0x28
 8006028:	200a      	movs	r0, #10
 800602a:	f7ff ff9b 	bl	8005f64 <LCD_ShowString>
 800602e:	e7f4      	b.n	800601a <main+0x1a>
 8006030:	20000054 	.word	0x20000054

08006034 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b090      	sub	sp, #64	; 0x40
 8006038:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800603a:	f107 0318 	add.w	r3, r7, #24
 800603e:	2228      	movs	r2, #40	; 0x28
 8006040:	2100      	movs	r1, #0
 8006042:	4618      	mov	r0, r3
 8006044:	f002 f8ce 	bl	80081e4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006048:	1d3b      	adds	r3, r7, #4
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	605a      	str	r2, [r3, #4]
 8006050:	609a      	str	r2, [r3, #8]
 8006052:	60da      	str	r2, [r3, #12]
 8006054:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006056:	2301      	movs	r3, #1
 8006058:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800605a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800605e:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006060:	2300      	movs	r3, #0
 8006062:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006064:	2301      	movs	r3, #1
 8006066:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006068:	2302      	movs	r3, #2
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800606c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006070:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006072:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006078:	f107 0318 	add.w	r3, r7, #24
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fe29 	bl	8006cd4 <HAL_RCC_OscConfig>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <SystemClock_Config+0x58>
        Error_Handler();
 8006088:	f000 f819 	bl	80060be <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800608c:	230f      	movs	r3, #15
 800608e:	607b      	str	r3, [r7, #4]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006090:	2302      	movs	r3, #2
 8006092:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800609c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800609e:	2300      	movs	r3, #0
 80060a0:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80060a2:	1d3b      	adds	r3, r7, #4
 80060a4:	2102      	movs	r1, #2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 f896 	bl	80071d8 <HAL_RCC_ClockConfig>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <SystemClock_Config+0x82>
        Error_Handler();
 80060b2:	f000 f804 	bl	80060be <Error_Handler>
    }
}
 80060b6:	bf00      	nop
 80060b8:	3740      	adds	r7, #64	; 0x40
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 80060be:	b480      	push	{r7}
 80060c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80060c2:	b672      	cpsid	i
}
 80060c4:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80060c6:	e7fe      	b.n	80060c6 <Error_Handler+0x8>

080060c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80060ce:	4b16      	ldr	r3, [pc, #88]	; (8006128 <HAL_MspInit+0x60>)
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	4a15      	ldr	r2, [pc, #84]	; (8006128 <HAL_MspInit+0x60>)
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	6193      	str	r3, [r2, #24]
 80060da:	4b13      	ldr	r3, [pc, #76]	; (8006128 <HAL_MspInit+0x60>)
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	60bb      	str	r3, [r7, #8]
 80060e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <HAL_MspInit+0x60>)
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	4a0f      	ldr	r2, [pc, #60]	; (8006128 <HAL_MspInit+0x60>)
 80060ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f0:	61d3      	str	r3, [r2, #28]
 80060f2:	4b0d      	ldr	r3, [pc, #52]	; (8006128 <HAL_MspInit+0x60>)
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060fa:	607b      	str	r3, [r7, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80060fe:	2005      	movs	r0, #5
 8006100:	f000 fab8 	bl	8006674 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006104:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_MspInit+0x64>)
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	4a04      	ldr	r2, [pc, #16]	; (800612c <HAL_MspInit+0x64>)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40021000 	.word	0x40021000
 800612c:	40010000 	.word	0x40010000

08006130 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void) {
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1) {
 8006134:	e7fe      	b.n	8006134 <NMI_Handler+0x4>

08006136 <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void) {
 8006136:	b480      	push	{r7}
 8006138:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
 800613a:	e7fe      	b.n	800613a <HardFault_Handler+0x4>

0800613c <MemManage_Handler>:
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void) {
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 8006140:	e7fe      	b.n	8006140 <MemManage_Handler+0x4>

08006142 <BusFault_Handler>:
}

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void) {
 8006142:	b480      	push	{r7}
 8006144:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 8006146:	e7fe      	b.n	8006146 <BusFault_Handler+0x4>

08006148 <UsageFault_Handler>:
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void) {
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 800614c:	e7fe      	b.n	800614c <UsageFault_Handler+0x4>

0800614e <SVC_Handler>:
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void) {
 800614e:	b480      	push	{r7}
 8006150:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8006152:	bf00      	nop
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void) {
 800615a:	b480      	push	{r7}
 800615c:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 800615e:	bf00      	nop
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr

08006166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void) {
 8006166:	b480      	push	{r7}
 8006168:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 800616a:	bf00      	nop
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr

08006172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void) {
 8006172:	b580      	push	{r7, lr}
 8006174:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8006176:	f000 f971 	bl	800645c <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 800617a:	bf00      	nop
 800617c:	bd80      	pop	{r7, pc}

0800617e <EXTI9_5_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void) {
 800617e:	b580      	push	{r7, lr}
 8006180:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI9_5_IRQn 0 */

    /* USER CODE END EXTI9_5_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8006182:	2020      	movs	r0, #32
 8006184:	f000 fd8e 	bl	8006ca4 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI9_5_IRQn 1 */

    /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006188:	bf00      	nop
 800618a:	bd80      	pop	{r7, pc}

0800618c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void) {
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_IRQn 0 */

    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 8006190:	4804      	ldr	r0, [pc, #16]	; (80061a4 <USART1_IRQHandler+0x18>)
 8006192:	f001 faa7 	bl	80076e4 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */
    HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1);
 8006196:	2201      	movs	r2, #1
 8006198:	4903      	ldr	r1, [pc, #12]	; (80061a8 <USART1_IRQHandler+0x1c>)
 800619a:	4802      	ldr	r0, [pc, #8]	; (80061a4 <USART1_IRQHandler+0x18>)
 800619c:	f001 fa7d 	bl	800769a <HAL_UART_Receive_IT>
    /* USER CODE END USART1_IRQn 1 */
}
 80061a0:	bf00      	nop
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20000458 	.word	0x20000458
 80061a8:	20000040 	.word	0x20000040

080061ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI15_10_IRQn 0 */

    /* USER CODE END EXTI15_10_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 80061b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80061b4:	f000 fd76 	bl	8006ca4 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI15_10_IRQn 1 */

    /* USER CODE END EXTI15_10_IRQn 1 */
}
 80061b8:	bf00      	nop
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a12      	ldr	r2, [pc, #72]	; (8006214 <HAL_UART_RxCpltCallback+0x58>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d11d      	bne.n	800620a <HAL_UART_RxCpltCallback+0x4e>
        if (rxBuffer[0] == '\n') {
 80061ce:	4b12      	ldr	r3, [pc, #72]	; (8006218 <HAL_UART_RxCpltCallback+0x5c>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b0a      	cmp	r3, #10
 80061d4:	d10c      	bne.n	80061f0 <HAL_UART_RxCpltCallback+0x34>
            HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
 80061d6:	4b11      	ldr	r3, [pc, #68]	; (800621c <HAL_UART_RxCpltCallback+0x60>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	b29a      	uxth	r2, r3
 80061dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061e0:	490f      	ldr	r1, [pc, #60]	; (8006220 <HAL_UART_RxCpltCallback+0x64>)
 80061e2:	4810      	ldr	r0, [pc, #64]	; (8006224 <HAL_UART_RxCpltCallback+0x68>)
 80061e4:	f001 f9d6 	bl	8007594 <HAL_UART_Transmit>
            uLength = 0;
 80061e8:	4b0c      	ldr	r3, [pc, #48]	; (800621c <HAL_UART_RxCpltCallback+0x60>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	701a      	strb	r2, [r3, #0]
        } else {
            uRx_Data[uLength] = rxBuffer[0];
            uLength++;
        }
    }
}
 80061ee:	e00c      	b.n	800620a <HAL_UART_RxCpltCallback+0x4e>
            uRx_Data[uLength] = rxBuffer[0];
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <HAL_UART_RxCpltCallback+0x60>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	4b08      	ldr	r3, [pc, #32]	; (8006218 <HAL_UART_RxCpltCallback+0x5c>)
 80061f8:	7819      	ldrb	r1, [r3, #0]
 80061fa:	4b09      	ldr	r3, [pc, #36]	; (8006220 <HAL_UART_RxCpltCallback+0x64>)
 80061fc:	5499      	strb	r1, [r3, r2]
            uLength++;
 80061fe:	4b07      	ldr	r3, [pc, #28]	; (800621c <HAL_UART_RxCpltCallback+0x60>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	b2da      	uxtb	r2, r3
 8006206:	4b05      	ldr	r3, [pc, #20]	; (800621c <HAL_UART_RxCpltCallback+0x60>)
 8006208:	701a      	strb	r2, [r3, #0]
}
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	40013800 	.word	0x40013800
 8006218:	20000040 	.word	0x20000040
 800621c:	20000454 	.word	0x20000454
 8006220:	20000054 	.word	0x20000054
 8006224:	20000458 	.word	0x20000458

08006228 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	4603      	mov	r3, r0
 8006230:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(100);
 8006232:	2064      	movs	r0, #100	; 0x64
 8006234:	f000 f92e 	bl	8006494 <HAL_Delay>
    switch (GPIO_Pin) {
 8006238:	88fb      	ldrh	r3, [r7, #6]
 800623a:	2b20      	cmp	r3, #32
 800623c:	d003      	beq.n	8006246 <HAL_GPIO_EXTI_Callback+0x1e>
 800623e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006242:	d008      	beq.n	8006256 <HAL_GPIO_EXTI_Callback+0x2e>
//			}
//            LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) "KEY1 is pressed");
            HAL_UART_Transmit(&huart1, (uint8_t *) "KEY1 is pressed\n", strlen("KEY1 is pressed\n"), 0xffff);
            break;
        default:
            break;
 8006244:	e00f      	b.n	8006266 <HAL_GPIO_EXTI_Callback+0x3e>
            HAL_UART_Transmit(&huart1, (uint8_t *) "KEY0 is pressed\n", strlen("KEY0 is pressed\n"), 0xffff);
 8006246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800624a:	2210      	movs	r2, #16
 800624c:	4908      	ldr	r1, [pc, #32]	; (8006270 <HAL_GPIO_EXTI_Callback+0x48>)
 800624e:	4809      	ldr	r0, [pc, #36]	; (8006274 <HAL_GPIO_EXTI_Callback+0x4c>)
 8006250:	f001 f9a0 	bl	8007594 <HAL_UART_Transmit>
            break;
 8006254:	e007      	b.n	8006266 <HAL_GPIO_EXTI_Callback+0x3e>
            HAL_UART_Transmit(&huart1, (uint8_t *) "KEY1 is pressed\n", strlen("KEY1 is pressed\n"), 0xffff);
 8006256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800625a:	2210      	movs	r2, #16
 800625c:	4906      	ldr	r1, [pc, #24]	; (8006278 <HAL_GPIO_EXTI_Callback+0x50>)
 800625e:	4805      	ldr	r0, [pc, #20]	; (8006274 <HAL_GPIO_EXTI_Callback+0x4c>)
 8006260:	f001 f998 	bl	8007594 <HAL_UART_Transmit>
            break;
 8006264:	bf00      	nop
    }
}
 8006266:	bf00      	nop
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	08008254 	.word	0x08008254
 8006274:	20000458 	.word	0x20000458
 8006278:	08008268 	.word	0x08008268

0800627c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006280:	bf00      	nop
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr

08006288 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800628c:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <MX_USART1_UART_Init+0x4c>)
 800628e:	4a12      	ldr	r2, [pc, #72]	; (80062d8 <MX_USART1_UART_Init+0x50>)
 8006290:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006292:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <MX_USART1_UART_Init+0x4c>)
 8006294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006298:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800629a:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <MX_USART1_UART_Init+0x4c>)
 800629c:	2200      	movs	r2, #0
 800629e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80062a0:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <MX_USART1_UART_Init+0x4c>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <MX_USART1_UART_Init+0x4c>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <MX_USART1_UART_Init+0x4c>)
 80062ae:	220c      	movs	r2, #12
 80062b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062b2:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <MX_USART1_UART_Init+0x4c>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80062b8:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <MX_USART1_UART_Init+0x4c>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80062be:	4805      	ldr	r0, [pc, #20]	; (80062d4 <MX_USART1_UART_Init+0x4c>)
 80062c0:	f001 f918 	bl	80074f4 <HAL_UART_Init>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80062ca:	f7ff fef8 	bl	80060be <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80062ce:	bf00      	nop
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000458 	.word	0x20000458
 80062d8:	40013800 	.word	0x40013800

080062dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062e4:	f107 0310 	add.w	r3, r7, #16
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	605a      	str	r2, [r3, #4]
 80062ee:	609a      	str	r2, [r3, #8]
 80062f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a20      	ldr	r2, [pc, #128]	; (8006378 <HAL_UART_MspInit+0x9c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d139      	bne.n	8006370 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80062fc:	4b1f      	ldr	r3, [pc, #124]	; (800637c <HAL_UART_MspInit+0xa0>)
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	4a1e      	ldr	r2, [pc, #120]	; (800637c <HAL_UART_MspInit+0xa0>)
 8006302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006306:	6193      	str	r3, [r2, #24]
 8006308:	4b1c      	ldr	r3, [pc, #112]	; (800637c <HAL_UART_MspInit+0xa0>)
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006314:	4b19      	ldr	r3, [pc, #100]	; (800637c <HAL_UART_MspInit+0xa0>)
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	4a18      	ldr	r2, [pc, #96]	; (800637c <HAL_UART_MspInit+0xa0>)
 800631a:	f043 0304 	orr.w	r3, r3, #4
 800631e:	6193      	str	r3, [r2, #24]
 8006320:	4b16      	ldr	r3, [pc, #88]	; (800637c <HAL_UART_MspInit+0xa0>)
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	60bb      	str	r3, [r7, #8]
 800632a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800632c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006332:	2302      	movs	r3, #2
 8006334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006336:	2303      	movs	r3, #3
 8006338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800633a:	f107 0310 	add.w	r3, r7, #16
 800633e:	4619      	mov	r1, r3
 8006340:	480f      	ldr	r0, [pc, #60]	; (8006380 <HAL_UART_MspInit+0xa4>)
 8006342:	f000 fb1b 	bl	800697c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800634a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006350:	2300      	movs	r3, #0
 8006352:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006354:	f107 0310 	add.w	r3, r7, #16
 8006358:	4619      	mov	r1, r3
 800635a:	4809      	ldr	r0, [pc, #36]	; (8006380 <HAL_UART_MspInit+0xa4>)
 800635c:	f000 fb0e 	bl	800697c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006360:	2200      	movs	r2, #0
 8006362:	2101      	movs	r1, #1
 8006364:	2025      	movs	r0, #37	; 0x25
 8006366:	f000 f990 	bl	800668a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800636a:	2025      	movs	r0, #37	; 0x25
 800636c:	f000 f9a9 	bl	80066c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006370:	bf00      	nop
 8006372:	3720      	adds	r7, #32
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40013800 	.word	0x40013800
 800637c:	40021000 	.word	0x40021000
 8006380:	40010800 	.word	0x40010800

08006384 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006384:	f7ff ff7a 	bl	800627c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006388:	480b      	ldr	r0, [pc, #44]	; (80063b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800638a:	490c      	ldr	r1, [pc, #48]	; (80063bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800638c:	4a0c      	ldr	r2, [pc, #48]	; (80063c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800638e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006390:	e002      	b.n	8006398 <LoopCopyDataInit>

08006392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006396:	3304      	adds	r3, #4

08006398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800639a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800639c:	d3f9      	bcc.n	8006392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800639e:	4a09      	ldr	r2, [pc, #36]	; (80063c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80063a0:	4c09      	ldr	r4, [pc, #36]	; (80063c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80063a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80063a4:	e001      	b.n	80063aa <LoopFillZerobss>

080063a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80063a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80063a8:	3204      	adds	r2, #4

080063aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80063aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80063ac:	d3fb      	bcc.n	80063a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80063ae:	f001 ff21 	bl	80081f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80063b2:	f7ff fe25 	bl	8006000 <main>
  bx lr
 80063b6:	4770      	bx	lr
  ldr r0, =_sdata
 80063b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80063c0:	08009a70 	.word	0x08009a70
  ldr r2, =_sbss
 80063c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80063c8:	200004a4 	.word	0x200004a4

080063cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80063cc:	e7fe      	b.n	80063cc <ADC1_2_IRQHandler>
	...

080063d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80063d4:	4b08      	ldr	r3, [pc, #32]	; (80063f8 <HAL_Init+0x28>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a07      	ldr	r2, [pc, #28]	; (80063f8 <HAL_Init+0x28>)
 80063da:	f043 0310 	orr.w	r3, r3, #16
 80063de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063e0:	2003      	movs	r0, #3
 80063e2:	f000 f947 	bl	8006674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063e6:	2000      	movs	r0, #0
 80063e8:	f000 f808 	bl	80063fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063ec:	f7ff fe6c 	bl	80060c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	40022000 	.word	0x40022000

080063fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006404:	4b12      	ldr	r3, [pc, #72]	; (8006450 <HAL_InitTick+0x54>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	4b12      	ldr	r3, [pc, #72]	; (8006454 <HAL_InitTick+0x58>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	4619      	mov	r1, r3
 800640e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006412:	fbb3 f3f1 	udiv	r3, r3, r1
 8006416:	fbb2 f3f3 	udiv	r3, r2, r3
 800641a:	4618      	mov	r0, r3
 800641c:	f000 f95f 	bl	80066de <HAL_SYSTICK_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e00e      	b.n	8006448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b0f      	cmp	r3, #15
 800642e:	d80a      	bhi.n	8006446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006430:	2200      	movs	r2, #0
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	f04f 30ff 	mov.w	r0, #4294967295
 8006438:	f000 f927 	bl	800668a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800643c:	4a06      	ldr	r2, [pc, #24]	; (8006458 <HAL_InitTick+0x5c>)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	e000      	b.n	8006448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20000004 	.word	0x20000004
 8006454:	2000000c 	.word	0x2000000c
 8006458:	20000008 	.word	0x20000008

0800645c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <HAL_IncTick+0x1c>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	461a      	mov	r2, r3
 8006466:	4b05      	ldr	r3, [pc, #20]	; (800647c <HAL_IncTick+0x20>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4413      	add	r3, r2
 800646c:	4a03      	ldr	r2, [pc, #12]	; (800647c <HAL_IncTick+0x20>)
 800646e:	6013      	str	r3, [r2, #0]
}
 8006470:	bf00      	nop
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr
 8006478:	2000000c 	.word	0x2000000c
 800647c:	200004a0 	.word	0x200004a0

08006480 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
  return uwTick;
 8006484:	4b02      	ldr	r3, [pc, #8]	; (8006490 <HAL_GetTick+0x10>)
 8006486:	681b      	ldr	r3, [r3, #0]
}
 8006488:	4618      	mov	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr
 8006490:	200004a0 	.word	0x200004a0

08006494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800649c:	f7ff fff0 	bl	8006480 <HAL_GetTick>
 80064a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ac:	d005      	beq.n	80064ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80064ae:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <HAL_Delay+0x44>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4413      	add	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80064ba:	bf00      	nop
 80064bc:	f7ff ffe0 	bl	8006480 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d8f7      	bhi.n	80064bc <HAL_Delay+0x28>
  {
  }
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	2000000c 	.word	0x2000000c

080064dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064ec:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <__NVIC_SetPriorityGrouping+0x44>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064f8:	4013      	ands	r3, r2
 80064fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800650e:	4a04      	ldr	r2, [pc, #16]	; (8006520 <__NVIC_SetPriorityGrouping+0x44>)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	60d3      	str	r3, [r2, #12]
}
 8006514:	bf00      	nop
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	e000ed00 	.word	0xe000ed00

08006524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006528:	4b04      	ldr	r3, [pc, #16]	; (800653c <__NVIC_GetPriorityGrouping+0x18>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	0a1b      	lsrs	r3, r3, #8
 800652e:	f003 0307 	and.w	r3, r3, #7
}
 8006532:	4618      	mov	r0, r3
 8006534:	46bd      	mov	sp, r7
 8006536:	bc80      	pop	{r7}
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	e000ed00 	.word	0xe000ed00

08006540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	4603      	mov	r3, r0
 8006548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800654a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800654e:	2b00      	cmp	r3, #0
 8006550:	db0b      	blt.n	800656a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	f003 021f 	and.w	r2, r3, #31
 8006558:	4906      	ldr	r1, [pc, #24]	; (8006574 <__NVIC_EnableIRQ+0x34>)
 800655a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	2001      	movs	r0, #1
 8006562:	fa00 f202 	lsl.w	r2, r0, r2
 8006566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr
 8006574:	e000e100 	.word	0xe000e100

08006578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	4603      	mov	r3, r0
 8006580:	6039      	str	r1, [r7, #0]
 8006582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006588:	2b00      	cmp	r3, #0
 800658a:	db0a      	blt.n	80065a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	b2da      	uxtb	r2, r3
 8006590:	490c      	ldr	r1, [pc, #48]	; (80065c4 <__NVIC_SetPriority+0x4c>)
 8006592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006596:	0112      	lsls	r2, r2, #4
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	440b      	add	r3, r1
 800659c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065a0:	e00a      	b.n	80065b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	4908      	ldr	r1, [pc, #32]	; (80065c8 <__NVIC_SetPriority+0x50>)
 80065a8:	79fb      	ldrb	r3, [r7, #7]
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	3b04      	subs	r3, #4
 80065b0:	0112      	lsls	r2, r2, #4
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	440b      	add	r3, r1
 80065b6:	761a      	strb	r2, [r3, #24]
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	bc80      	pop	{r7}
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	e000e100 	.word	0xe000e100
 80065c8:	e000ed00 	.word	0xe000ed00

080065cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b089      	sub	sp, #36	; 0x24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f1c3 0307 	rsb	r3, r3, #7
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	bf28      	it	cs
 80065ea:	2304      	movcs	r3, #4
 80065ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	3304      	adds	r3, #4
 80065f2:	2b06      	cmp	r3, #6
 80065f4:	d902      	bls.n	80065fc <NVIC_EncodePriority+0x30>
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	3b03      	subs	r3, #3
 80065fa:	e000      	b.n	80065fe <NVIC_EncodePriority+0x32>
 80065fc:	2300      	movs	r3, #0
 80065fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006600:	f04f 32ff 	mov.w	r2, #4294967295
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	fa02 f303 	lsl.w	r3, r2, r3
 800660a:	43da      	mvns	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	401a      	ands	r2, r3
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006614:	f04f 31ff 	mov.w	r1, #4294967295
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	fa01 f303 	lsl.w	r3, r1, r3
 800661e:	43d9      	mvns	r1, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006624:	4313      	orrs	r3, r2
         );
}
 8006626:	4618      	mov	r0, r3
 8006628:	3724      	adds	r7, #36	; 0x24
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr

08006630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3b01      	subs	r3, #1
 800663c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006640:	d301      	bcc.n	8006646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006642:	2301      	movs	r3, #1
 8006644:	e00f      	b.n	8006666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006646:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <SysTick_Config+0x40>)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3b01      	subs	r3, #1
 800664c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800664e:	210f      	movs	r1, #15
 8006650:	f04f 30ff 	mov.w	r0, #4294967295
 8006654:	f7ff ff90 	bl	8006578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006658:	4b05      	ldr	r3, [pc, #20]	; (8006670 <SysTick_Config+0x40>)
 800665a:	2200      	movs	r2, #0
 800665c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800665e:	4b04      	ldr	r3, [pc, #16]	; (8006670 <SysTick_Config+0x40>)
 8006660:	2207      	movs	r2, #7
 8006662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	e000e010 	.word	0xe000e010

08006674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff ff2d 	bl	80064dc <__NVIC_SetPriorityGrouping>
}
 8006682:	bf00      	nop
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800668a:	b580      	push	{r7, lr}
 800668c:	b086      	sub	sp, #24
 800668e:	af00      	add	r7, sp, #0
 8006690:	4603      	mov	r3, r0
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	607a      	str	r2, [r7, #4]
 8006696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006698:	2300      	movs	r3, #0
 800669a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800669c:	f7ff ff42 	bl	8006524 <__NVIC_GetPriorityGrouping>
 80066a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	6978      	ldr	r0, [r7, #20]
 80066a8:	f7ff ff90 	bl	80065cc <NVIC_EncodePriority>
 80066ac:	4602      	mov	r2, r0
 80066ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066b2:	4611      	mov	r1, r2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff ff5f 	bl	8006578 <__NVIC_SetPriority>
}
 80066ba:	bf00      	nop
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	4603      	mov	r3, r0
 80066ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff ff35 	bl	8006540 <__NVIC_EnableIRQ>
}
 80066d6:	bf00      	nop
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff ffa2 	bl	8006630 <SysTick_Config>
 80066ec:	4603      	mov	r3, r0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d008      	beq.n	8006720 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2204      	movs	r2, #4
 8006712:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e020      	b.n	8006762 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 020e 	bic.w	r2, r2, #14
 800672e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0201 	bic.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006748:	2101      	movs	r1, #1
 800674a:	fa01 f202 	lsl.w	r2, r1, r2
 800674e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d005      	beq.n	8006790 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2204      	movs	r2, #4
 8006788:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	73fb      	strb	r3, [r7, #15]
 800678e:	e0d6      	b.n	800693e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 020e 	bic.w	r2, r2, #14
 800679e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0201 	bic.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	4b64      	ldr	r3, [pc, #400]	; (8006948 <HAL_DMA_Abort_IT+0x1dc>)
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d958      	bls.n	800686e <HAL_DMA_Abort_IT+0x102>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a62      	ldr	r2, [pc, #392]	; (800694c <HAL_DMA_Abort_IT+0x1e0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d04f      	beq.n	8006866 <HAL_DMA_Abort_IT+0xfa>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a61      	ldr	r2, [pc, #388]	; (8006950 <HAL_DMA_Abort_IT+0x1e4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d048      	beq.n	8006862 <HAL_DMA_Abort_IT+0xf6>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a5f      	ldr	r2, [pc, #380]	; (8006954 <HAL_DMA_Abort_IT+0x1e8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d040      	beq.n	800685c <HAL_DMA_Abort_IT+0xf0>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a5e      	ldr	r2, [pc, #376]	; (8006958 <HAL_DMA_Abort_IT+0x1ec>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d038      	beq.n	8006856 <HAL_DMA_Abort_IT+0xea>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a5c      	ldr	r2, [pc, #368]	; (800695c <HAL_DMA_Abort_IT+0x1f0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d030      	beq.n	8006850 <HAL_DMA_Abort_IT+0xe4>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a5b      	ldr	r2, [pc, #364]	; (8006960 <HAL_DMA_Abort_IT+0x1f4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d028      	beq.n	800684a <HAL_DMA_Abort_IT+0xde>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a52      	ldr	r2, [pc, #328]	; (8006948 <HAL_DMA_Abort_IT+0x1dc>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d020      	beq.n	8006844 <HAL_DMA_Abort_IT+0xd8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a57      	ldr	r2, [pc, #348]	; (8006964 <HAL_DMA_Abort_IT+0x1f8>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d019      	beq.n	8006840 <HAL_DMA_Abort_IT+0xd4>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a55      	ldr	r2, [pc, #340]	; (8006968 <HAL_DMA_Abort_IT+0x1fc>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d012      	beq.n	800683c <HAL_DMA_Abort_IT+0xd0>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a54      	ldr	r2, [pc, #336]	; (800696c <HAL_DMA_Abort_IT+0x200>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00a      	beq.n	8006836 <HAL_DMA_Abort_IT+0xca>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a52      	ldr	r2, [pc, #328]	; (8006970 <HAL_DMA_Abort_IT+0x204>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d102      	bne.n	8006830 <HAL_DMA_Abort_IT+0xc4>
 800682a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800682e:	e01b      	b.n	8006868 <HAL_DMA_Abort_IT+0xfc>
 8006830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006834:	e018      	b.n	8006868 <HAL_DMA_Abort_IT+0xfc>
 8006836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800683a:	e015      	b.n	8006868 <HAL_DMA_Abort_IT+0xfc>
 800683c:	2310      	movs	r3, #16
 800683e:	e013      	b.n	8006868 <HAL_DMA_Abort_IT+0xfc>
 8006840:	2301      	movs	r3, #1
 8006842:	e011      	b.n	8006868 <HAL_DMA_Abort_IT+0xfc>
 8006844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006848:	e00e      	b.n	8006868 <HAL_DMA_Abort_IT+0xfc>
 800684a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800684e:	e00b      	b.n	8006868 <HAL_DMA_Abort_IT+0xfc>
 8006850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006854:	e008      	b.n	8006868 <HAL_DMA_Abort_IT+0xfc>
 8006856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800685a:	e005      	b.n	8006868 <HAL_DMA_Abort_IT+0xfc>
 800685c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006860:	e002      	b.n	8006868 <HAL_DMA_Abort_IT+0xfc>
 8006862:	2310      	movs	r3, #16
 8006864:	e000      	b.n	8006868 <HAL_DMA_Abort_IT+0xfc>
 8006866:	2301      	movs	r3, #1
 8006868:	4a42      	ldr	r2, [pc, #264]	; (8006974 <HAL_DMA_Abort_IT+0x208>)
 800686a:	6053      	str	r3, [r2, #4]
 800686c:	e057      	b.n	800691e <HAL_DMA_Abort_IT+0x1b2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a36      	ldr	r2, [pc, #216]	; (800694c <HAL_DMA_Abort_IT+0x1e0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d04f      	beq.n	8006918 <HAL_DMA_Abort_IT+0x1ac>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a34      	ldr	r2, [pc, #208]	; (8006950 <HAL_DMA_Abort_IT+0x1e4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d048      	beq.n	8006914 <HAL_DMA_Abort_IT+0x1a8>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a33      	ldr	r2, [pc, #204]	; (8006954 <HAL_DMA_Abort_IT+0x1e8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d040      	beq.n	800690e <HAL_DMA_Abort_IT+0x1a2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a31      	ldr	r2, [pc, #196]	; (8006958 <HAL_DMA_Abort_IT+0x1ec>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d038      	beq.n	8006908 <HAL_DMA_Abort_IT+0x19c>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a30      	ldr	r2, [pc, #192]	; (800695c <HAL_DMA_Abort_IT+0x1f0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d030      	beq.n	8006902 <HAL_DMA_Abort_IT+0x196>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a2e      	ldr	r2, [pc, #184]	; (8006960 <HAL_DMA_Abort_IT+0x1f4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d028      	beq.n	80068fc <HAL_DMA_Abort_IT+0x190>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a26      	ldr	r2, [pc, #152]	; (8006948 <HAL_DMA_Abort_IT+0x1dc>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d020      	beq.n	80068f6 <HAL_DMA_Abort_IT+0x18a>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a2a      	ldr	r2, [pc, #168]	; (8006964 <HAL_DMA_Abort_IT+0x1f8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d019      	beq.n	80068f2 <HAL_DMA_Abort_IT+0x186>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a29      	ldr	r2, [pc, #164]	; (8006968 <HAL_DMA_Abort_IT+0x1fc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d012      	beq.n	80068ee <HAL_DMA_Abort_IT+0x182>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a27      	ldr	r2, [pc, #156]	; (800696c <HAL_DMA_Abort_IT+0x200>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00a      	beq.n	80068e8 <HAL_DMA_Abort_IT+0x17c>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a26      	ldr	r2, [pc, #152]	; (8006970 <HAL_DMA_Abort_IT+0x204>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d102      	bne.n	80068e2 <HAL_DMA_Abort_IT+0x176>
 80068dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068e0:	e01b      	b.n	800691a <HAL_DMA_Abort_IT+0x1ae>
 80068e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068e6:	e018      	b.n	800691a <HAL_DMA_Abort_IT+0x1ae>
 80068e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068ec:	e015      	b.n	800691a <HAL_DMA_Abort_IT+0x1ae>
 80068ee:	2310      	movs	r3, #16
 80068f0:	e013      	b.n	800691a <HAL_DMA_Abort_IT+0x1ae>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e011      	b.n	800691a <HAL_DMA_Abort_IT+0x1ae>
 80068f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068fa:	e00e      	b.n	800691a <HAL_DMA_Abort_IT+0x1ae>
 80068fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006900:	e00b      	b.n	800691a <HAL_DMA_Abort_IT+0x1ae>
 8006902:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006906:	e008      	b.n	800691a <HAL_DMA_Abort_IT+0x1ae>
 8006908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800690c:	e005      	b.n	800691a <HAL_DMA_Abort_IT+0x1ae>
 800690e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006912:	e002      	b.n	800691a <HAL_DMA_Abort_IT+0x1ae>
 8006914:	2310      	movs	r3, #16
 8006916:	e000      	b.n	800691a <HAL_DMA_Abort_IT+0x1ae>
 8006918:	2301      	movs	r3, #1
 800691a:	4a17      	ldr	r2, [pc, #92]	; (8006978 <HAL_DMA_Abort_IT+0x20c>)
 800691c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	4798      	blx	r3
    } 
  }
  return status;
 800693e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40020080 	.word	0x40020080
 800694c:	40020008 	.word	0x40020008
 8006950:	4002001c 	.word	0x4002001c
 8006954:	40020030 	.word	0x40020030
 8006958:	40020044 	.word	0x40020044
 800695c:	40020058 	.word	0x40020058
 8006960:	4002006c 	.word	0x4002006c
 8006964:	40020408 	.word	0x40020408
 8006968:	4002041c 	.word	0x4002041c
 800696c:	40020430 	.word	0x40020430
 8006970:	40020444 	.word	0x40020444
 8006974:	40020400 	.word	0x40020400
 8006978:	40020000 	.word	0x40020000

0800697c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800697c:	b480      	push	{r7}
 800697e:	b08b      	sub	sp, #44	; 0x2c
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006986:	2300      	movs	r3, #0
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800698a:	2300      	movs	r3, #0
 800698c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800698e:	e179      	b.n	8006c84 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006990:	2201      	movs	r2, #1
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	4013      	ands	r3, r2
 80069a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	f040 8168 	bne.w	8006c7e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	4a96      	ldr	r2, [pc, #600]	; (8006c0c <HAL_GPIO_Init+0x290>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d05e      	beq.n	8006a76 <HAL_GPIO_Init+0xfa>
 80069b8:	4a94      	ldr	r2, [pc, #592]	; (8006c0c <HAL_GPIO_Init+0x290>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d875      	bhi.n	8006aaa <HAL_GPIO_Init+0x12e>
 80069be:	4a94      	ldr	r2, [pc, #592]	; (8006c10 <HAL_GPIO_Init+0x294>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d058      	beq.n	8006a76 <HAL_GPIO_Init+0xfa>
 80069c4:	4a92      	ldr	r2, [pc, #584]	; (8006c10 <HAL_GPIO_Init+0x294>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d86f      	bhi.n	8006aaa <HAL_GPIO_Init+0x12e>
 80069ca:	4a92      	ldr	r2, [pc, #584]	; (8006c14 <HAL_GPIO_Init+0x298>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d052      	beq.n	8006a76 <HAL_GPIO_Init+0xfa>
 80069d0:	4a90      	ldr	r2, [pc, #576]	; (8006c14 <HAL_GPIO_Init+0x298>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d869      	bhi.n	8006aaa <HAL_GPIO_Init+0x12e>
 80069d6:	4a90      	ldr	r2, [pc, #576]	; (8006c18 <HAL_GPIO_Init+0x29c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d04c      	beq.n	8006a76 <HAL_GPIO_Init+0xfa>
 80069dc:	4a8e      	ldr	r2, [pc, #568]	; (8006c18 <HAL_GPIO_Init+0x29c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d863      	bhi.n	8006aaa <HAL_GPIO_Init+0x12e>
 80069e2:	4a8e      	ldr	r2, [pc, #568]	; (8006c1c <HAL_GPIO_Init+0x2a0>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d046      	beq.n	8006a76 <HAL_GPIO_Init+0xfa>
 80069e8:	4a8c      	ldr	r2, [pc, #560]	; (8006c1c <HAL_GPIO_Init+0x2a0>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d85d      	bhi.n	8006aaa <HAL_GPIO_Init+0x12e>
 80069ee:	2b12      	cmp	r3, #18
 80069f0:	d82a      	bhi.n	8006a48 <HAL_GPIO_Init+0xcc>
 80069f2:	2b12      	cmp	r3, #18
 80069f4:	d859      	bhi.n	8006aaa <HAL_GPIO_Init+0x12e>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <HAL_GPIO_Init+0x80>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a77 	.word	0x08006a77
 8006a00:	08006a51 	.word	0x08006a51
 8006a04:	08006a63 	.word	0x08006a63
 8006a08:	08006aa5 	.word	0x08006aa5
 8006a0c:	08006aab 	.word	0x08006aab
 8006a10:	08006aab 	.word	0x08006aab
 8006a14:	08006aab 	.word	0x08006aab
 8006a18:	08006aab 	.word	0x08006aab
 8006a1c:	08006aab 	.word	0x08006aab
 8006a20:	08006aab 	.word	0x08006aab
 8006a24:	08006aab 	.word	0x08006aab
 8006a28:	08006aab 	.word	0x08006aab
 8006a2c:	08006aab 	.word	0x08006aab
 8006a30:	08006aab 	.word	0x08006aab
 8006a34:	08006aab 	.word	0x08006aab
 8006a38:	08006aab 	.word	0x08006aab
 8006a3c:	08006aab 	.word	0x08006aab
 8006a40:	08006a59 	.word	0x08006a59
 8006a44:	08006a6d 	.word	0x08006a6d
 8006a48:	4a75      	ldr	r2, [pc, #468]	; (8006c20 <HAL_GPIO_Init+0x2a4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006a4e:	e02c      	b.n	8006aaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	623b      	str	r3, [r7, #32]
          break;
 8006a56:	e029      	b.n	8006aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	623b      	str	r3, [r7, #32]
          break;
 8006a60:	e024      	b.n	8006aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	3308      	adds	r3, #8
 8006a68:	623b      	str	r3, [r7, #32]
          break;
 8006a6a:	e01f      	b.n	8006aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	330c      	adds	r3, #12
 8006a72:	623b      	str	r3, [r7, #32]
          break;
 8006a74:	e01a      	b.n	8006aac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006a7e:	2304      	movs	r3, #4
 8006a80:	623b      	str	r3, [r7, #32]
          break;
 8006a82:	e013      	b.n	8006aac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d105      	bne.n	8006a98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006a8c:	2308      	movs	r3, #8
 8006a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	611a      	str	r2, [r3, #16]
          break;
 8006a96:	e009      	b.n	8006aac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006a98:	2308      	movs	r3, #8
 8006a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	69fa      	ldr	r2, [r7, #28]
 8006aa0:	615a      	str	r2, [r3, #20]
          break;
 8006aa2:	e003      	b.n	8006aac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	623b      	str	r3, [r7, #32]
          break;
 8006aa8:	e000      	b.n	8006aac <HAL_GPIO_Init+0x130>
          break;
 8006aaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	2bff      	cmp	r3, #255	; 0xff
 8006ab0:	d801      	bhi.n	8006ab6 <HAL_GPIO_Init+0x13a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	e001      	b.n	8006aba <HAL_GPIO_Init+0x13e>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2bff      	cmp	r3, #255	; 0xff
 8006ac0:	d802      	bhi.n	8006ac8 <HAL_GPIO_Init+0x14c>
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	e002      	b.n	8006ace <HAL_GPIO_Init+0x152>
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	3b08      	subs	r3, #8
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	210f      	movs	r1, #15
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8006adc:	43db      	mvns	r3, r3
 8006ade:	401a      	ands	r2, r3
 8006ae0:	6a39      	ldr	r1, [r7, #32]
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 80c1 	beq.w	8006c7e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006afc:	4b49      	ldr	r3, [pc, #292]	; (8006c24 <HAL_GPIO_Init+0x2a8>)
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	4a48      	ldr	r2, [pc, #288]	; (8006c24 <HAL_GPIO_Init+0x2a8>)
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	6193      	str	r3, [r2, #24]
 8006b08:	4b46      	ldr	r3, [pc, #280]	; (8006c24 <HAL_GPIO_Init+0x2a8>)
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	60bb      	str	r3, [r7, #8]
 8006b12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006b14:	4a44      	ldr	r2, [pc, #272]	; (8006c28 <HAL_GPIO_Init+0x2ac>)
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	089b      	lsrs	r3, r3, #2
 8006b1a:	3302      	adds	r3, #2
 8006b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	f003 0303 	and.w	r3, r3, #3
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	220f      	movs	r2, #15
 8006b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b30:	43db      	mvns	r3, r3
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4013      	ands	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a3c      	ldr	r2, [pc, #240]	; (8006c2c <HAL_GPIO_Init+0x2b0>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d01f      	beq.n	8006b80 <HAL_GPIO_Init+0x204>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a3b      	ldr	r2, [pc, #236]	; (8006c30 <HAL_GPIO_Init+0x2b4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d019      	beq.n	8006b7c <HAL_GPIO_Init+0x200>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a3a      	ldr	r2, [pc, #232]	; (8006c34 <HAL_GPIO_Init+0x2b8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d013      	beq.n	8006b78 <HAL_GPIO_Init+0x1fc>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a39      	ldr	r2, [pc, #228]	; (8006c38 <HAL_GPIO_Init+0x2bc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00d      	beq.n	8006b74 <HAL_GPIO_Init+0x1f8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a38      	ldr	r2, [pc, #224]	; (8006c3c <HAL_GPIO_Init+0x2c0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d007      	beq.n	8006b70 <HAL_GPIO_Init+0x1f4>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a37      	ldr	r2, [pc, #220]	; (8006c40 <HAL_GPIO_Init+0x2c4>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d101      	bne.n	8006b6c <HAL_GPIO_Init+0x1f0>
 8006b68:	2305      	movs	r3, #5
 8006b6a:	e00a      	b.n	8006b82 <HAL_GPIO_Init+0x206>
 8006b6c:	2306      	movs	r3, #6
 8006b6e:	e008      	b.n	8006b82 <HAL_GPIO_Init+0x206>
 8006b70:	2304      	movs	r3, #4
 8006b72:	e006      	b.n	8006b82 <HAL_GPIO_Init+0x206>
 8006b74:	2303      	movs	r3, #3
 8006b76:	e004      	b.n	8006b82 <HAL_GPIO_Init+0x206>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e002      	b.n	8006b82 <HAL_GPIO_Init+0x206>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e000      	b.n	8006b82 <HAL_GPIO_Init+0x206>
 8006b80:	2300      	movs	r3, #0
 8006b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b84:	f002 0203 	and.w	r2, r2, #3
 8006b88:	0092      	lsls	r2, r2, #2
 8006b8a:	4093      	lsls	r3, r2
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006b92:	4925      	ldr	r1, [pc, #148]	; (8006c28 <HAL_GPIO_Init+0x2ac>)
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	089b      	lsrs	r3, r3, #2
 8006b98:	3302      	adds	r3, #2
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d006      	beq.n	8006bba <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006bac:	4b25      	ldr	r3, [pc, #148]	; (8006c44 <HAL_GPIO_Init+0x2c8>)
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	4924      	ldr	r1, [pc, #144]	; (8006c44 <HAL_GPIO_Init+0x2c8>)
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	608b      	str	r3, [r1, #8]
 8006bb8:	e006      	b.n	8006bc8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006bba:	4b22      	ldr	r3, [pc, #136]	; (8006c44 <HAL_GPIO_Init+0x2c8>)
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	43db      	mvns	r3, r3
 8006bc2:	4920      	ldr	r1, [pc, #128]	; (8006c44 <HAL_GPIO_Init+0x2c8>)
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d006      	beq.n	8006be2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006bd4:	4b1b      	ldr	r3, [pc, #108]	; (8006c44 <HAL_GPIO_Init+0x2c8>)
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	491a      	ldr	r1, [pc, #104]	; (8006c44 <HAL_GPIO_Init+0x2c8>)
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60cb      	str	r3, [r1, #12]
 8006be0:	e006      	b.n	8006bf0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006be2:	4b18      	ldr	r3, [pc, #96]	; (8006c44 <HAL_GPIO_Init+0x2c8>)
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	43db      	mvns	r3, r3
 8006bea:	4916      	ldr	r1, [pc, #88]	; (8006c44 <HAL_GPIO_Init+0x2c8>)
 8006bec:	4013      	ands	r3, r2
 8006bee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d025      	beq.n	8006c48 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006bfc:	4b11      	ldr	r3, [pc, #68]	; (8006c44 <HAL_GPIO_Init+0x2c8>)
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	4910      	ldr	r1, [pc, #64]	; (8006c44 <HAL_GPIO_Init+0x2c8>)
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	604b      	str	r3, [r1, #4]
 8006c08:	e025      	b.n	8006c56 <HAL_GPIO_Init+0x2da>
 8006c0a:	bf00      	nop
 8006c0c:	10320000 	.word	0x10320000
 8006c10:	10310000 	.word	0x10310000
 8006c14:	10220000 	.word	0x10220000
 8006c18:	10210000 	.word	0x10210000
 8006c1c:	10120000 	.word	0x10120000
 8006c20:	10110000 	.word	0x10110000
 8006c24:	40021000 	.word	0x40021000
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	40010800 	.word	0x40010800
 8006c30:	40010c00 	.word	0x40010c00
 8006c34:	40011000 	.word	0x40011000
 8006c38:	40011400 	.word	0x40011400
 8006c3c:	40011800 	.word	0x40011800
 8006c40:	40011c00 	.word	0x40011c00
 8006c44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006c48:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <HAL_GPIO_Init+0x324>)
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	4913      	ldr	r1, [pc, #76]	; (8006ca0 <HAL_GPIO_Init+0x324>)
 8006c52:	4013      	ands	r3, r2
 8006c54:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d006      	beq.n	8006c70 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006c62:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <HAL_GPIO_Init+0x324>)
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	490e      	ldr	r1, [pc, #56]	; (8006ca0 <HAL_GPIO_Init+0x324>)
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	600b      	str	r3, [r1, #0]
 8006c6e:	e006      	b.n	8006c7e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006c70:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <HAL_GPIO_Init+0x324>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	43db      	mvns	r3, r3
 8006c78:	4909      	ldr	r1, [pc, #36]	; (8006ca0 <HAL_GPIO_Init+0x324>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	3301      	adds	r3, #1
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f47f ae7e 	bne.w	8006990 <HAL_GPIO_Init+0x14>
  }
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	372c      	adds	r7, #44	; 0x2c
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bc80      	pop	{r7}
 8006c9e:	4770      	bx	lr
 8006ca0:	40010400 	.word	0x40010400

08006ca4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006cae:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006cb0:	695a      	ldr	r2, [r3, #20]
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d006      	beq.n	8006cc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006cba:	4a05      	ldr	r2, [pc, #20]	; (8006cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006cc0:	88fb      	ldrh	r3, [r7, #6]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff fab0 	bl	8006228 <HAL_GPIO_EXTI_Callback>
  }
}
 8006cc8:	bf00      	nop
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40010400 	.word	0x40010400

08006cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e272      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 8087 	beq.w	8006e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cf4:	4b92      	ldr	r3, [pc, #584]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f003 030c 	and.w	r3, r3, #12
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d00c      	beq.n	8006d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d00:	4b8f      	ldr	r3, [pc, #572]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f003 030c 	and.w	r3, r3, #12
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d112      	bne.n	8006d32 <HAL_RCC_OscConfig+0x5e>
 8006d0c:	4b8c      	ldr	r3, [pc, #560]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d18:	d10b      	bne.n	8006d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d1a:	4b89      	ldr	r3, [pc, #548]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d06c      	beq.n	8006e00 <HAL_RCC_OscConfig+0x12c>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d168      	bne.n	8006e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e24c      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3a:	d106      	bne.n	8006d4a <HAL_RCC_OscConfig+0x76>
 8006d3c:	4b80      	ldr	r3, [pc, #512]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a7f      	ldr	r2, [pc, #508]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	e02e      	b.n	8006da8 <HAL_RCC_OscConfig+0xd4>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10c      	bne.n	8006d6c <HAL_RCC_OscConfig+0x98>
 8006d52:	4b7b      	ldr	r3, [pc, #492]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a7a      	ldr	r2, [pc, #488]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	4b78      	ldr	r3, [pc, #480]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a77      	ldr	r2, [pc, #476]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	e01d      	b.n	8006da8 <HAL_RCC_OscConfig+0xd4>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d74:	d10c      	bne.n	8006d90 <HAL_RCC_OscConfig+0xbc>
 8006d76:	4b72      	ldr	r3, [pc, #456]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a71      	ldr	r2, [pc, #452]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	4b6f      	ldr	r3, [pc, #444]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a6e      	ldr	r2, [pc, #440]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	e00b      	b.n	8006da8 <HAL_RCC_OscConfig+0xd4>
 8006d90:	4b6b      	ldr	r3, [pc, #428]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a6a      	ldr	r2, [pc, #424]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	4b68      	ldr	r3, [pc, #416]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a67      	ldr	r2, [pc, #412]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d013      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db0:	f7ff fb66 	bl	8006480 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006db8:	f7ff fb62 	bl	8006480 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b64      	cmp	r3, #100	; 0x64
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e200      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dca:	4b5d      	ldr	r3, [pc, #372]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0f0      	beq.n	8006db8 <HAL_RCC_OscConfig+0xe4>
 8006dd6:	e014      	b.n	8006e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd8:	f7ff fb52 	bl	8006480 <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006de0:	f7ff fb4e 	bl	8006480 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b64      	cmp	r3, #100	; 0x64
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e1ec      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006df2:	4b53      	ldr	r3, [pc, #332]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f0      	bne.n	8006de0 <HAL_RCC_OscConfig+0x10c>
 8006dfe:	e000      	b.n	8006e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d063      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e0e:	4b4c      	ldr	r3, [pc, #304]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f003 030c 	and.w	r3, r3, #12
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00b      	beq.n	8006e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006e1a:	4b49      	ldr	r3, [pc, #292]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f003 030c 	and.w	r3, r3, #12
 8006e22:	2b08      	cmp	r3, #8
 8006e24:	d11c      	bne.n	8006e60 <HAL_RCC_OscConfig+0x18c>
 8006e26:	4b46      	ldr	r3, [pc, #280]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d116      	bne.n	8006e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e32:	4b43      	ldr	r3, [pc, #268]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d005      	beq.n	8006e4a <HAL_RCC_OscConfig+0x176>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d001      	beq.n	8006e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e1c0      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e4a:	4b3d      	ldr	r3, [pc, #244]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	4939      	ldr	r1, [pc, #228]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e5e:	e03a      	b.n	8006ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d020      	beq.n	8006eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e68:	4b36      	ldr	r3, [pc, #216]	; (8006f44 <HAL_RCC_OscConfig+0x270>)
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e6e:	f7ff fb07 	bl	8006480 <HAL_GetTick>
 8006e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e74:	e008      	b.n	8006e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e76:	f7ff fb03 	bl	8006480 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d901      	bls.n	8006e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e1a1      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e88:	4b2d      	ldr	r3, [pc, #180]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0f0      	beq.n	8006e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e94:	4b2a      	ldr	r3, [pc, #168]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	4927      	ldr	r1, [pc, #156]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	600b      	str	r3, [r1, #0]
 8006ea8:	e015      	b.n	8006ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eaa:	4b26      	ldr	r3, [pc, #152]	; (8006f44 <HAL_RCC_OscConfig+0x270>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb0:	f7ff fae6 	bl	8006480 <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eb8:	f7ff fae2 	bl	8006480 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e180      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eca:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1f0      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d03a      	beq.n	8006f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d019      	beq.n	8006f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eea:	4b17      	ldr	r3, [pc, #92]	; (8006f48 <HAL_RCC_OscConfig+0x274>)
 8006eec:	2201      	movs	r2, #1
 8006eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ef0:	f7ff fac6 	bl	8006480 <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ef8:	f7ff fac2 	bl	8006480 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e160      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f0a:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <HAL_RCC_OscConfig+0x26c>)
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0f0      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006f16:	2001      	movs	r0, #1
 8006f18:	f000 face 	bl	80074b8 <RCC_Delay>
 8006f1c:	e01c      	b.n	8006f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f1e:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <HAL_RCC_OscConfig+0x274>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f24:	f7ff faac 	bl	8006480 <HAL_GetTick>
 8006f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f2a:	e00f      	b.n	8006f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f2c:	f7ff faa8 	bl	8006480 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d908      	bls.n	8006f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e146      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
 8006f3e:	bf00      	nop
 8006f40:	40021000 	.word	0x40021000
 8006f44:	42420000 	.word	0x42420000
 8006f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f4c:	4b92      	ldr	r3, [pc, #584]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e9      	bne.n	8006f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 80a6 	beq.w	80070b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f66:	2300      	movs	r3, #0
 8006f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f6a:	4b8b      	ldr	r3, [pc, #556]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10d      	bne.n	8006f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f76:	4b88      	ldr	r3, [pc, #544]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	4a87      	ldr	r2, [pc, #540]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8006f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f80:	61d3      	str	r3, [r2, #28]
 8006f82:	4b85      	ldr	r3, [pc, #532]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f8a:	60bb      	str	r3, [r7, #8]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f92:	4b82      	ldr	r3, [pc, #520]	; (800719c <HAL_RCC_OscConfig+0x4c8>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d118      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f9e:	4b7f      	ldr	r3, [pc, #508]	; (800719c <HAL_RCC_OscConfig+0x4c8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a7e      	ldr	r2, [pc, #504]	; (800719c <HAL_RCC_OscConfig+0x4c8>)
 8006fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006faa:	f7ff fa69 	bl	8006480 <HAL_GetTick>
 8006fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fb0:	e008      	b.n	8006fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb2:	f7ff fa65 	bl	8006480 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b64      	cmp	r3, #100	; 0x64
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e103      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fc4:	4b75      	ldr	r3, [pc, #468]	; (800719c <HAL_RCC_OscConfig+0x4c8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0f0      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d106      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x312>
 8006fd8:	4b6f      	ldr	r3, [pc, #444]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	4a6e      	ldr	r2, [pc, #440]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8006fde:	f043 0301 	orr.w	r3, r3, #1
 8006fe2:	6213      	str	r3, [r2, #32]
 8006fe4:	e02d      	b.n	8007042 <HAL_RCC_OscConfig+0x36e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10c      	bne.n	8007008 <HAL_RCC_OscConfig+0x334>
 8006fee:	4b6a      	ldr	r3, [pc, #424]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	4a69      	ldr	r2, [pc, #420]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	6213      	str	r3, [r2, #32]
 8006ffa:	4b67      	ldr	r3, [pc, #412]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	4a66      	ldr	r2, [pc, #408]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8007000:	f023 0304 	bic.w	r3, r3, #4
 8007004:	6213      	str	r3, [r2, #32]
 8007006:	e01c      	b.n	8007042 <HAL_RCC_OscConfig+0x36e>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	2b05      	cmp	r3, #5
 800700e:	d10c      	bne.n	800702a <HAL_RCC_OscConfig+0x356>
 8007010:	4b61      	ldr	r3, [pc, #388]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	4a60      	ldr	r2, [pc, #384]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8007016:	f043 0304 	orr.w	r3, r3, #4
 800701a:	6213      	str	r3, [r2, #32]
 800701c:	4b5e      	ldr	r3, [pc, #376]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	4a5d      	ldr	r2, [pc, #372]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	6213      	str	r3, [r2, #32]
 8007028:	e00b      	b.n	8007042 <HAL_RCC_OscConfig+0x36e>
 800702a:	4b5b      	ldr	r3, [pc, #364]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	4a5a      	ldr	r2, [pc, #360]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	6213      	str	r3, [r2, #32]
 8007036:	4b58      	ldr	r3, [pc, #352]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	4a57      	ldr	r2, [pc, #348]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 800703c:	f023 0304 	bic.w	r3, r3, #4
 8007040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d015      	beq.n	8007076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800704a:	f7ff fa19 	bl	8006480 <HAL_GetTick>
 800704e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007050:	e00a      	b.n	8007068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007052:	f7ff fa15 	bl	8006480 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007060:	4293      	cmp	r3, r2
 8007062:	d901      	bls.n	8007068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e0b1      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007068:	4b4b      	ldr	r3, [pc, #300]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0ee      	beq.n	8007052 <HAL_RCC_OscConfig+0x37e>
 8007074:	e014      	b.n	80070a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007076:	f7ff fa03 	bl	8006480 <HAL_GetTick>
 800707a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800707c:	e00a      	b.n	8007094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800707e:	f7ff f9ff 	bl	8006480 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	f241 3288 	movw	r2, #5000	; 0x1388
 800708c:	4293      	cmp	r3, r2
 800708e:	d901      	bls.n	8007094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e09b      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007094:	4b40      	ldr	r3, [pc, #256]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1ee      	bne.n	800707e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d105      	bne.n	80070b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070a6:	4b3c      	ldr	r3, [pc, #240]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	4a3b      	ldr	r2, [pc, #236]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 80070ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 8087 	beq.w	80071ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070bc:	4b36      	ldr	r3, [pc, #216]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f003 030c 	and.w	r3, r3, #12
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d061      	beq.n	800718c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d146      	bne.n	800715e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d0:	4b33      	ldr	r3, [pc, #204]	; (80071a0 <HAL_RCC_OscConfig+0x4cc>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d6:	f7ff f9d3 	bl	8006480 <HAL_GetTick>
 80070da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070dc:	e008      	b.n	80070f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070de:	f7ff f9cf 	bl	8006480 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d901      	bls.n	80070f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e06d      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070f0:	4b29      	ldr	r3, [pc, #164]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1f0      	bne.n	80070de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007104:	d108      	bne.n	8007118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007106:	4b24      	ldr	r3, [pc, #144]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	4921      	ldr	r1, [pc, #132]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8007114:	4313      	orrs	r3, r2
 8007116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007118:	4b1f      	ldr	r3, [pc, #124]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a19      	ldr	r1, [r3, #32]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	430b      	orrs	r3, r1
 800712a:	491b      	ldr	r1, [pc, #108]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 800712c:	4313      	orrs	r3, r2
 800712e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007130:	4b1b      	ldr	r3, [pc, #108]	; (80071a0 <HAL_RCC_OscConfig+0x4cc>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007136:	f7ff f9a3 	bl	8006480 <HAL_GetTick>
 800713a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800713e:	f7ff f99f 	bl	8006480 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e03d      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007150:	4b11      	ldr	r3, [pc, #68]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0f0      	beq.n	800713e <HAL_RCC_OscConfig+0x46a>
 800715c:	e035      	b.n	80071ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800715e:	4b10      	ldr	r3, [pc, #64]	; (80071a0 <HAL_RCC_OscConfig+0x4cc>)
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007164:	f7ff f98c 	bl	8006480 <HAL_GetTick>
 8007168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800716a:	e008      	b.n	800717e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800716c:	f7ff f988 	bl	8006480 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b02      	cmp	r3, #2
 8007178:	d901      	bls.n	800717e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e026      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800717e:	4b06      	ldr	r3, [pc, #24]	; (8007198 <HAL_RCC_OscConfig+0x4c4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f0      	bne.n	800716c <HAL_RCC_OscConfig+0x498>
 800718a:	e01e      	b.n	80071ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d107      	bne.n	80071a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e019      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
 8007198:	40021000 	.word	0x40021000
 800719c:	40007000 	.word	0x40007000
 80071a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80071a4:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <HAL_RCC_OscConfig+0x500>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d106      	bne.n	80071c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d001      	beq.n	80071ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e000      	b.n	80071cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40021000 	.word	0x40021000

080071d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0d0      	b.n	800738e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071ec:	4b6a      	ldr	r3, [pc, #424]	; (8007398 <HAL_RCC_ClockConfig+0x1c0>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d910      	bls.n	800721c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fa:	4b67      	ldr	r3, [pc, #412]	; (8007398 <HAL_RCC_ClockConfig+0x1c0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f023 0207 	bic.w	r2, r3, #7
 8007202:	4965      	ldr	r1, [pc, #404]	; (8007398 <HAL_RCC_ClockConfig+0x1c0>)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800720a:	4b63      	ldr	r3, [pc, #396]	; (8007398 <HAL_RCC_ClockConfig+0x1c0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d001      	beq.n	800721c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e0b8      	b.n	800738e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d020      	beq.n	800726a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b00      	cmp	r3, #0
 8007232:	d005      	beq.n	8007240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007234:	4b59      	ldr	r3, [pc, #356]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	4a58      	ldr	r2, [pc, #352]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 800723a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800723e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	2b00      	cmp	r3, #0
 800724a:	d005      	beq.n	8007258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800724c:	4b53      	ldr	r3, [pc, #332]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	4a52      	ldr	r2, [pc, #328]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 8007252:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007258:	4b50      	ldr	r3, [pc, #320]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	494d      	ldr	r1, [pc, #308]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 8007266:	4313      	orrs	r3, r2
 8007268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d040      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d107      	bne.n	800728e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800727e:	4b47      	ldr	r3, [pc, #284]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d115      	bne.n	80072b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e07f      	b.n	800738e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b02      	cmp	r3, #2
 8007294:	d107      	bne.n	80072a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007296:	4b41      	ldr	r3, [pc, #260]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e073      	b.n	800738e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072a6:	4b3d      	ldr	r3, [pc, #244]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e06b      	b.n	800738e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072b6:	4b39      	ldr	r3, [pc, #228]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f023 0203 	bic.w	r2, r3, #3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	4936      	ldr	r1, [pc, #216]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072c8:	f7ff f8da 	bl	8006480 <HAL_GetTick>
 80072cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ce:	e00a      	b.n	80072e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072d0:	f7ff f8d6 	bl	8006480 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	f241 3288 	movw	r2, #5000	; 0x1388
 80072de:	4293      	cmp	r3, r2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e053      	b.n	800738e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072e6:	4b2d      	ldr	r3, [pc, #180]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f003 020c 	and.w	r2, r3, #12
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d1eb      	bne.n	80072d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072f8:	4b27      	ldr	r3, [pc, #156]	; (8007398 <HAL_RCC_ClockConfig+0x1c0>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0307 	and.w	r3, r3, #7
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d210      	bcs.n	8007328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007306:	4b24      	ldr	r3, [pc, #144]	; (8007398 <HAL_RCC_ClockConfig+0x1c0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f023 0207 	bic.w	r2, r3, #7
 800730e:	4922      	ldr	r1, [pc, #136]	; (8007398 <HAL_RCC_ClockConfig+0x1c0>)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	4313      	orrs	r3, r2
 8007314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007316:	4b20      	ldr	r3, [pc, #128]	; (8007398 <HAL_RCC_ClockConfig+0x1c0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d001      	beq.n	8007328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e032      	b.n	800738e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007334:	4b19      	ldr	r3, [pc, #100]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	4916      	ldr	r1, [pc, #88]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 8007342:	4313      	orrs	r3, r2
 8007344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007352:	4b12      	ldr	r3, [pc, #72]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	490e      	ldr	r1, [pc, #56]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 8007362:	4313      	orrs	r3, r2
 8007364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007366:	f000 f821 	bl	80073ac <HAL_RCC_GetSysClockFreq>
 800736a:	4602      	mov	r2, r0
 800736c:	4b0b      	ldr	r3, [pc, #44]	; (800739c <HAL_RCC_ClockConfig+0x1c4>)
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	091b      	lsrs	r3, r3, #4
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	490a      	ldr	r1, [pc, #40]	; (80073a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007378:	5ccb      	ldrb	r3, [r1, r3]
 800737a:	fa22 f303 	lsr.w	r3, r2, r3
 800737e:	4a09      	ldr	r2, [pc, #36]	; (80073a4 <HAL_RCC_ClockConfig+0x1cc>)
 8007380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007382:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <HAL_RCC_ClockConfig+0x1d0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff f838 	bl	80063fc <HAL_InitTick>

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	40022000 	.word	0x40022000
 800739c:	40021000 	.word	0x40021000
 80073a0:	08009a3c 	.word	0x08009a3c
 80073a4:	20000004 	.word	0x20000004
 80073a8:	20000008 	.word	0x20000008

080073ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	2300      	movs	r3, #0
 80073b8:	60bb      	str	r3, [r7, #8]
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]
 80073be:	2300      	movs	r3, #0
 80073c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80073c6:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <HAL_RCC_GetSysClockFreq+0x94>)
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 030c 	and.w	r3, r3, #12
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d002      	beq.n	80073dc <HAL_RCC_GetSysClockFreq+0x30>
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d003      	beq.n	80073e2 <HAL_RCC_GetSysClockFreq+0x36>
 80073da:	e027      	b.n	800742c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80073dc:	4b19      	ldr	r3, [pc, #100]	; (8007444 <HAL_RCC_GetSysClockFreq+0x98>)
 80073de:	613b      	str	r3, [r7, #16]
      break;
 80073e0:	e027      	b.n	8007432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	0c9b      	lsrs	r3, r3, #18
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	4a17      	ldr	r2, [pc, #92]	; (8007448 <HAL_RCC_GetSysClockFreq+0x9c>)
 80073ec:	5cd3      	ldrb	r3, [r2, r3]
 80073ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d010      	beq.n	800741c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80073fa:	4b11      	ldr	r3, [pc, #68]	; (8007440 <HAL_RCC_GetSysClockFreq+0x94>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	0c5b      	lsrs	r3, r3, #17
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	4a11      	ldr	r2, [pc, #68]	; (800744c <HAL_RCC_GetSysClockFreq+0xa0>)
 8007406:	5cd3      	ldrb	r3, [r2, r3]
 8007408:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a0d      	ldr	r2, [pc, #52]	; (8007444 <HAL_RCC_GetSysClockFreq+0x98>)
 800740e:	fb03 f202 	mul.w	r2, r3, r2
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	fbb2 f3f3 	udiv	r3, r2, r3
 8007418:	617b      	str	r3, [r7, #20]
 800741a:	e004      	b.n	8007426 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a0c      	ldr	r2, [pc, #48]	; (8007450 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007420:	fb02 f303 	mul.w	r3, r2, r3
 8007424:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	613b      	str	r3, [r7, #16]
      break;
 800742a:	e002      	b.n	8007432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800742c:	4b05      	ldr	r3, [pc, #20]	; (8007444 <HAL_RCC_GetSysClockFreq+0x98>)
 800742e:	613b      	str	r3, [r7, #16]
      break;
 8007430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007432:	693b      	ldr	r3, [r7, #16]
}
 8007434:	4618      	mov	r0, r3
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	40021000 	.word	0x40021000
 8007444:	007a1200 	.word	0x007a1200
 8007448:	08009a54 	.word	0x08009a54
 800744c:	08009a64 	.word	0x08009a64
 8007450:	003d0900 	.word	0x003d0900

08007454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007458:	4b02      	ldr	r3, [pc, #8]	; (8007464 <HAL_RCC_GetHCLKFreq+0x10>)
 800745a:	681b      	ldr	r3, [r3, #0]
}
 800745c:	4618      	mov	r0, r3
 800745e:	46bd      	mov	sp, r7
 8007460:	bc80      	pop	{r7}
 8007462:	4770      	bx	lr
 8007464:	20000004 	.word	0x20000004

08007468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800746c:	f7ff fff2 	bl	8007454 <HAL_RCC_GetHCLKFreq>
 8007470:	4602      	mov	r2, r0
 8007472:	4b05      	ldr	r3, [pc, #20]	; (8007488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	0a1b      	lsrs	r3, r3, #8
 8007478:	f003 0307 	and.w	r3, r3, #7
 800747c:	4903      	ldr	r1, [pc, #12]	; (800748c <HAL_RCC_GetPCLK1Freq+0x24>)
 800747e:	5ccb      	ldrb	r3, [r1, r3]
 8007480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007484:	4618      	mov	r0, r3
 8007486:	bd80      	pop	{r7, pc}
 8007488:	40021000 	.word	0x40021000
 800748c:	08009a4c 	.word	0x08009a4c

08007490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007494:	f7ff ffde 	bl	8007454 <HAL_RCC_GetHCLKFreq>
 8007498:	4602      	mov	r2, r0
 800749a:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	0adb      	lsrs	r3, r3, #11
 80074a0:	f003 0307 	and.w	r3, r3, #7
 80074a4:	4903      	ldr	r1, [pc, #12]	; (80074b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074a6:	5ccb      	ldrb	r3, [r1, r3]
 80074a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	40021000 	.word	0x40021000
 80074b4:	08009a4c 	.word	0x08009a4c

080074b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80074c0:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <RCC_Delay+0x34>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a0a      	ldr	r2, [pc, #40]	; (80074f0 <RCC_Delay+0x38>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	0a5b      	lsrs	r3, r3, #9
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	fb02 f303 	mul.w	r3, r2, r3
 80074d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80074d4:	bf00      	nop
  }
  while (Delay --);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	1e5a      	subs	r2, r3, #1
 80074da:	60fa      	str	r2, [r7, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f9      	bne.n	80074d4 <RCC_Delay+0x1c>
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bc80      	pop	{r7}
 80074ea:	4770      	bx	lr
 80074ec:	20000004 	.word	0x20000004
 80074f0:	10624dd3 	.word	0x10624dd3

080074f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e042      	b.n	800758c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fe fede 	bl	80062dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2224      	movs	r2, #36	; 0x24
 8007524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fdc5 	bl	80080c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	691a      	ldr	r2, [r3, #16]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800754c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	695a      	ldr	r2, [r3, #20]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800755c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800756c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2220      	movs	r2, #32
 8007580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08a      	sub	sp, #40	; 0x28
 8007598:	af02      	add	r7, sp, #8
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	603b      	str	r3, [r7, #0]
 80075a0:	4613      	mov	r3, r2
 80075a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b20      	cmp	r3, #32
 80075b2:	d16d      	bne.n	8007690 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <HAL_UART_Transmit+0x2c>
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e066      	b.n	8007692 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2221      	movs	r2, #33	; 0x21
 80075ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075d2:	f7fe ff55 	bl	8006480 <HAL_GetTick>
 80075d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	88fa      	ldrh	r2, [r7, #6]
 80075dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	88fa      	ldrh	r2, [r7, #6]
 80075e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ec:	d108      	bne.n	8007600 <HAL_UART_Transmit+0x6c>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d104      	bne.n	8007600 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	61bb      	str	r3, [r7, #24]
 80075fe:	e003      	b.n	8007608 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007604:	2300      	movs	r3, #0
 8007606:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007608:	e02a      	b.n	8007660 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2200      	movs	r2, #0
 8007612:	2180      	movs	r1, #128	; 0x80
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 fb14 	bl	8007c42 <UART_WaitOnFlagUntilTimeout>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e036      	b.n	8007692 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10b      	bne.n	8007642 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007638:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	3302      	adds	r3, #2
 800763e:	61bb      	str	r3, [r7, #24]
 8007640:	e007      	b.n	8007652 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	781a      	ldrb	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	3301      	adds	r3, #1
 8007650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007656:	b29b      	uxth	r3, r3
 8007658:	3b01      	subs	r3, #1
 800765a:	b29a      	uxth	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1cf      	bne.n	800760a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2200      	movs	r2, #0
 8007672:	2140      	movs	r1, #64	; 0x40
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 fae4 	bl	8007c42 <UART_WaitOnFlagUntilTimeout>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e006      	b.n	8007692 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2220      	movs	r2, #32
 8007688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	e000      	b.n	8007692 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007690:	2302      	movs	r3, #2
  }
}
 8007692:	4618      	mov	r0, r3
 8007694:	3720      	adds	r7, #32
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	4613      	mov	r3, r2
 80076a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b20      	cmp	r3, #32
 80076b2:	d112      	bne.n	80076da <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <HAL_UART_Receive_IT+0x26>
 80076ba:	88fb      	ldrh	r3, [r7, #6]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e00b      	b.n	80076dc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	461a      	mov	r2, r3
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 fb24 	bl	8007d1e <UART_Start_Receive_IT>
 80076d6:	4603      	mov	r3, r0
 80076d8:	e000      	b.n	80076dc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80076da:	2302      	movs	r3, #2
  }
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b0ba      	sub	sp, #232	; 0xe8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800770a:	2300      	movs	r3, #0
 800770c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007710:	2300      	movs	r3, #0
 8007712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10f      	bne.n	800774a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800772a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772e:	f003 0320 	and.w	r3, r3, #32
 8007732:	2b00      	cmp	r3, #0
 8007734:	d009      	beq.n	800774a <HAL_UART_IRQHandler+0x66>
 8007736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fc01 	bl	8007f4a <UART_Receive_IT>
      return;
 8007748:	e25b      	b.n	8007c02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800774a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 80de 	beq.w	8007910 <HAL_UART_IRQHandler+0x22c>
 8007754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b00      	cmp	r3, #0
 800775e:	d106      	bne.n	800776e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007764:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 80d1 	beq.w	8007910 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800776e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00b      	beq.n	8007792 <HAL_UART_IRQHandler+0xae>
 800777a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800777e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007782:	2b00      	cmp	r3, #0
 8007784:	d005      	beq.n	8007792 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778a:	f043 0201 	orr.w	r2, r3, #1
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007796:	f003 0304 	and.w	r3, r3, #4
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00b      	beq.n	80077b6 <HAL_UART_IRQHandler+0xd2>
 800779e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d005      	beq.n	80077b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ae:	f043 0202 	orr.w	r2, r3, #2
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00b      	beq.n	80077da <HAL_UART_IRQHandler+0xf6>
 80077c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d005      	beq.n	80077da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d2:	f043 0204 	orr.w	r2, r3, #4
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077de:	f003 0308 	and.w	r3, r3, #8
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d011      	beq.n	800780a <HAL_UART_IRQHandler+0x126>
 80077e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d105      	bne.n	80077fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d005      	beq.n	800780a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007802:	f043 0208 	orr.w	r2, r3, #8
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 81f2 	beq.w	8007bf8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007818:	f003 0320 	and.w	r3, r3, #32
 800781c:	2b00      	cmp	r3, #0
 800781e:	d008      	beq.n	8007832 <HAL_UART_IRQHandler+0x14e>
 8007820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fb8c 	bl	8007f4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	bf14      	ite	ne
 8007840:	2301      	movne	r3, #1
 8007842:	2300      	moveq	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	2b00      	cmp	r3, #0
 8007854:	d103      	bne.n	800785e <HAL_UART_IRQHandler+0x17a>
 8007856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800785a:	2b00      	cmp	r3, #0
 800785c:	d04f      	beq.n	80078fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fa96 	bl	8007d90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d041      	beq.n	80078f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3314      	adds	r3, #20
 8007878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800788c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3314      	adds	r3, #20
 800789a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800789e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1d9      	bne.n	8007872 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d013      	beq.n	80078ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ca:	4a7e      	ldr	r2, [pc, #504]	; (8007ac4 <HAL_UART_IRQHandler+0x3e0>)
 80078cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe ff4a 	bl	800676c <HAL_DMA_Abort_IT>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d016      	beq.n	800790c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80078e8:	4610      	mov	r0, r2
 80078ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ec:	e00e      	b.n	800790c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f993 	bl	8007c1a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f4:	e00a      	b.n	800790c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f98f 	bl	8007c1a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078fc:	e006      	b.n	800790c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f98b 	bl	8007c1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800790a:	e175      	b.n	8007bf8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800790c:	bf00      	nop
    return;
 800790e:	e173      	b.n	8007bf8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007914:	2b01      	cmp	r3, #1
 8007916:	f040 814f 	bne.w	8007bb8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800791a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791e:	f003 0310 	and.w	r3, r3, #16
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 8148 	beq.w	8007bb8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800792c:	f003 0310 	and.w	r3, r3, #16
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 8141 	beq.w	8007bb8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007936:	2300      	movs	r3, #0
 8007938:	60bb      	str	r3, [r7, #8]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	60bb      	str	r3, [r7, #8]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	60bb      	str	r3, [r7, #8]
 800794a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 80b6 	beq.w	8007ac8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007968:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 8145 	beq.w	8007bfc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800797a:	429a      	cmp	r2, r3
 800797c:	f080 813e 	bcs.w	8007bfc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007986:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	2b20      	cmp	r3, #32
 8007990:	f000 8088 	beq.w	8007aa4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	330c      	adds	r3, #12
 800799a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079a2:	e853 3f00 	ldrex	r3, [r3]
 80079a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	330c      	adds	r3, #12
 80079bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079c0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1d9      	bne.n	8007994 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3314      	adds	r3, #20
 80079e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079f2:	f023 0301 	bic.w	r3, r3, #1
 80079f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3314      	adds	r3, #20
 8007a00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a04:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a08:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e1      	bne.n	80079e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3314      	adds	r3, #20
 8007a22:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3314      	adds	r3, #20
 8007a3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a40:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a48:	e841 2300 	strex	r3, r2, [r1]
 8007a4c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e3      	bne.n	8007a1c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2220      	movs	r2, #32
 8007a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	330c      	adds	r3, #12
 8007a68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a74:	f023 0310 	bic.w	r3, r3, #16
 8007a78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	330c      	adds	r3, #12
 8007a82:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a86:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a88:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e3      	bne.n	8007a62 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fe fe29 	bl	80066f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f8b6 	bl	8007c2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ac0:	e09c      	b.n	8007bfc <HAL_UART_IRQHandler+0x518>
 8007ac2:	bf00      	nop
 8007ac4:	08007e55 	.word	0x08007e55
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 808e 	beq.w	8007c00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 8089 	beq.w	8007c00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	330c      	adds	r3, #12
 8007af4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	330c      	adds	r3, #12
 8007b0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b12:	647a      	str	r2, [r7, #68]	; 0x44
 8007b14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e3      	bne.n	8007aee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3314      	adds	r3, #20
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	623b      	str	r3, [r7, #32]
   return(result);
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	f023 0301 	bic.w	r3, r3, #1
 8007b3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3314      	adds	r3, #20
 8007b46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b4a:	633a      	str	r2, [r7, #48]	; 0x30
 8007b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e3      	bne.n	8007b26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2220      	movs	r2, #32
 8007b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	330c      	adds	r3, #12
 8007b72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f023 0310 	bic.w	r3, r3, #16
 8007b82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	330c      	adds	r3, #12
 8007b8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b90:	61fa      	str	r2, [r7, #28]
 8007b92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	69b9      	ldr	r1, [r7, #24]
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e3      	bne.n	8007b6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007baa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f83b 	bl	8007c2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bb6:	e023      	b.n	8007c00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d009      	beq.n	8007bd8 <HAL_UART_IRQHandler+0x4f4>
 8007bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d003      	beq.n	8007bd8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f953 	bl	8007e7c <UART_Transmit_IT>
    return;
 8007bd6:	e014      	b.n	8007c02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00e      	beq.n	8007c02 <HAL_UART_IRQHandler+0x51e>
 8007be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d008      	beq.n	8007c02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f992 	bl	8007f1a <UART_EndTransmit_IT>
    return;
 8007bf6:	e004      	b.n	8007c02 <HAL_UART_IRQHandler+0x51e>
    return;
 8007bf8:	bf00      	nop
 8007bfa:	e002      	b.n	8007c02 <HAL_UART_IRQHandler+0x51e>
      return;
 8007bfc:	bf00      	nop
 8007bfe:	e000      	b.n	8007c02 <HAL_UART_IRQHandler+0x51e>
      return;
 8007c00:	bf00      	nop
  }
}
 8007c02:	37e8      	adds	r7, #232	; 0xe8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bc80      	pop	{r7}
 8007c18:	4770      	bx	lr

08007c1a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bc80      	pop	{r7}
 8007c2a:	4770      	bx	lr

08007c2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bc80      	pop	{r7}
 8007c40:	4770      	bx	lr

08007c42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b090      	sub	sp, #64	; 0x40
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	603b      	str	r3, [r7, #0]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c52:	e050      	b.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5a:	d04c      	beq.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c62:	f7fe fc0d 	bl	8006480 <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d241      	bcs.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	330c      	adds	r3, #12
 8007c78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	e853 3f00 	ldrex	r3, [r3]
 8007c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	330c      	adds	r3, #12
 8007c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c92:	637a      	str	r2, [r7, #52]	; 0x34
 8007c94:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e5      	bne.n	8007c72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3314      	adds	r3, #20
 8007cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f023 0301 	bic.w	r3, r3, #1
 8007cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3314      	adds	r3, #20
 8007cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cc6:	623a      	str	r2, [r7, #32]
 8007cc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	69f9      	ldr	r1, [r7, #28]
 8007ccc:	6a3a      	ldr	r2, [r7, #32]
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e5      	bne.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2220      	movs	r2, #32
 8007ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e00f      	b.n	8007d16 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	bf0c      	ite	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	2300      	movne	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d09f      	beq.n	8007c54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3740      	adds	r7, #64	; 0x40
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b085      	sub	sp, #20
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	88fa      	ldrh	r2, [r7, #6]
 8007d36:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	88fa      	ldrh	r2, [r7, #6]
 8007d3c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2222      	movs	r2, #34	; 0x22
 8007d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d007      	beq.n	8007d64 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68da      	ldr	r2, [r3, #12]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	695a      	ldr	r2, [r3, #20]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0201 	orr.w	r2, r2, #1
 8007d72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0220 	orr.w	r2, r2, #32
 8007d82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr

08007d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b095      	sub	sp, #84	; 0x54
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	330c      	adds	r3, #12
 8007d9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	330c      	adds	r3, #12
 8007db6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007db8:	643a      	str	r2, [r7, #64]	; 0x40
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e5      	bne.n	8007d98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3314      	adds	r3, #20
 8007dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	f023 0301 	bic.w	r3, r3, #1
 8007de2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3314      	adds	r3, #20
 8007dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e5      	bne.n	8007dcc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d119      	bne.n	8007e3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	330c      	adds	r3, #12
 8007e0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	e853 3f00 	ldrex	r3, [r3]
 8007e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f023 0310 	bic.w	r3, r3, #16
 8007e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	330c      	adds	r3, #12
 8007e26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e28:	61ba      	str	r2, [r7, #24]
 8007e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	6979      	ldr	r1, [r7, #20]
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	613b      	str	r3, [r7, #16]
   return(result);
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e5      	bne.n	8007e08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e4a:	bf00      	nop
 8007e4c:	3754      	adds	r7, #84	; 0x54
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr

08007e54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f7ff fed3 	bl	8007c1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e74:	bf00      	nop
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b21      	cmp	r3, #33	; 0x21
 8007e8e:	d13e      	bne.n	8007f0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e98:	d114      	bne.n	8007ec4 <UART_Transmit_IT+0x48>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d110      	bne.n	8007ec4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eb6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	1c9a      	adds	r2, r3, #2
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	621a      	str	r2, [r3, #32]
 8007ec2:	e008      	b.n	8007ed6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	1c59      	adds	r1, r3, #1
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	6211      	str	r1, [r2, #32]
 8007ece:	781a      	ldrb	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10f      	bne.n	8007f0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68da      	ldr	r2, [r3, #12]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ef8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e000      	b.n	8007f10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f0e:	2302      	movs	r3, #2
  }
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr

08007f1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff fe64 	bl	8007c08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b08c      	sub	sp, #48	; 0x30
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b22      	cmp	r3, #34	; 0x22
 8007f5c:	f040 80ae 	bne.w	80080bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f68:	d117      	bne.n	8007f9a <UART_Receive_IT+0x50>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d113      	bne.n	8007f9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f92:	1c9a      	adds	r2, r3, #2
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	629a      	str	r2, [r3, #40]	; 0x28
 8007f98:	e026      	b.n	8007fe8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fac:	d007      	beq.n	8007fbe <UART_Receive_IT+0x74>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10a      	bne.n	8007fcc <UART_Receive_IT+0x82>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	e008      	b.n	8007fde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d15d      	bne.n	80080b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0220 	bic.w	r2, r2, #32
 800800a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800801a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	695a      	ldr	r2, [r3, #20]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f022 0201 	bic.w	r2, r2, #1
 800802a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803e:	2b01      	cmp	r3, #1
 8008040:	d135      	bne.n	80080ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	330c      	adds	r3, #12
 800804e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	613b      	str	r3, [r7, #16]
   return(result);
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f023 0310 	bic.w	r3, r3, #16
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	330c      	adds	r3, #12
 8008066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008068:	623a      	str	r2, [r7, #32]
 800806a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	69f9      	ldr	r1, [r7, #28]
 800806e:	6a3a      	ldr	r2, [r7, #32]
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	61bb      	str	r3, [r7, #24]
   return(result);
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e5      	bne.n	8008048 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0310 	and.w	r3, r3, #16
 8008086:	2b10      	cmp	r3, #16
 8008088:	d10a      	bne.n	80080a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	60fb      	str	r3, [r7, #12]
 800809e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff fdc0 	bl	8007c2c <HAL_UARTEx_RxEventCallback>
 80080ac:	e002      	b.n	80080b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fe f884 	bl	80061bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	e002      	b.n	80080be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	e000      	b.n	80080be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80080bc:	2302      	movs	r3, #2
  }
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3730      	adds	r7, #48	; 0x30
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	431a      	orrs	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008102:	f023 030c 	bic.w	r3, r3, #12
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6812      	ldr	r2, [r2, #0]
 800810a:	68b9      	ldr	r1, [r7, #8]
 800810c:	430b      	orrs	r3, r1
 800810e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	699a      	ldr	r2, [r3, #24]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a2c      	ldr	r2, [pc, #176]	; (80081dc <UART_SetConfig+0x114>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d103      	bne.n	8008138 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008130:	f7ff f9ae 	bl	8007490 <HAL_RCC_GetPCLK2Freq>
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	e002      	b.n	800813e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008138:	f7ff f996 	bl	8007468 <HAL_RCC_GetPCLK1Freq>
 800813c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	4613      	mov	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	009a      	lsls	r2, r3, #2
 8008148:	441a      	add	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	fbb2 f3f3 	udiv	r3, r2, r3
 8008154:	4a22      	ldr	r2, [pc, #136]	; (80081e0 <UART_SetConfig+0x118>)
 8008156:	fba2 2303 	umull	r2, r3, r2, r3
 800815a:	095b      	lsrs	r3, r3, #5
 800815c:	0119      	lsls	r1, r3, #4
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	4613      	mov	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	009a      	lsls	r2, r3, #2
 8008168:	441a      	add	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	fbb2 f2f3 	udiv	r2, r2, r3
 8008174:	4b1a      	ldr	r3, [pc, #104]	; (80081e0 <UART_SetConfig+0x118>)
 8008176:	fba3 0302 	umull	r0, r3, r3, r2
 800817a:	095b      	lsrs	r3, r3, #5
 800817c:	2064      	movs	r0, #100	; 0x64
 800817e:	fb00 f303 	mul.w	r3, r0, r3
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	011b      	lsls	r3, r3, #4
 8008186:	3332      	adds	r3, #50	; 0x32
 8008188:	4a15      	ldr	r2, [pc, #84]	; (80081e0 <UART_SetConfig+0x118>)
 800818a:	fba2 2303 	umull	r2, r3, r2, r3
 800818e:	095b      	lsrs	r3, r3, #5
 8008190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008194:	4419      	add	r1, r3
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009a      	lsls	r2, r3, #2
 80081a0:	441a      	add	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80081ac:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <UART_SetConfig+0x118>)
 80081ae:	fba3 0302 	umull	r0, r3, r3, r2
 80081b2:	095b      	lsrs	r3, r3, #5
 80081b4:	2064      	movs	r0, #100	; 0x64
 80081b6:	fb00 f303 	mul.w	r3, r0, r3
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	3332      	adds	r3, #50	; 0x32
 80081c0:	4a07      	ldr	r2, [pc, #28]	; (80081e0 <UART_SetConfig+0x118>)
 80081c2:	fba2 2303 	umull	r2, r3, r2, r3
 80081c6:	095b      	lsrs	r3, r3, #5
 80081c8:	f003 020f 	and.w	r2, r3, #15
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	440a      	add	r2, r1
 80081d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80081d4:	bf00      	nop
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	40013800 	.word	0x40013800
 80081e0:	51eb851f 	.word	0x51eb851f

080081e4 <memset>:
 80081e4:	4603      	mov	r3, r0
 80081e6:	4402      	add	r2, r0
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d100      	bne.n	80081ee <memset+0xa>
 80081ec:	4770      	bx	lr
 80081ee:	f803 1b01 	strb.w	r1, [r3], #1
 80081f2:	e7f9      	b.n	80081e8 <memset+0x4>

080081f4 <__libc_init_array>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	2600      	movs	r6, #0
 80081f8:	4d0c      	ldr	r5, [pc, #48]	; (800822c <__libc_init_array+0x38>)
 80081fa:	4c0d      	ldr	r4, [pc, #52]	; (8008230 <__libc_init_array+0x3c>)
 80081fc:	1b64      	subs	r4, r4, r5
 80081fe:	10a4      	asrs	r4, r4, #2
 8008200:	42a6      	cmp	r6, r4
 8008202:	d109      	bne.n	8008218 <__libc_init_array+0x24>
 8008204:	f000 f81a 	bl	800823c <_init>
 8008208:	2600      	movs	r6, #0
 800820a:	4d0a      	ldr	r5, [pc, #40]	; (8008234 <__libc_init_array+0x40>)
 800820c:	4c0a      	ldr	r4, [pc, #40]	; (8008238 <__libc_init_array+0x44>)
 800820e:	1b64      	subs	r4, r4, r5
 8008210:	10a4      	asrs	r4, r4, #2
 8008212:	42a6      	cmp	r6, r4
 8008214:	d105      	bne.n	8008222 <__libc_init_array+0x2e>
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	f855 3b04 	ldr.w	r3, [r5], #4
 800821c:	4798      	blx	r3
 800821e:	3601      	adds	r6, #1
 8008220:	e7ee      	b.n	8008200 <__libc_init_array+0xc>
 8008222:	f855 3b04 	ldr.w	r3, [r5], #4
 8008226:	4798      	blx	r3
 8008228:	3601      	adds	r6, #1
 800822a:	e7f2      	b.n	8008212 <__libc_init_array+0x1e>
 800822c:	08009a68 	.word	0x08009a68
 8008230:	08009a68 	.word	0x08009a68
 8008234:	08009a68 	.word	0x08009a68
 8008238:	08009a6c 	.word	0x08009a6c

0800823c <_init>:
 800823c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823e:	bf00      	nop
 8008240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008242:	bc08      	pop	{r3}
 8008244:	469e      	mov	lr, r3
 8008246:	4770      	bx	lr

08008248 <_fini>:
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	bf00      	nop
 800824c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824e:	bc08      	pop	{r3}
 8008250:	469e      	mov	lr, r3
 8008252:	4770      	bx	lr
